
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000be2  00000c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010e  0080010e  00000c84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ab8  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ad2  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a64  00000000  00000000  00003442  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000464  00000000  00000000  00003ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ad  00000000  00000000  0000430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ff2  00000000  00000000  000047b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  000057ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 ee       	ldi	r30, 0xE2	; 226
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 30       	cpi	r26, 0x0E	; 14
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e0       	ldi	r26, 0x0E	; 14
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 31       	cpi	r26, 0x18	; 24
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:



void ADC_init()
{	
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <main>:



int main(void)
{
	DDRD  = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	81 bb       	out	0x11, r24	; 17
	
	UartInit();
  c0:	0e 94 89 01 	call	0x312	; 0x312 <UartInit>
	SRAM_init();
  c4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SRAM_init>
	ADC_init();
  c8:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	init_OLED();
  cc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <init_OLED>
	
	MCP_init();
  d0:	0e 94 de 00 	call	0x1bc	; 0x1bc <MCP_init>
	
	CAN_init();
  d4:	0e 94 87 00 	call	0x10e	; 0x10e <CAN_init>
//const unsigned char* streng = "Espen er en GAUDER";
//const unsigned char* streng2 = "Gaute er en test";
//const unsigned char* streng3 = "Runar er en test";
	
	// Enable Global Interrupts
	sei();
  d8:	78 94       	sei
				
				MCP_write(0b00110110,0x58);
				_delay_ms(2);
				//printf("%x \n",0x55);
				int temp = MCP_read(0b00110110);
				printf("%x \n",temp);
  da:	c8 e0       	ldi	r28, 0x08	; 8
  dc:	d1 e0       	ldi	r29, 0x01	; 1
		//{
		//OLED_picture();
		////}
		//OLED_menu();
				
				MCP_write(0b00110110,0x58);
  de:	68 e5       	ldi	r22, 0x58	; 88
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	86 e3       	ldi	r24, 0x36	; 54
  e4:	0e 94 c6 00 	call	0x18c	; 0x18c <MCP_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	89 e9       	ldi	r24, 0x99	; 153
  ea:	99 e0       	ldi	r25, 0x09	; 9
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x30>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x36>
				_delay_ms(2);
				//printf("%x \n",0x55);
				int temp = MCP_read(0b00110110);
  f2:	86 e3       	ldi	r24, 0x36	; 54
  f4:	0e 94 b6 00 	call	0x16c	; 0x16c <MCP_read>
				printf("%x \n",temp);
  f8:	9f 93       	push	r25
  fa:	8f 93       	push	r24
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <printf>
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	e8 cf       	rjmp	.-48     	; 0xde <main+0x22>

0000010e <CAN_init>:



void CAN_init()
{
	MCP_init();
 10e:	0e 94 de 00 	call	0x1bc	; 0x1bc <MCP_init>
	MCP_bitmod(MCP_RXB0CTRL,0xFF,0x64);
 112:	44 e6       	ldi	r20, 0x64	; 100
 114:	6f ef       	ldi	r22, 0xFF	; 255
 116:	80 e6       	ldi	r24, 0x60	; 96
 118:	0e 94 9e 00 	call	0x13c	; 0x13c <MCP_bitmod>
	MCP_bitmod(MCP_TXB0CTRL,0xFF,0x00);
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	6f ef       	ldi	r22, 0xFF	; 255
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	0e 94 9e 00 	call	0x13c	; 0x13c <MCP_bitmod>
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_LOOPBACK);		// Setting MCP to loop-back mode MODE_MASK
 126:	40 e4       	ldi	r20, 0x40	; 64
 128:	60 ee       	ldi	r22, 0xE0	; 224
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	0e 94 9e 00 	call	0x13c	; 0x13c <MCP_bitmod>
	MCP_bitmod(MCP_CANINTE, 0x01, 1);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	8b e2       	ldi	r24, 0x2B	; 43
 136:	0e 94 9e 00 	call	0x13c	; 0x13c <MCP_bitmod>
 13a:	08 95       	ret

0000013c <MCP_bitmod>:
}



void MCP_bitmod(unsigned char reg, unsigned char bit, unsigned char bittil)
{
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	18 2f       	mov	r17, r24
 144:	d6 2f       	mov	r29, r22
 146:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);					// Chip select
 148:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_BITMOD);			// send command "I want to modify bit"
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	SPI_tranciever(reg);				// In what register do you want to operate
 150:	81 2f       	mov	r24, r17
 152:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	SPI_tranciever(bit);				// What bit mask do you want to change
 156:	8d 2f       	mov	r24, r29
 158:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	SPI_tranciever(bittil);				// What to you want to change to
 15c:	8c 2f       	mov	r24, r28
 15e:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	PORTB |=(1<<PB4);						// chip de-select
 162:	c4 9a       	sbi	0x18, 4	; 24
	
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	08 95       	ret

0000016c <MCP_read>:
// Note that bitmod will change multiple bits unless one specifies which bit address to change. f.ex: bit = DLC3 & DLC2
// This will only change these two, but to use the function this way DLC3 and DCL2 must be defined first

unsigned int MCP_read(unsigned char address)
{
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
	unsigned int result;
	PORTB &= ~(1<<PB4);				// Selects can controller
 170:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_READ);		// Send command "I want to read MCP
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	SPI_tranciever(address);		// Address we want to read
 178:	8c 2f       	mov	r24, r28
 17a:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	result = SPI_tranciever(0xFF);	// Save What we read in result
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	PORTB |=(1<<PB4);					// De-selects can controller
 184:	c4 9a       	sbi	0x18, 4	; 24
	return result;					// Return what we read
}
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <MCP_write>:

void MCP_write(unsigned char address, unsigned int data)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	d8 2f       	mov	r29, r24
 192:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);					
 194:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_WRITE);		// Send command "I want to write"
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	SPI_tranciever(address);		// Where we want to write to
 19c:	8d 2f       	mov	r24, r29
 19e:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	SPI_tranciever(data);			// What we want to write
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	
	PORTB |=(1<<PB4);
 1a8:	c4 9a       	sbi	0x18, 4	; 24
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <MCP_reset>:

void MCP_reset()
{
	PORTB &= ~(1<<PB4);	
 1b0:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RESET);		// Send command "I want to reset MCP"
 1b2:	80 ec       	ldi	r24, 0xC0	; 192
 1b4:	0e 94 75 01 	call	0x2ea	; 0x2ea <SPI_tranciever>
	PORTB |=(1<<PB4);
 1b8:	c4 9a       	sbi	0x18, 4	; 24
 1ba:	08 95       	ret

000001bc <MCP_init>:
#include "SPI.h"
#include <avr/io.h>
void MCP_init()
{
	// Makes sure registers are clean and MCP in control mode
	SPI_MasterInit();
 1bc:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_MasterInit>
	MCP_reset();
 1c0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <MCP_reset>
 1c4:	08 95       	ret

000001c6 <init_OLED>:
volatile char *write_d = (char *) 0x1200; 
char Name[3];

void init_OLED()
{
	MCUCR |= (1<<SRE);
 1c6:	85 b7       	in	r24, 0x35	; 53
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 1cc:	80 b7       	in	r24, 0x30	; 48
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	80 bf       	out	0x30, r24	; 48
	*write_c = (0xae);        //  display  off
 1d2:	e0 91 06 01 	lds	r30, 0x0106
 1d6:	f0 91 07 01 	lds	r31, 0x0107
 1da:	8e ea       	ldi	r24, 0xAE	; 174
 1dc:	80 83       	st	Z, r24
	*write_c = (0xa1);        //segment  remap
 1de:	e0 91 06 01 	lds	r30, 0x0106
 1e2:	f0 91 07 01 	lds	r31, 0x0107
 1e6:	81 ea       	ldi	r24, 0xA1	; 161
 1e8:	80 83       	st	Z, r24
	*write_c = (0xda);        //common  pads  hardware:  alternative
 1ea:	e0 91 06 01 	lds	r30, 0x0106
 1ee:	f0 91 07 01 	lds	r31, 0x0107
 1f2:	8a ed       	ldi	r24, 0xDA	; 218
 1f4:	80 83       	st	Z, r24
	*write_c = (0x12);
 1f6:	e0 91 06 01 	lds	r30, 0x0106
 1fa:	f0 91 07 01 	lds	r31, 0x0107
 1fe:	82 e1       	ldi	r24, 0x12	; 18
 200:	80 83       	st	Z, r24
	*write_c = (0xc8);        //common output scan direction:com63~com0
 202:	e0 91 06 01 	lds	r30, 0x0106
 206:	f0 91 07 01 	lds	r31, 0x0107
 20a:	88 ec       	ldi	r24, 0xC8	; 200
 20c:	80 83       	st	Z, r24
	*write_c = (0xa8);        //multiplex  ration  mode:63
 20e:	e0 91 06 01 	lds	r30, 0x0106
 212:	f0 91 07 01 	lds	r31, 0x0107
 216:	88 ea       	ldi	r24, 0xA8	; 168
 218:	80 83       	st	Z, r24
	*write_c = (0x3f);
 21a:	e0 91 06 01 	lds	r30, 0x0106
 21e:	f0 91 07 01 	lds	r31, 0x0107
 222:	8f e3       	ldi	r24, 0x3F	; 63
 224:	80 83       	st	Z, r24
	*write_c = (0xd5);        //display divide ratio/osc. freq. mode
 226:	e0 91 06 01 	lds	r30, 0x0106
 22a:	f0 91 07 01 	lds	r31, 0x0107
 22e:	85 ed       	ldi	r24, 0xD5	; 213
 230:	80 83       	st	Z, r24
	*write_c = (0x80);
 232:	e0 91 06 01 	lds	r30, 0x0106
 236:	f0 91 07 01 	lds	r31, 0x0107
 23a:	80 e8       	ldi	r24, 0x80	; 128
 23c:	80 83       	st	Z, r24
	*write_c = (0x81);        //contrast  control
 23e:	e0 91 06 01 	lds	r30, 0x0106
 242:	f0 91 07 01 	lds	r31, 0x0107
 246:	81 e8       	ldi	r24, 0x81	; 129
 248:	80 83       	st	Z, r24
	*write_c = (0x50);
 24a:	e0 91 06 01 	lds	r30, 0x0106
 24e:	f0 91 07 01 	lds	r31, 0x0107
 252:	80 e5       	ldi	r24, 0x50	; 80
 254:	80 83       	st	Z, r24
	*write_c = (0xd9);        //set  pre-charge  period
 256:	e0 91 06 01 	lds	r30, 0x0106
 25a:	f0 91 07 01 	lds	r31, 0x0107
 25e:	89 ed       	ldi	r24, 0xD9	; 217
 260:	80 83       	st	Z, r24
	*write_c = (0x21);
 262:	e0 91 06 01 	lds	r30, 0x0106
 266:	f0 91 07 01 	lds	r31, 0x0107
 26a:	81 e2       	ldi	r24, 0x21	; 33
 26c:	80 83       	st	Z, r24
	*write_c = (0x20);        //Set  Memory  Addressing  Mode
 26e:	e0 91 06 01 	lds	r30, 0x0106
 272:	f0 91 07 01 	lds	r31, 0x0107
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	80 83       	st	Z, r24
	*write_c = (0x02);
 27a:	e0 91 06 01 	lds	r30, 0x0106
 27e:	f0 91 07 01 	lds	r31, 0x0107
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	80 83       	st	Z, r24
	*write_c = (0xdb);        //VCOM  deselect  level  mode
 286:	e0 91 06 01 	lds	r30, 0x0106
 28a:	f0 91 07 01 	lds	r31, 0x0107
 28e:	8b ed       	ldi	r24, 0xDB	; 219
 290:	80 83       	st	Z, r24
	*write_c = (0x30);
 292:	e0 91 06 01 	lds	r30, 0x0106
 296:	f0 91 07 01 	lds	r31, 0x0107
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	80 83       	st	Z, r24
	*write_c = (0xad);        //master  configuration
 29e:	e0 91 06 01 	lds	r30, 0x0106
 2a2:	f0 91 07 01 	lds	r31, 0x0107
 2a6:	8d ea       	ldi	r24, 0xAD	; 173
 2a8:	80 83       	st	Z, r24
	*write_c = (0x00);
 2aa:	e0 91 06 01 	lds	r30, 0x0106
 2ae:	f0 91 07 01 	lds	r31, 0x0107
 2b2:	10 82       	st	Z, r1
	*write_c = (0xa4);        //out  follows  RAM  content
 2b4:	e0 91 06 01 	lds	r30, 0x0106
 2b8:	f0 91 07 01 	lds	r31, 0x0107
 2bc:	84 ea       	ldi	r24, 0xA4	; 164
 2be:	80 83       	st	Z, r24
	*write_c = (0xa6);        //set  normal  display
 2c0:	e0 91 06 01 	lds	r30, 0x0106
 2c4:	f0 91 07 01 	lds	r31, 0x0107
 2c8:	86 ea       	ldi	r24, 0xA6	; 166
 2ca:	80 83       	st	Z, r24
	*write_c = (0xaf);        //  display  on
 2cc:	e0 91 06 01 	lds	r30, 0x0106
 2d0:	f0 91 07 01 	lds	r31, 0x0107
 2d4:	8f ea       	ldi	r24, 0xAF	; 175
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret

000002da <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	/* Set MOSI, SS and SCK output, all others input */
	DDRB &= ~(1<<PB6);
 2da:	be 98       	cbi	0x17, 6	; 23
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
 2dc:	87 b3       	in	r24, 0x17	; 23
 2de:	80 6b       	ori	r24, 0xB0	; 176
 2e0:	87 bb       	out	0x17, r24	; 23
	//PORTB |= (1<<PB4);
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 2e2:	8d b1       	in	r24, 0x0d	; 13
 2e4:	81 65       	ori	r24, 0x51	; 81
 2e6:	8d b9       	out	0x0d, r24	; 13
 2e8:	08 95       	ret

000002ea <SPI_tranciever>:
unsigned char SPI_tranciever(unsigned char data)
{

	/* Start transmission */

	SPDR = data;
 2ea:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
 2ec:	77 9b       	sbis	0x0e, 7	; 14
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <SPI_tranciever+0x2>

	//Return received data
	return SPDR;
 2f0:	8f b1       	in	r24, 0x0f	; 15
}
 2f2:	08 95       	ret

000002f4 <SRAM_init>:



void SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
 2f4:	85 b7       	in	r24, 0x35	; 53
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 2fa:	80 b7       	in	r24, 0x30	; 48
 2fc:	80 62       	ori	r24, 0x20	; 32
 2fe:	80 bf       	out	0x30, r24	; 48
 300:	08 95       	ret

00000302 <USART_Receive>:


unsigned char USART_Receive(void)
	{
	//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 302:	5f 9b       	sbis	0x0b, 7	; 11
 304:	fe cf       	rjmp	.-4      	; 0x302 <USART_Receive>
	
	//Get and return received data from buffer
	return UDR0;
 306:	8c b1       	in	r24, 0x0c	; 12
	}
 308:	08 95       	ret

0000030a <USART_Transmit>:

void USART_Transmit( unsigned char data )
	{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
 30a:	5d 9b       	sbis	0x0b, 5	; 11
 30c:	fe cf       	rjmp	.-4      	; 0x30a <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 30e:	8c b9       	out	0x0c, r24	; 12
 310:	08 95       	ret

00000312 <UartInit>:

	
//}
void UartInit(){
	//Set Baud rate 9600
	UBRR0H = (unsigned char)(MYUBRR>>8);	// Setter de 8 mest signifikante bitene
 312:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBRR);	// Setter de 8 minst signifikante bitene
 314:	8f e1       	ldi	r24, 0x1F	; 31
 316:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 318:	88 e1       	ldi	r24, 0x18	; 24
 31a:	8a b9       	out	0x0a, r24	; 10
	// 8N2
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 31c:	8e e8       	ldi	r24, 0x8E	; 142
 31e:	80 bd       	out	0x20, r24	; 32
	fdevopen(&USART_Transmit, &USART_Receive);
 320:	61 e8       	ldi	r22, 0x81	; 129
 322:	71 e0       	ldi	r23, 0x01	; 1
 324:	85 e8       	ldi	r24, 0x85	; 133
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 97 01 	call	0x32e	; 0x32e <fdevopen>
 32c:	08 95       	ret

0000032e <fdevopen>:
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
 338:	8b 01       	movw	r16, r22
 33a:	00 97       	sbiw	r24, 0x00	; 0
 33c:	31 f4       	brne	.+12     	; 0x34a <fdevopen+0x1c>
 33e:	61 15       	cp	r22, r1
 340:	71 05       	cpc	r23, r1
 342:	19 f4       	brne	.+6      	; 0x34a <fdevopen+0x1c>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	38 c0       	rjmp	.+112    	; 0x3ba <fdevopen+0x8c>
 34a:	6e e0       	ldi	r22, 0x0E	; 14
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 c8 03 	call	0x790	; 0x790 <calloc>
 356:	fc 01       	movw	r30, r24
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	a1 f3       	breq	.-24     	; 0x344 <fdevopen+0x16>
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	83 83       	std	Z+3, r24	; 0x03
 360:	01 15       	cp	r16, r1
 362:	11 05       	cpc	r17, r1
 364:	71 f0       	breq	.+28     	; 0x382 <fdevopen+0x54>
 366:	13 87       	std	Z+11, r17	; 0x0b
 368:	02 87       	std	Z+10, r16	; 0x0a
 36a:	81 e8       	ldi	r24, 0x81	; 129
 36c:	83 83       	std	Z+3, r24	; 0x03
 36e:	80 91 0e 01 	lds	r24, 0x010E
 372:	90 91 0f 01 	lds	r25, 0x010F
 376:	89 2b       	or	r24, r25
 378:	21 f4       	brne	.+8      	; 0x382 <fdevopen+0x54>
 37a:	f0 93 0f 01 	sts	0x010F, r31
 37e:	e0 93 0e 01 	sts	0x010E, r30
 382:	20 97       	sbiw	r28, 0x00	; 0
 384:	c9 f0       	breq	.+50     	; 0x3b8 <fdevopen+0x8a>
 386:	d1 87       	std	Z+9, r29	; 0x09
 388:	c0 87       	std	Z+8, r28	; 0x08
 38a:	83 81       	ldd	r24, Z+3	; 0x03
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	83 83       	std	Z+3, r24	; 0x03
 390:	80 91 10 01 	lds	r24, 0x0110
 394:	90 91 11 01 	lds	r25, 0x0111
 398:	89 2b       	or	r24, r25
 39a:	71 f4       	brne	.+28     	; 0x3b8 <fdevopen+0x8a>
 39c:	f0 93 11 01 	sts	0x0111, r31
 3a0:	e0 93 10 01 	sts	0x0110, r30
 3a4:	80 91 12 01 	lds	r24, 0x0112
 3a8:	90 91 13 01 	lds	r25, 0x0113
 3ac:	89 2b       	or	r24, r25
 3ae:	21 f4       	brne	.+8      	; 0x3b8 <fdevopen+0x8a>
 3b0:	f0 93 13 01 	sts	0x0113, r31
 3b4:	e0 93 12 01 	sts	0x0112, r30
 3b8:	cf 01       	movw	r24, r30
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	08 95       	ret

000003c4 <printf>:
 3c4:	a0 e0       	ldi	r26, 0x00	; 0
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	e8 ee       	ldi	r30, 0xE8	; 232
 3ca:	f1 e0       	ldi	r31, 0x01	; 1
 3cc:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__prologue_saves__+0x20>
 3d0:	fe 01       	movw	r30, r28
 3d2:	35 96       	adiw	r30, 0x05	; 5
 3d4:	61 91       	ld	r22, Z+
 3d6:	71 91       	ld	r23, Z+
 3d8:	af 01       	movw	r20, r30
 3da:	80 91 10 01 	lds	r24, 0x0110
 3de:	90 91 11 01 	lds	r25, 0x0111
 3e2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <vfprintf>
 3e6:	e2 e0       	ldi	r30, 0x02	; 2
 3e8:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__epilogue_restores__+0x20>

000003ec <vfprintf>:
 3ec:	ac e0       	ldi	r26, 0x0C	; 12
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	ec ef       	ldi	r30, 0xFC	; 252
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__prologue_saves__>
 3f8:	7c 01       	movw	r14, r24
 3fa:	6b 01       	movw	r12, r22
 3fc:	8a 01       	movw	r16, r20
 3fe:	fc 01       	movw	r30, r24
 400:	17 82       	std	Z+7, r1	; 0x07
 402:	16 82       	std	Z+6, r1	; 0x06
 404:	83 81       	ldd	r24, Z+3	; 0x03
 406:	81 ff       	sbrs	r24, 1
 408:	bd c1       	rjmp	.+890    	; 0x784 <__stack+0x285>
 40a:	ce 01       	movw	r24, r28
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	4c 01       	movw	r8, r24
 410:	f7 01       	movw	r30, r14
 412:	93 81       	ldd	r25, Z+3	; 0x03
 414:	f6 01       	movw	r30, r12
 416:	93 fd       	sbrc	r25, 3
 418:	85 91       	lpm	r24, Z+
 41a:	93 ff       	sbrs	r25, 3
 41c:	81 91       	ld	r24, Z+
 41e:	6f 01       	movw	r12, r30
 420:	88 23       	and	r24, r24
 422:	09 f4       	brne	.+2      	; 0x426 <vfprintf+0x3a>
 424:	ab c1       	rjmp	.+854    	; 0x77c <__stack+0x27d>
 426:	85 32       	cpi	r24, 0x25	; 37
 428:	39 f4       	brne	.+14     	; 0x438 <vfprintf+0x4c>
 42a:	93 fd       	sbrc	r25, 3
 42c:	85 91       	lpm	r24, Z+
 42e:	93 ff       	sbrs	r25, 3
 430:	81 91       	ld	r24, Z+
 432:	6f 01       	movw	r12, r30
 434:	85 32       	cpi	r24, 0x25	; 37
 436:	29 f4       	brne	.+10     	; 0x442 <vfprintf+0x56>
 438:	b7 01       	movw	r22, r14
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 440:	e7 cf       	rjmp	.-50     	; 0x410 <vfprintf+0x24>
 442:	51 2c       	mov	r5, r1
 444:	31 2c       	mov	r3, r1
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	20 32       	cpi	r18, 0x20	; 32
 44a:	a0 f4       	brcc	.+40     	; 0x474 <vfprintf+0x88>
 44c:	8b 32       	cpi	r24, 0x2B	; 43
 44e:	69 f0       	breq	.+26     	; 0x46a <vfprintf+0x7e>
 450:	30 f4       	brcc	.+12     	; 0x45e <vfprintf+0x72>
 452:	80 32       	cpi	r24, 0x20	; 32
 454:	59 f0       	breq	.+22     	; 0x46c <vfprintf+0x80>
 456:	83 32       	cpi	r24, 0x23	; 35
 458:	69 f4       	brne	.+26     	; 0x474 <vfprintf+0x88>
 45a:	20 61       	ori	r18, 0x10	; 16
 45c:	2c c0       	rjmp	.+88     	; 0x4b6 <vfprintf+0xca>
 45e:	8d 32       	cpi	r24, 0x2D	; 45
 460:	39 f0       	breq	.+14     	; 0x470 <vfprintf+0x84>
 462:	80 33       	cpi	r24, 0x30	; 48
 464:	39 f4       	brne	.+14     	; 0x474 <vfprintf+0x88>
 466:	21 60       	ori	r18, 0x01	; 1
 468:	26 c0       	rjmp	.+76     	; 0x4b6 <vfprintf+0xca>
 46a:	22 60       	ori	r18, 0x02	; 2
 46c:	24 60       	ori	r18, 0x04	; 4
 46e:	23 c0       	rjmp	.+70     	; 0x4b6 <vfprintf+0xca>
 470:	28 60       	ori	r18, 0x08	; 8
 472:	21 c0       	rjmp	.+66     	; 0x4b6 <vfprintf+0xca>
 474:	27 fd       	sbrc	r18, 7
 476:	27 c0       	rjmp	.+78     	; 0x4c6 <vfprintf+0xda>
 478:	30 ed       	ldi	r19, 0xD0	; 208
 47a:	38 0f       	add	r19, r24
 47c:	3a 30       	cpi	r19, 0x0A	; 10
 47e:	78 f4       	brcc	.+30     	; 0x49e <vfprintf+0xb2>
 480:	26 ff       	sbrs	r18, 6
 482:	06 c0       	rjmp	.+12     	; 0x490 <vfprintf+0xa4>
 484:	fa e0       	ldi	r31, 0x0A	; 10
 486:	5f 9e       	mul	r5, r31
 488:	30 0d       	add	r19, r0
 48a:	11 24       	eor	r1, r1
 48c:	53 2e       	mov	r5, r19
 48e:	13 c0       	rjmp	.+38     	; 0x4b6 <vfprintf+0xca>
 490:	8a e0       	ldi	r24, 0x0A	; 10
 492:	38 9e       	mul	r3, r24
 494:	30 0d       	add	r19, r0
 496:	11 24       	eor	r1, r1
 498:	33 2e       	mov	r3, r19
 49a:	20 62       	ori	r18, 0x20	; 32
 49c:	0c c0       	rjmp	.+24     	; 0x4b6 <vfprintf+0xca>
 49e:	8e 32       	cpi	r24, 0x2E	; 46
 4a0:	21 f4       	brne	.+8      	; 0x4aa <vfprintf+0xbe>
 4a2:	26 fd       	sbrc	r18, 6
 4a4:	6b c1       	rjmp	.+726    	; 0x77c <__stack+0x27d>
 4a6:	20 64       	ori	r18, 0x40	; 64
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <vfprintf+0xca>
 4aa:	8c 36       	cpi	r24, 0x6C	; 108
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <vfprintf+0xc6>
 4ae:	20 68       	ori	r18, 0x80	; 128
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <vfprintf+0xca>
 4b2:	88 36       	cpi	r24, 0x68	; 104
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <vfprintf+0xda>
 4b6:	f6 01       	movw	r30, r12
 4b8:	93 fd       	sbrc	r25, 3
 4ba:	85 91       	lpm	r24, Z+
 4bc:	93 ff       	sbrs	r25, 3
 4be:	81 91       	ld	r24, Z+
 4c0:	6f 01       	movw	r12, r30
 4c2:	81 11       	cpse	r24, r1
 4c4:	c1 cf       	rjmp	.-126    	; 0x448 <vfprintf+0x5c>
 4c6:	98 2f       	mov	r25, r24
 4c8:	9f 7d       	andi	r25, 0xDF	; 223
 4ca:	95 54       	subi	r25, 0x45	; 69
 4cc:	93 30       	cpi	r25, 0x03	; 3
 4ce:	28 f4       	brcc	.+10     	; 0x4da <vfprintf+0xee>
 4d0:	0c 5f       	subi	r16, 0xFC	; 252
 4d2:	1f 4f       	sbci	r17, 0xFF	; 255
 4d4:	ff e3       	ldi	r31, 0x3F	; 63
 4d6:	f9 83       	std	Y+1, r31	; 0x01
 4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <vfprintf+0x108>
 4da:	83 36       	cpi	r24, 0x63	; 99
 4dc:	31 f0       	breq	.+12     	; 0x4ea <vfprintf+0xfe>
 4de:	83 37       	cpi	r24, 0x73	; 115
 4e0:	71 f0       	breq	.+28     	; 0x4fe <vfprintf+0x112>
 4e2:	83 35       	cpi	r24, 0x53	; 83
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <vfprintf+0xfc>
 4e6:	5b c0       	rjmp	.+182    	; 0x59e <__stack+0x9f>
 4e8:	22 c0       	rjmp	.+68     	; 0x52e <__stack+0x2f>
 4ea:	f8 01       	movw	r30, r16
 4ec:	80 81       	ld	r24, Z
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	0e 5f       	subi	r16, 0xFE	; 254
 4f2:	1f 4f       	sbci	r17, 0xFF	; 255
 4f4:	44 24       	eor	r4, r4
 4f6:	43 94       	inc	r4
 4f8:	51 2c       	mov	r5, r1
 4fa:	54 01       	movw	r10, r8
 4fc:	15 c0       	rjmp	.+42     	; 0x528 <__stack+0x29>
 4fe:	38 01       	movw	r6, r16
 500:	f2 e0       	ldi	r31, 0x02	; 2
 502:	6f 0e       	add	r6, r31
 504:	71 1c       	adc	r7, r1
 506:	f8 01       	movw	r30, r16
 508:	a0 80       	ld	r10, Z
 50a:	b1 80       	ldd	r11, Z+1	; 0x01
 50c:	26 ff       	sbrs	r18, 6
 50e:	03 c0       	rjmp	.+6      	; 0x516 <__stack+0x17>
 510:	65 2d       	mov	r22, r5
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <__stack+0x1b>
 516:	6f ef       	ldi	r22, 0xFF	; 255
 518:	7f ef       	ldi	r23, 0xFF	; 255
 51a:	c5 01       	movw	r24, r10
 51c:	2c 87       	std	Y+12, r18	; 0x0c
 51e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <strnlen>
 522:	2c 01       	movw	r4, r24
 524:	83 01       	movw	r16, r6
 526:	2c 85       	ldd	r18, Y+12	; 0x0c
 528:	2f 77       	andi	r18, 0x7F	; 127
 52a:	22 2e       	mov	r2, r18
 52c:	17 c0       	rjmp	.+46     	; 0x55c <__stack+0x5d>
 52e:	38 01       	movw	r6, r16
 530:	f2 e0       	ldi	r31, 0x02	; 2
 532:	6f 0e       	add	r6, r31
 534:	71 1c       	adc	r7, r1
 536:	f8 01       	movw	r30, r16
 538:	a0 80       	ld	r10, Z
 53a:	b1 80       	ldd	r11, Z+1	; 0x01
 53c:	26 ff       	sbrs	r18, 6
 53e:	03 c0       	rjmp	.+6      	; 0x546 <__stack+0x47>
 540:	65 2d       	mov	r22, r5
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <__stack+0x4b>
 546:	6f ef       	ldi	r22, 0xFF	; 255
 548:	7f ef       	ldi	r23, 0xFF	; 255
 54a:	c5 01       	movw	r24, r10
 54c:	2c 87       	std	Y+12, r18	; 0x0c
 54e:	0e 94 0b 05 	call	0xa16	; 0xa16 <strnlen_P>
 552:	2c 01       	movw	r4, r24
 554:	2c 85       	ldd	r18, Y+12	; 0x0c
 556:	20 68       	ori	r18, 0x80	; 128
 558:	22 2e       	mov	r2, r18
 55a:	83 01       	movw	r16, r6
 55c:	23 fc       	sbrc	r2, 3
 55e:	1b c0       	rjmp	.+54     	; 0x596 <__stack+0x97>
 560:	83 2d       	mov	r24, r3
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	48 16       	cp	r4, r24
 566:	59 06       	cpc	r5, r25
 568:	b0 f4       	brcc	.+44     	; 0x596 <__stack+0x97>
 56a:	b7 01       	movw	r22, r14
 56c:	80 e2       	ldi	r24, 0x20	; 32
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 574:	3a 94       	dec	r3
 576:	f4 cf       	rjmp	.-24     	; 0x560 <__stack+0x61>
 578:	f5 01       	movw	r30, r10
 57a:	27 fc       	sbrc	r2, 7
 57c:	85 91       	lpm	r24, Z+
 57e:	27 fe       	sbrs	r2, 7
 580:	81 91       	ld	r24, Z+
 582:	5f 01       	movw	r10, r30
 584:	b7 01       	movw	r22, r14
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 58c:	31 10       	cpse	r3, r1
 58e:	3a 94       	dec	r3
 590:	f1 e0       	ldi	r31, 0x01	; 1
 592:	4f 1a       	sub	r4, r31
 594:	51 08       	sbc	r5, r1
 596:	41 14       	cp	r4, r1
 598:	51 04       	cpc	r5, r1
 59a:	71 f7       	brne	.-36     	; 0x578 <__stack+0x79>
 59c:	e5 c0       	rjmp	.+458    	; 0x768 <__stack+0x269>
 59e:	84 36       	cpi	r24, 0x64	; 100
 5a0:	11 f0       	breq	.+4      	; 0x5a6 <__stack+0xa7>
 5a2:	89 36       	cpi	r24, 0x69	; 105
 5a4:	39 f5       	brne	.+78     	; 0x5f4 <__stack+0xf5>
 5a6:	f8 01       	movw	r30, r16
 5a8:	27 ff       	sbrs	r18, 7
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <__stack+0xbb>
 5ac:	60 81       	ld	r22, Z
 5ae:	71 81       	ldd	r23, Z+1	; 0x01
 5b0:	82 81       	ldd	r24, Z+2	; 0x02
 5b2:	93 81       	ldd	r25, Z+3	; 0x03
 5b4:	0c 5f       	subi	r16, 0xFC	; 252
 5b6:	1f 4f       	sbci	r17, 0xFF	; 255
 5b8:	08 c0       	rjmp	.+16     	; 0x5ca <__stack+0xcb>
 5ba:	60 81       	ld	r22, Z
 5bc:	71 81       	ldd	r23, Z+1	; 0x01
 5be:	88 27       	eor	r24, r24
 5c0:	77 fd       	sbrc	r23, 7
 5c2:	80 95       	com	r24
 5c4:	98 2f       	mov	r25, r24
 5c6:	0e 5f       	subi	r16, 0xFE	; 254
 5c8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ca:	2f 76       	andi	r18, 0x6F	; 111
 5cc:	b2 2e       	mov	r11, r18
 5ce:	97 ff       	sbrs	r25, 7
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <__stack+0xe5>
 5d2:	90 95       	com	r25
 5d4:	80 95       	com	r24
 5d6:	70 95       	com	r23
 5d8:	61 95       	neg	r22
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	20 68       	ori	r18, 0x80	; 128
 5e2:	b2 2e       	mov	r11, r18
 5e4:	2a e0       	ldi	r18, 0x0A	; 10
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	a4 01       	movw	r20, r8
 5ea:	0e 94 5a 05 	call	0xab4	; 0xab4 <__ultoa_invert>
 5ee:	a8 2e       	mov	r10, r24
 5f0:	a8 18       	sub	r10, r8
 5f2:	44 c0       	rjmp	.+136    	; 0x67c <__stack+0x17d>
 5f4:	85 37       	cpi	r24, 0x75	; 117
 5f6:	29 f4       	brne	.+10     	; 0x602 <__stack+0x103>
 5f8:	2f 7e       	andi	r18, 0xEF	; 239
 5fa:	b2 2e       	mov	r11, r18
 5fc:	2a e0       	ldi	r18, 0x0A	; 10
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	25 c0       	rjmp	.+74     	; 0x64c <__stack+0x14d>
 602:	f2 2f       	mov	r31, r18
 604:	f9 7f       	andi	r31, 0xF9	; 249
 606:	bf 2e       	mov	r11, r31
 608:	8f 36       	cpi	r24, 0x6F	; 111
 60a:	c1 f0       	breq	.+48     	; 0x63c <__stack+0x13d>
 60c:	18 f4       	brcc	.+6      	; 0x614 <__stack+0x115>
 60e:	88 35       	cpi	r24, 0x58	; 88
 610:	79 f0       	breq	.+30     	; 0x630 <__stack+0x131>
 612:	b4 c0       	rjmp	.+360    	; 0x77c <__stack+0x27d>
 614:	80 37       	cpi	r24, 0x70	; 112
 616:	19 f0       	breq	.+6      	; 0x61e <__stack+0x11f>
 618:	88 37       	cpi	r24, 0x78	; 120
 61a:	21 f0       	breq	.+8      	; 0x624 <__stack+0x125>
 61c:	af c0       	rjmp	.+350    	; 0x77c <__stack+0x27d>
 61e:	2f 2f       	mov	r18, r31
 620:	20 61       	ori	r18, 0x10	; 16
 622:	b2 2e       	mov	r11, r18
 624:	b4 fe       	sbrs	r11, 4
 626:	0d c0       	rjmp	.+26     	; 0x642 <__stack+0x143>
 628:	8b 2d       	mov	r24, r11
 62a:	84 60       	ori	r24, 0x04	; 4
 62c:	b8 2e       	mov	r11, r24
 62e:	09 c0       	rjmp	.+18     	; 0x642 <__stack+0x143>
 630:	24 ff       	sbrs	r18, 4
 632:	0a c0       	rjmp	.+20     	; 0x648 <__stack+0x149>
 634:	9f 2f       	mov	r25, r31
 636:	96 60       	ori	r25, 0x06	; 6
 638:	b9 2e       	mov	r11, r25
 63a:	06 c0       	rjmp	.+12     	; 0x648 <__stack+0x149>
 63c:	28 e0       	ldi	r18, 0x08	; 8
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	05 c0       	rjmp	.+10     	; 0x64c <__stack+0x14d>
 642:	20 e1       	ldi	r18, 0x10	; 16
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <__stack+0x14d>
 648:	20 e1       	ldi	r18, 0x10	; 16
 64a:	32 e0       	ldi	r19, 0x02	; 2
 64c:	f8 01       	movw	r30, r16
 64e:	b7 fe       	sbrs	r11, 7
 650:	07 c0       	rjmp	.+14     	; 0x660 <__stack+0x161>
 652:	60 81       	ld	r22, Z
 654:	71 81       	ldd	r23, Z+1	; 0x01
 656:	82 81       	ldd	r24, Z+2	; 0x02
 658:	93 81       	ldd	r25, Z+3	; 0x03
 65a:	0c 5f       	subi	r16, 0xFC	; 252
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	06 c0       	rjmp	.+12     	; 0x66c <__stack+0x16d>
 660:	60 81       	ld	r22, Z
 662:	71 81       	ldd	r23, Z+1	; 0x01
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 5f       	subi	r16, 0xFE	; 254
 66a:	1f 4f       	sbci	r17, 0xFF	; 255
 66c:	a4 01       	movw	r20, r8
 66e:	0e 94 5a 05 	call	0xab4	; 0xab4 <__ultoa_invert>
 672:	a8 2e       	mov	r10, r24
 674:	a8 18       	sub	r10, r8
 676:	fb 2d       	mov	r31, r11
 678:	ff 77       	andi	r31, 0x7F	; 127
 67a:	bf 2e       	mov	r11, r31
 67c:	b6 fe       	sbrs	r11, 6
 67e:	0b c0       	rjmp	.+22     	; 0x696 <__stack+0x197>
 680:	2b 2d       	mov	r18, r11
 682:	2e 7f       	andi	r18, 0xFE	; 254
 684:	a5 14       	cp	r10, r5
 686:	50 f4       	brcc	.+20     	; 0x69c <__stack+0x19d>
 688:	b4 fe       	sbrs	r11, 4
 68a:	0a c0       	rjmp	.+20     	; 0x6a0 <__stack+0x1a1>
 68c:	b2 fc       	sbrc	r11, 2
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <__stack+0x1a1>
 690:	2b 2d       	mov	r18, r11
 692:	2e 7e       	andi	r18, 0xEE	; 238
 694:	05 c0       	rjmp	.+10     	; 0x6a0 <__stack+0x1a1>
 696:	7a 2c       	mov	r7, r10
 698:	2b 2d       	mov	r18, r11
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <__stack+0x1a3>
 69c:	7a 2c       	mov	r7, r10
 69e:	01 c0       	rjmp	.+2      	; 0x6a2 <__stack+0x1a3>
 6a0:	75 2c       	mov	r7, r5
 6a2:	24 ff       	sbrs	r18, 4
 6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <__stack+0x1c1>
 6a6:	fe 01       	movw	r30, r28
 6a8:	ea 0d       	add	r30, r10
 6aa:	f1 1d       	adc	r31, r1
 6ac:	80 81       	ld	r24, Z
 6ae:	80 33       	cpi	r24, 0x30	; 48
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__stack+0x1b7>
 6b2:	29 7e       	andi	r18, 0xE9	; 233
 6b4:	09 c0       	rjmp	.+18     	; 0x6c8 <__stack+0x1c9>
 6b6:	22 ff       	sbrs	r18, 2
 6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <__stack+0x1c7>
 6ba:	73 94       	inc	r7
 6bc:	73 94       	inc	r7
 6be:	04 c0       	rjmp	.+8      	; 0x6c8 <__stack+0x1c9>
 6c0:	82 2f       	mov	r24, r18
 6c2:	86 78       	andi	r24, 0x86	; 134
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <__stack+0x1c9>
 6c6:	73 94       	inc	r7
 6c8:	23 fd       	sbrc	r18, 3
 6ca:	13 c0       	rjmp	.+38     	; 0x6f2 <__stack+0x1f3>
 6cc:	20 ff       	sbrs	r18, 0
 6ce:	06 c0       	rjmp	.+12     	; 0x6dc <__stack+0x1dd>
 6d0:	5a 2c       	mov	r5, r10
 6d2:	73 14       	cp	r7, r3
 6d4:	18 f4       	brcc	.+6      	; 0x6dc <__stack+0x1dd>
 6d6:	53 0c       	add	r5, r3
 6d8:	57 18       	sub	r5, r7
 6da:	73 2c       	mov	r7, r3
 6dc:	73 14       	cp	r7, r3
 6de:	68 f4       	brcc	.+26     	; 0x6fa <__stack+0x1fb>
 6e0:	b7 01       	movw	r22, r14
 6e2:	80 e2       	ldi	r24, 0x20	; 32
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	2c 87       	std	Y+12, r18	; 0x0c
 6e8:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 6ec:	73 94       	inc	r7
 6ee:	2c 85       	ldd	r18, Y+12	; 0x0c
 6f0:	f5 cf       	rjmp	.-22     	; 0x6dc <__stack+0x1dd>
 6f2:	73 14       	cp	r7, r3
 6f4:	10 f4       	brcc	.+4      	; 0x6fa <__stack+0x1fb>
 6f6:	37 18       	sub	r3, r7
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <__stack+0x1fd>
 6fa:	31 2c       	mov	r3, r1
 6fc:	24 ff       	sbrs	r18, 4
 6fe:	12 c0       	rjmp	.+36     	; 0x724 <__stack+0x225>
 700:	b7 01       	movw	r22, r14
 702:	80 e3       	ldi	r24, 0x30	; 48
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	2c 87       	std	Y+12, r18	; 0x0c
 708:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 70c:	2c 85       	ldd	r18, Y+12	; 0x0c
 70e:	22 ff       	sbrs	r18, 2
 710:	17 c0       	rjmp	.+46     	; 0x740 <__stack+0x241>
 712:	21 ff       	sbrs	r18, 1
 714:	03 c0       	rjmp	.+6      	; 0x71c <__stack+0x21d>
 716:	88 e5       	ldi	r24, 0x58	; 88
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <__stack+0x221>
 71c:	88 e7       	ldi	r24, 0x78	; 120
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	b7 01       	movw	r22, r14
 722:	0c c0       	rjmp	.+24     	; 0x73c <__stack+0x23d>
 724:	82 2f       	mov	r24, r18
 726:	86 78       	andi	r24, 0x86	; 134
 728:	59 f0       	breq	.+22     	; 0x740 <__stack+0x241>
 72a:	21 fd       	sbrc	r18, 1
 72c:	02 c0       	rjmp	.+4      	; 0x732 <__stack+0x233>
 72e:	80 e2       	ldi	r24, 0x20	; 32
 730:	01 c0       	rjmp	.+2      	; 0x734 <__stack+0x235>
 732:	8b e2       	ldi	r24, 0x2B	; 43
 734:	27 fd       	sbrc	r18, 7
 736:	8d e2       	ldi	r24, 0x2D	; 45
 738:	b7 01       	movw	r22, r14
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 740:	a5 14       	cp	r10, r5
 742:	38 f4       	brcc	.+14     	; 0x752 <__stack+0x253>
 744:	b7 01       	movw	r22, r14
 746:	80 e3       	ldi	r24, 0x30	; 48
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 74e:	5a 94       	dec	r5
 750:	f7 cf       	rjmp	.-18     	; 0x740 <__stack+0x241>
 752:	aa 94       	dec	r10
 754:	f4 01       	movw	r30, r8
 756:	ea 0d       	add	r30, r10
 758:	f1 1d       	adc	r31, r1
 75a:	80 81       	ld	r24, Z
 75c:	b7 01       	movw	r22, r14
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 764:	a1 10       	cpse	r10, r1
 766:	f5 cf       	rjmp	.-22     	; 0x752 <__stack+0x253>
 768:	33 20       	and	r3, r3
 76a:	09 f4       	brne	.+2      	; 0x76e <__stack+0x26f>
 76c:	51 ce       	rjmp	.-862    	; 0x410 <vfprintf+0x24>
 76e:	b7 01       	movw	r22, r14
 770:	80 e2       	ldi	r24, 0x20	; 32
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 28 05 	call	0xa50	; 0xa50 <fputc>
 778:	3a 94       	dec	r3
 77a:	f6 cf       	rjmp	.-20     	; 0x768 <__stack+0x269>
 77c:	f7 01       	movw	r30, r14
 77e:	86 81       	ldd	r24, Z+6	; 0x06
 780:	97 81       	ldd	r25, Z+7	; 0x07
 782:	02 c0       	rjmp	.+4      	; 0x788 <__stack+0x289>
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	9f ef       	ldi	r25, 0xFF	; 255
 788:	2c 96       	adiw	r28, 0x0c	; 12
 78a:	e2 e1       	ldi	r30, 0x12	; 18
 78c:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__epilogue_restores__>

00000790 <calloc>:
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	86 9f       	mul	r24, r22
 79a:	80 01       	movw	r16, r0
 79c:	87 9f       	mul	r24, r23
 79e:	10 0d       	add	r17, r0
 7a0:	96 9f       	mul	r25, r22
 7a2:	10 0d       	add	r17, r0
 7a4:	11 24       	eor	r1, r1
 7a6:	c8 01       	movw	r24, r16
 7a8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <malloc>
 7ac:	ec 01       	movw	r28, r24
 7ae:	00 97       	sbiw	r24, 0x00	; 0
 7b0:	29 f0       	breq	.+10     	; 0x7bc <calloc+0x2c>
 7b2:	a8 01       	movw	r20, r16
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	0e 94 16 05 	call	0xa2c	; 0xa2c <memset>
 7bc:	ce 01       	movw	r24, r28
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	08 95       	ret

000007c8 <malloc>:
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	82 30       	cpi	r24, 0x02	; 2
 7ce:	91 05       	cpc	r25, r1
 7d0:	10 f4       	brcc	.+4      	; 0x7d6 <malloc+0xe>
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	e0 91 16 01 	lds	r30, 0x0116
 7da:	f0 91 17 01 	lds	r31, 0x0117
 7de:	20 e0       	ldi	r18, 0x00	; 0
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	a0 e0       	ldi	r26, 0x00	; 0
 7e4:	b0 e0       	ldi	r27, 0x00	; 0
 7e6:	30 97       	sbiw	r30, 0x00	; 0
 7e8:	39 f1       	breq	.+78     	; 0x838 <malloc+0x70>
 7ea:	40 81       	ld	r20, Z
 7ec:	51 81       	ldd	r21, Z+1	; 0x01
 7ee:	48 17       	cp	r20, r24
 7f0:	59 07       	cpc	r21, r25
 7f2:	b8 f0       	brcs	.+46     	; 0x822 <malloc+0x5a>
 7f4:	48 17       	cp	r20, r24
 7f6:	59 07       	cpc	r21, r25
 7f8:	71 f4       	brne	.+28     	; 0x816 <malloc+0x4e>
 7fa:	82 81       	ldd	r24, Z+2	; 0x02
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
 7fe:	10 97       	sbiw	r26, 0x00	; 0
 800:	29 f0       	breq	.+10     	; 0x80c <malloc+0x44>
 802:	13 96       	adiw	r26, 0x03	; 3
 804:	9c 93       	st	X, r25
 806:	8e 93       	st	-X, r24
 808:	12 97       	sbiw	r26, 0x02	; 2
 80a:	2c c0       	rjmp	.+88     	; 0x864 <malloc+0x9c>
 80c:	90 93 17 01 	sts	0x0117, r25
 810:	80 93 16 01 	sts	0x0116, r24
 814:	27 c0       	rjmp	.+78     	; 0x864 <malloc+0x9c>
 816:	21 15       	cp	r18, r1
 818:	31 05       	cpc	r19, r1
 81a:	31 f0       	breq	.+12     	; 0x828 <malloc+0x60>
 81c:	42 17       	cp	r20, r18
 81e:	53 07       	cpc	r21, r19
 820:	18 f0       	brcs	.+6      	; 0x828 <malloc+0x60>
 822:	a9 01       	movw	r20, r18
 824:	db 01       	movw	r26, r22
 826:	01 c0       	rjmp	.+2      	; 0x82a <malloc+0x62>
 828:	ef 01       	movw	r28, r30
 82a:	9a 01       	movw	r18, r20
 82c:	bd 01       	movw	r22, r26
 82e:	df 01       	movw	r26, r30
 830:	02 80       	ldd	r0, Z+2	; 0x02
 832:	f3 81       	ldd	r31, Z+3	; 0x03
 834:	e0 2d       	mov	r30, r0
 836:	d7 cf       	rjmp	.-82     	; 0x7e6 <malloc+0x1e>
 838:	21 15       	cp	r18, r1
 83a:	31 05       	cpc	r19, r1
 83c:	f9 f0       	breq	.+62     	; 0x87c <malloc+0xb4>
 83e:	28 1b       	sub	r18, r24
 840:	39 0b       	sbc	r19, r25
 842:	24 30       	cpi	r18, 0x04	; 4
 844:	31 05       	cpc	r19, r1
 846:	80 f4       	brcc	.+32     	; 0x868 <malloc+0xa0>
 848:	8a 81       	ldd	r24, Y+2	; 0x02
 84a:	9b 81       	ldd	r25, Y+3	; 0x03
 84c:	61 15       	cp	r22, r1
 84e:	71 05       	cpc	r23, r1
 850:	21 f0       	breq	.+8      	; 0x85a <malloc+0x92>
 852:	fb 01       	movw	r30, r22
 854:	93 83       	std	Z+3, r25	; 0x03
 856:	82 83       	std	Z+2, r24	; 0x02
 858:	04 c0       	rjmp	.+8      	; 0x862 <malloc+0x9a>
 85a:	90 93 17 01 	sts	0x0117, r25
 85e:	80 93 16 01 	sts	0x0116, r24
 862:	fe 01       	movw	r30, r28
 864:	32 96       	adiw	r30, 0x02	; 2
 866:	44 c0       	rjmp	.+136    	; 0x8f0 <malloc+0x128>
 868:	fe 01       	movw	r30, r28
 86a:	e2 0f       	add	r30, r18
 86c:	f3 1f       	adc	r31, r19
 86e:	81 93       	st	Z+, r24
 870:	91 93       	st	Z+, r25
 872:	22 50       	subi	r18, 0x02	; 2
 874:	31 09       	sbc	r19, r1
 876:	39 83       	std	Y+1, r19	; 0x01
 878:	28 83       	st	Y, r18
 87a:	3a c0       	rjmp	.+116    	; 0x8f0 <malloc+0x128>
 87c:	20 91 14 01 	lds	r18, 0x0114
 880:	30 91 15 01 	lds	r19, 0x0115
 884:	23 2b       	or	r18, r19
 886:	41 f4       	brne	.+16     	; 0x898 <malloc+0xd0>
 888:	20 91 02 01 	lds	r18, 0x0102
 88c:	30 91 03 01 	lds	r19, 0x0103
 890:	30 93 15 01 	sts	0x0115, r19
 894:	20 93 14 01 	sts	0x0114, r18
 898:	20 91 00 01 	lds	r18, 0x0100
 89c:	30 91 01 01 	lds	r19, 0x0101
 8a0:	21 15       	cp	r18, r1
 8a2:	31 05       	cpc	r19, r1
 8a4:	41 f4       	brne	.+16     	; 0x8b6 <malloc+0xee>
 8a6:	2d b7       	in	r18, 0x3d	; 61
 8a8:	3e b7       	in	r19, 0x3e	; 62
 8aa:	40 91 04 01 	lds	r20, 0x0104
 8ae:	50 91 05 01 	lds	r21, 0x0105
 8b2:	24 1b       	sub	r18, r20
 8b4:	35 0b       	sbc	r19, r21
 8b6:	e0 91 14 01 	lds	r30, 0x0114
 8ba:	f0 91 15 01 	lds	r31, 0x0115
 8be:	e2 17       	cp	r30, r18
 8c0:	f3 07       	cpc	r31, r19
 8c2:	a0 f4       	brcc	.+40     	; 0x8ec <malloc+0x124>
 8c4:	2e 1b       	sub	r18, r30
 8c6:	3f 0b       	sbc	r19, r31
 8c8:	28 17       	cp	r18, r24
 8ca:	39 07       	cpc	r19, r25
 8cc:	78 f0       	brcs	.+30     	; 0x8ec <malloc+0x124>
 8ce:	ac 01       	movw	r20, r24
 8d0:	4e 5f       	subi	r20, 0xFE	; 254
 8d2:	5f 4f       	sbci	r21, 0xFF	; 255
 8d4:	24 17       	cp	r18, r20
 8d6:	35 07       	cpc	r19, r21
 8d8:	48 f0       	brcs	.+18     	; 0x8ec <malloc+0x124>
 8da:	4e 0f       	add	r20, r30
 8dc:	5f 1f       	adc	r21, r31
 8de:	50 93 15 01 	sts	0x0115, r21
 8e2:	40 93 14 01 	sts	0x0114, r20
 8e6:	81 93       	st	Z+, r24
 8e8:	91 93       	st	Z+, r25
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <malloc+0x128>
 8ec:	e0 e0       	ldi	r30, 0x00	; 0
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	cf 01       	movw	r24, r30
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	08 95       	ret

000008f8 <free>:
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	09 f4       	brne	.+2      	; 0x902 <free+0xa>
 900:	87 c0       	rjmp	.+270    	; 0xa10 <free+0x118>
 902:	fc 01       	movw	r30, r24
 904:	32 97       	sbiw	r30, 0x02	; 2
 906:	13 82       	std	Z+3, r1	; 0x03
 908:	12 82       	std	Z+2, r1	; 0x02
 90a:	c0 91 16 01 	lds	r28, 0x0116
 90e:	d0 91 17 01 	lds	r29, 0x0117
 912:	20 97       	sbiw	r28, 0x00	; 0
 914:	81 f4       	brne	.+32     	; 0x936 <free+0x3e>
 916:	20 81       	ld	r18, Z
 918:	31 81       	ldd	r19, Z+1	; 0x01
 91a:	28 0f       	add	r18, r24
 91c:	39 1f       	adc	r19, r25
 91e:	80 91 14 01 	lds	r24, 0x0114
 922:	90 91 15 01 	lds	r25, 0x0115
 926:	82 17       	cp	r24, r18
 928:	93 07       	cpc	r25, r19
 92a:	79 f5       	brne	.+94     	; 0x98a <free+0x92>
 92c:	f0 93 15 01 	sts	0x0115, r31
 930:	e0 93 14 01 	sts	0x0114, r30
 934:	6d c0       	rjmp	.+218    	; 0xa10 <free+0x118>
 936:	de 01       	movw	r26, r28
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	ae 17       	cp	r26, r30
 93e:	bf 07       	cpc	r27, r31
 940:	50 f4       	brcc	.+20     	; 0x956 <free+0x5e>
 942:	12 96       	adiw	r26, 0x02	; 2
 944:	4d 91       	ld	r20, X+
 946:	5c 91       	ld	r21, X
 948:	13 97       	sbiw	r26, 0x03	; 3
 94a:	9d 01       	movw	r18, r26
 94c:	41 15       	cp	r20, r1
 94e:	51 05       	cpc	r21, r1
 950:	09 f1       	breq	.+66     	; 0x994 <free+0x9c>
 952:	da 01       	movw	r26, r20
 954:	f3 cf       	rjmp	.-26     	; 0x93c <free+0x44>
 956:	b3 83       	std	Z+3, r27	; 0x03
 958:	a2 83       	std	Z+2, r26	; 0x02
 95a:	40 81       	ld	r20, Z
 95c:	51 81       	ldd	r21, Z+1	; 0x01
 95e:	84 0f       	add	r24, r20
 960:	95 1f       	adc	r25, r21
 962:	8a 17       	cp	r24, r26
 964:	9b 07       	cpc	r25, r27
 966:	71 f4       	brne	.+28     	; 0x984 <free+0x8c>
 968:	8d 91       	ld	r24, X+
 96a:	9c 91       	ld	r25, X
 96c:	11 97       	sbiw	r26, 0x01	; 1
 96e:	84 0f       	add	r24, r20
 970:	95 1f       	adc	r25, r21
 972:	02 96       	adiw	r24, 0x02	; 2
 974:	91 83       	std	Z+1, r25	; 0x01
 976:	80 83       	st	Z, r24
 978:	12 96       	adiw	r26, 0x02	; 2
 97a:	8d 91       	ld	r24, X+
 97c:	9c 91       	ld	r25, X
 97e:	13 97       	sbiw	r26, 0x03	; 3
 980:	93 83       	std	Z+3, r25	; 0x03
 982:	82 83       	std	Z+2, r24	; 0x02
 984:	21 15       	cp	r18, r1
 986:	31 05       	cpc	r19, r1
 988:	29 f4       	brne	.+10     	; 0x994 <free+0x9c>
 98a:	f0 93 17 01 	sts	0x0117, r31
 98e:	e0 93 16 01 	sts	0x0116, r30
 992:	3e c0       	rjmp	.+124    	; 0xa10 <free+0x118>
 994:	d9 01       	movw	r26, r18
 996:	13 96       	adiw	r26, 0x03	; 3
 998:	fc 93       	st	X, r31
 99a:	ee 93       	st	-X, r30
 99c:	12 97       	sbiw	r26, 0x02	; 2
 99e:	4d 91       	ld	r20, X+
 9a0:	5d 91       	ld	r21, X+
 9a2:	a4 0f       	add	r26, r20
 9a4:	b5 1f       	adc	r27, r21
 9a6:	ea 17       	cp	r30, r26
 9a8:	fb 07       	cpc	r31, r27
 9aa:	79 f4       	brne	.+30     	; 0x9ca <free+0xd2>
 9ac:	80 81       	ld	r24, Z
 9ae:	91 81       	ldd	r25, Z+1	; 0x01
 9b0:	84 0f       	add	r24, r20
 9b2:	95 1f       	adc	r25, r21
 9b4:	02 96       	adiw	r24, 0x02	; 2
 9b6:	d9 01       	movw	r26, r18
 9b8:	11 96       	adiw	r26, 0x01	; 1
 9ba:	9c 93       	st	X, r25
 9bc:	8e 93       	st	-X, r24
 9be:	82 81       	ldd	r24, Z+2	; 0x02
 9c0:	93 81       	ldd	r25, Z+3	; 0x03
 9c2:	13 96       	adiw	r26, 0x03	; 3
 9c4:	9c 93       	st	X, r25
 9c6:	8e 93       	st	-X, r24
 9c8:	12 97       	sbiw	r26, 0x02	; 2
 9ca:	e0 e0       	ldi	r30, 0x00	; 0
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	8a 81       	ldd	r24, Y+2	; 0x02
 9d0:	9b 81       	ldd	r25, Y+3	; 0x03
 9d2:	00 97       	sbiw	r24, 0x00	; 0
 9d4:	19 f0       	breq	.+6      	; 0x9dc <free+0xe4>
 9d6:	fe 01       	movw	r30, r28
 9d8:	ec 01       	movw	r28, r24
 9da:	f9 cf       	rjmp	.-14     	; 0x9ce <free+0xd6>
 9dc:	ce 01       	movw	r24, r28
 9de:	02 96       	adiw	r24, 0x02	; 2
 9e0:	28 81       	ld	r18, Y
 9e2:	39 81       	ldd	r19, Y+1	; 0x01
 9e4:	82 0f       	add	r24, r18
 9e6:	93 1f       	adc	r25, r19
 9e8:	20 91 14 01 	lds	r18, 0x0114
 9ec:	30 91 15 01 	lds	r19, 0x0115
 9f0:	28 17       	cp	r18, r24
 9f2:	39 07       	cpc	r19, r25
 9f4:	69 f4       	brne	.+26     	; 0xa10 <free+0x118>
 9f6:	30 97       	sbiw	r30, 0x00	; 0
 9f8:	29 f4       	brne	.+10     	; 0xa04 <free+0x10c>
 9fa:	10 92 17 01 	sts	0x0117, r1
 9fe:	10 92 16 01 	sts	0x0116, r1
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <free+0x110>
 a04:	13 82       	std	Z+3, r1	; 0x03
 a06:	12 82       	std	Z+2, r1	; 0x02
 a08:	d0 93 15 01 	sts	0x0115, r29
 a0c:	c0 93 14 01 	sts	0x0114, r28
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	08 95       	ret

00000a16 <strnlen_P>:
 a16:	fc 01       	movw	r30, r24
 a18:	05 90       	lpm	r0, Z+
 a1a:	61 50       	subi	r22, 0x01	; 1
 a1c:	70 40       	sbci	r23, 0x00	; 0
 a1e:	01 10       	cpse	r0, r1
 a20:	d8 f7       	brcc	.-10     	; 0xa18 <strnlen_P+0x2>
 a22:	80 95       	com	r24
 a24:	90 95       	com	r25
 a26:	8e 0f       	add	r24, r30
 a28:	9f 1f       	adc	r25, r31
 a2a:	08 95       	ret

00000a2c <memset>:
 a2c:	dc 01       	movw	r26, r24
 a2e:	01 c0       	rjmp	.+2      	; 0xa32 <memset+0x6>
 a30:	6d 93       	st	X+, r22
 a32:	41 50       	subi	r20, 0x01	; 1
 a34:	50 40       	sbci	r21, 0x00	; 0
 a36:	e0 f7       	brcc	.-8      	; 0xa30 <memset+0x4>
 a38:	08 95       	ret

00000a3a <strnlen>:
 a3a:	fc 01       	movw	r30, r24
 a3c:	61 50       	subi	r22, 0x01	; 1
 a3e:	70 40       	sbci	r23, 0x00	; 0
 a40:	01 90       	ld	r0, Z+
 a42:	01 10       	cpse	r0, r1
 a44:	d8 f7       	brcc	.-10     	; 0xa3c <strnlen+0x2>
 a46:	80 95       	com	r24
 a48:	90 95       	com	r25
 a4a:	8e 0f       	add	r24, r30
 a4c:	9f 1f       	adc	r25, r31
 a4e:	08 95       	ret

00000a50 <fputc>:
 a50:	0f 93       	push	r16
 a52:	1f 93       	push	r17
 a54:	cf 93       	push	r28
 a56:	df 93       	push	r29
 a58:	18 2f       	mov	r17, r24
 a5a:	09 2f       	mov	r16, r25
 a5c:	eb 01       	movw	r28, r22
 a5e:	8b 81       	ldd	r24, Y+3	; 0x03
 a60:	81 fd       	sbrc	r24, 1
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <fputc+0x1a>
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	20 c0       	rjmp	.+64     	; 0xaaa <fputc+0x5a>
 a6a:	82 ff       	sbrs	r24, 2
 a6c:	10 c0       	rjmp	.+32     	; 0xa8e <fputc+0x3e>
 a6e:	4e 81       	ldd	r20, Y+6	; 0x06
 a70:	5f 81       	ldd	r21, Y+7	; 0x07
 a72:	2c 81       	ldd	r18, Y+4	; 0x04
 a74:	3d 81       	ldd	r19, Y+5	; 0x05
 a76:	42 17       	cp	r20, r18
 a78:	53 07       	cpc	r21, r19
 a7a:	7c f4       	brge	.+30     	; 0xa9a <fputc+0x4a>
 a7c:	e8 81       	ld	r30, Y
 a7e:	f9 81       	ldd	r31, Y+1	; 0x01
 a80:	9f 01       	movw	r18, r30
 a82:	2f 5f       	subi	r18, 0xFF	; 255
 a84:	3f 4f       	sbci	r19, 0xFF	; 255
 a86:	39 83       	std	Y+1, r19	; 0x01
 a88:	28 83       	st	Y, r18
 a8a:	10 83       	st	Z, r17
 a8c:	06 c0       	rjmp	.+12     	; 0xa9a <fputc+0x4a>
 a8e:	e8 85       	ldd	r30, Y+8	; 0x08
 a90:	f9 85       	ldd	r31, Y+9	; 0x09
 a92:	81 2f       	mov	r24, r17
 a94:	09 95       	icall
 a96:	89 2b       	or	r24, r25
 a98:	29 f7       	brne	.-54     	; 0xa64 <fputc+0x14>
 a9a:	2e 81       	ldd	r18, Y+6	; 0x06
 a9c:	3f 81       	ldd	r19, Y+7	; 0x07
 a9e:	2f 5f       	subi	r18, 0xFF	; 255
 aa0:	3f 4f       	sbci	r19, 0xFF	; 255
 aa2:	3f 83       	std	Y+7, r19	; 0x07
 aa4:	2e 83       	std	Y+6, r18	; 0x06
 aa6:	81 2f       	mov	r24, r17
 aa8:	90 2f       	mov	r25, r16
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	1f 91       	pop	r17
 ab0:	0f 91       	pop	r16
 ab2:	08 95       	ret

00000ab4 <__ultoa_invert>:
 ab4:	fa 01       	movw	r30, r20
 ab6:	aa 27       	eor	r26, r26
 ab8:	28 30       	cpi	r18, 0x08	; 8
 aba:	51 f1       	breq	.+84     	; 0xb10 <__ultoa_invert+0x5c>
 abc:	20 31       	cpi	r18, 0x10	; 16
 abe:	81 f1       	breq	.+96     	; 0xb20 <__ultoa_invert+0x6c>
 ac0:	e8 94       	clt
 ac2:	6f 93       	push	r22
 ac4:	6e 7f       	andi	r22, 0xFE	; 254
 ac6:	6e 5f       	subi	r22, 0xFE	; 254
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	8f 4f       	sbci	r24, 0xFF	; 255
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	af 4f       	sbci	r26, 0xFF	; 255
 ad0:	b1 e0       	ldi	r27, 0x01	; 1
 ad2:	3e d0       	rcall	.+124    	; 0xb50 <__ultoa_invert+0x9c>
 ad4:	b4 e0       	ldi	r27, 0x04	; 4
 ad6:	3c d0       	rcall	.+120    	; 0xb50 <__ultoa_invert+0x9c>
 ad8:	67 0f       	add	r22, r23
 ada:	78 1f       	adc	r23, r24
 adc:	89 1f       	adc	r24, r25
 ade:	9a 1f       	adc	r25, r26
 ae0:	a1 1d       	adc	r26, r1
 ae2:	68 0f       	add	r22, r24
 ae4:	79 1f       	adc	r23, r25
 ae6:	8a 1f       	adc	r24, r26
 ae8:	91 1d       	adc	r25, r1
 aea:	a1 1d       	adc	r26, r1
 aec:	6a 0f       	add	r22, r26
 aee:	71 1d       	adc	r23, r1
 af0:	81 1d       	adc	r24, r1
 af2:	91 1d       	adc	r25, r1
 af4:	a1 1d       	adc	r26, r1
 af6:	20 d0       	rcall	.+64     	; 0xb38 <__ultoa_invert+0x84>
 af8:	09 f4       	brne	.+2      	; 0xafc <__ultoa_invert+0x48>
 afa:	68 94       	set
 afc:	3f 91       	pop	r19
 afe:	2a e0       	ldi	r18, 0x0A	; 10
 b00:	26 9f       	mul	r18, r22
 b02:	11 24       	eor	r1, r1
 b04:	30 19       	sub	r19, r0
 b06:	30 5d       	subi	r19, 0xD0	; 208
 b08:	31 93       	st	Z+, r19
 b0a:	de f6       	brtc	.-74     	; 0xac2 <__ultoa_invert+0xe>
 b0c:	cf 01       	movw	r24, r30
 b0e:	08 95       	ret
 b10:	46 2f       	mov	r20, r22
 b12:	47 70       	andi	r20, 0x07	; 7
 b14:	40 5d       	subi	r20, 0xD0	; 208
 b16:	41 93       	st	Z+, r20
 b18:	b3 e0       	ldi	r27, 0x03	; 3
 b1a:	0f d0       	rcall	.+30     	; 0xb3a <__ultoa_invert+0x86>
 b1c:	c9 f7       	brne	.-14     	; 0xb10 <__ultoa_invert+0x5c>
 b1e:	f6 cf       	rjmp	.-20     	; 0xb0c <__ultoa_invert+0x58>
 b20:	46 2f       	mov	r20, r22
 b22:	4f 70       	andi	r20, 0x0F	; 15
 b24:	40 5d       	subi	r20, 0xD0	; 208
 b26:	4a 33       	cpi	r20, 0x3A	; 58
 b28:	18 f0       	brcs	.+6      	; 0xb30 <__ultoa_invert+0x7c>
 b2a:	49 5d       	subi	r20, 0xD9	; 217
 b2c:	31 fd       	sbrc	r19, 1
 b2e:	40 52       	subi	r20, 0x20	; 32
 b30:	41 93       	st	Z+, r20
 b32:	02 d0       	rcall	.+4      	; 0xb38 <__ultoa_invert+0x84>
 b34:	a9 f7       	brne	.-22     	; 0xb20 <__ultoa_invert+0x6c>
 b36:	ea cf       	rjmp	.-44     	; 0xb0c <__ultoa_invert+0x58>
 b38:	b4 e0       	ldi	r27, 0x04	; 4
 b3a:	a6 95       	lsr	r26
 b3c:	97 95       	ror	r25
 b3e:	87 95       	ror	r24
 b40:	77 95       	ror	r23
 b42:	67 95       	ror	r22
 b44:	ba 95       	dec	r27
 b46:	c9 f7       	brne	.-14     	; 0xb3a <__ultoa_invert+0x86>
 b48:	00 97       	sbiw	r24, 0x00	; 0
 b4a:	61 05       	cpc	r22, r1
 b4c:	71 05       	cpc	r23, r1
 b4e:	08 95       	ret
 b50:	9b 01       	movw	r18, r22
 b52:	ac 01       	movw	r20, r24
 b54:	0a 2e       	mov	r0, r26
 b56:	06 94       	lsr	r0
 b58:	57 95       	ror	r21
 b5a:	47 95       	ror	r20
 b5c:	37 95       	ror	r19
 b5e:	27 95       	ror	r18
 b60:	ba 95       	dec	r27
 b62:	c9 f7       	brne	.-14     	; 0xb56 <__ultoa_invert+0xa2>
 b64:	62 0f       	add	r22, r18
 b66:	73 1f       	adc	r23, r19
 b68:	84 1f       	adc	r24, r20
 b6a:	95 1f       	adc	r25, r21
 b6c:	a0 1d       	adc	r26, r0
 b6e:	08 95       	ret

00000b70 <__prologue_saves__>:
 b70:	2f 92       	push	r2
 b72:	3f 92       	push	r3
 b74:	4f 92       	push	r4
 b76:	5f 92       	push	r5
 b78:	6f 92       	push	r6
 b7a:	7f 92       	push	r7
 b7c:	8f 92       	push	r8
 b7e:	9f 92       	push	r9
 b80:	af 92       	push	r10
 b82:	bf 92       	push	r11
 b84:	cf 92       	push	r12
 b86:	df 92       	push	r13
 b88:	ef 92       	push	r14
 b8a:	ff 92       	push	r15
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	cf 93       	push	r28
 b92:	df 93       	push	r29
 b94:	cd b7       	in	r28, 0x3d	; 61
 b96:	de b7       	in	r29, 0x3e	; 62
 b98:	ca 1b       	sub	r28, r26
 b9a:	db 0b       	sbc	r29, r27
 b9c:	0f b6       	in	r0, 0x3f	; 63
 b9e:	f8 94       	cli
 ba0:	de bf       	out	0x3e, r29	; 62
 ba2:	0f be       	out	0x3f, r0	; 63
 ba4:	cd bf       	out	0x3d, r28	; 61
 ba6:	09 94       	ijmp

00000ba8 <__epilogue_restores__>:
 ba8:	2a 88       	ldd	r2, Y+18	; 0x12
 baa:	39 88       	ldd	r3, Y+17	; 0x11
 bac:	48 88       	ldd	r4, Y+16	; 0x10
 bae:	5f 84       	ldd	r5, Y+15	; 0x0f
 bb0:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb2:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb4:	8c 84       	ldd	r8, Y+12	; 0x0c
 bb6:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb8:	aa 84       	ldd	r10, Y+10	; 0x0a
 bba:	b9 84       	ldd	r11, Y+9	; 0x09
 bbc:	c8 84       	ldd	r12, Y+8	; 0x08
 bbe:	df 80       	ldd	r13, Y+7	; 0x07
 bc0:	ee 80       	ldd	r14, Y+6	; 0x06
 bc2:	fd 80       	ldd	r15, Y+5	; 0x05
 bc4:	0c 81       	ldd	r16, Y+4	; 0x04
 bc6:	1b 81       	ldd	r17, Y+3	; 0x03
 bc8:	aa 81       	ldd	r26, Y+2	; 0x02
 bca:	b9 81       	ldd	r27, Y+1	; 0x01
 bcc:	ce 0f       	add	r28, r30
 bce:	d1 1d       	adc	r29, r1
 bd0:	0f b6       	in	r0, 0x3f	; 63
 bd2:	f8 94       	cli
 bd4:	de bf       	out	0x3e, r29	; 62
 bd6:	0f be       	out	0x3f, r0	; 63
 bd8:	cd bf       	out	0x3d, r28	; 61
 bda:	ed 01       	movw	r28, r26
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
