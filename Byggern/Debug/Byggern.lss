
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000007ba  0000084e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800150  00800150  0000089e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000020c3  00000000  00000000  00000abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c74  00000000  00000000  00002b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c2f  00000000  00000000  000037f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000498  00000000  00000000  00004424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fa  00000000  00000000  000048bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001164  00000000  00000000  00004db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00005f1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea eb       	ldi	r30, 0xBA	; 186
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 35       	cpi	r26, 0x50	; 80
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e5       	ldi	r26, 0x50	; 80
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 35       	cpi	r26, 0x5A	; 90
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:



void ADC_init()
{	
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <main>:
#include "MCP2515.h"
#include "CAN.h"


int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	64 97       	sbiw	r28, 0x14	; 20
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
	DDRD  = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	
	UartInit();
  d4:	0e 94 0b 02 	call	0x416	; 0x416 <UartInit>
	SRAM_init();
  d8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SRAM_init>
	ADC_init();
  dc:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	init_OLED();
  e0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <init_OLED>
	CAN_init();
  e4:	0e 94 a4 00 	call	0x148	; 0x148 <CAN_init>

	calibrate();
	OLED_Reset();*/
	
	// Enable Global Interrupts
	sei();
  e8:	78 94       	sei
	// CAN test

			
			CAN_message myMessage;				//test message
			int ident = 29;
			myMessage.id = ident;
  ea:	8d e1       	ldi	r24, 0x1D	; 29
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
			myMessage.length = 8;
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9c 83       	std	Y+4, r25	; 0x04
  f8:	8b 83       	std	Y+3, r24	; 0x03
			int n = 3;
			for (int i = 0; i < 8; i++) 
			{
				myMessage.data[i] = n;
  fa:	23 e0       	ldi	r18, 0x03	; 3
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	3e 83       	std	Y+6, r19	; 0x06
 100:	2d 83       	std	Y+5, r18	; 0x05
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	38 87       	std	Y+8, r19	; 0x08
 108:	2f 83       	std	Y+7, r18	; 0x07
 10a:	25 e0       	ldi	r18, 0x05	; 5
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	3a 87       	std	Y+10, r19	; 0x0a
 110:	29 87       	std	Y+9, r18	; 0x09
 112:	26 e0       	ldi	r18, 0x06	; 6
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	3c 87       	std	Y+12, r19	; 0x0c
 118:	2b 87       	std	Y+11, r18	; 0x0b
 11a:	27 e0       	ldi	r18, 0x07	; 7
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	3e 87       	std	Y+14, r19	; 0x0e
 120:	2d 87       	std	Y+13, r18	; 0x0d
 122:	98 8b       	std	Y+16, r25	; 0x10
 124:	8f 87       	std	Y+15, r24	; 0x0f
 126:	89 e0       	ldi	r24, 0x09	; 9
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	9a 8b       	std	Y+18, r25	; 0x12
 12c:	89 8b       	std	Y+17, r24	; 0x11
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9c 8b       	std	Y+20, r25	; 0x14
 134:	8b 8b       	std	Y+19, r24	; 0x13
				n++;
			}
	printf("Start på program\n");
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <puts>
		OLED_menu();
					 chip de-select*/



			CAN_send(&myMessage);
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 bb 00 	call	0x176	; 0x176 <CAN_send>
 146:	fb cf       	rjmp	.-10     	; 0x13e <main+0x82>

00000148 <CAN_init>:
unsigned char rxflag = 0;									// Interrupt flag variable


void CAN_init()
{
	MCP_init();
 148:	0e 94 53 01 	call	0x2a6	; 0x2a6 <MCP_init>
	MCP_bitmod(MCP_CANINTE, 0x0F, 0x01);					// Sets interrupt receive-register 
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	6f e0       	ldi	r22, 0x0F	; 15
 150:	8b e2       	ldi	r24, 0x2B	; 43
 152:	0e 94 08 01 	call	0x210	; 0x210 <MCP_bitmod>
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);		// Setting MCP to loop-back mode MODE_MASK
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	60 ee       	ldi	r22, 0xE0	; 224
 15a:	8f e0       	ldi	r24, 0x0F	; 15
 15c:	0e 94 08 01 	call	0x210	; 0x210 <MCP_bitmod>
 160:	08 95       	ret

00000162 <Can_trans_compl>:
}


int Can_trans_compl()							// sjekker om TX buffer er ferdig med transmission (TXREQ = 0)
{
	uint8_t status = MCP_status();				// Saves MCP status in status
 162:	0e 94 5e 01 	call	0x2bc	; 0x2bc <MCP_status>
	
	if (test_bit(status,3))						// Check status-register value against 3
 166:	86 95       	lsr	r24
 168:	86 95       	lsr	r24
 16a:	86 95       	lsr	r24
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	89 27       	eor	r24, r25
	}	
	else
	{
		return 1;
	}
}
 170:	81 70       	andi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret

00000176 <CAN_send>:
	MCP_bitmod(MCP_CANINTE, 0x0F, 0x01);					// Sets interrupt receive-register 
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);		// Setting MCP to loop-back mode MODE_MASK
}

void CAN_send(CAN_message * msg)
{
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24


	if (Can_trans_compl())									// Check registers are available 
 17e:	0e 94 b1 00 	call	0x162	; 0x162 <Can_trans_compl>
 182:	89 2b       	or	r24, r25
 184:	e9 f1       	breq	.+122    	; 0x200 <CAN_send+0x8a>
	{
		MCP_write(MCP_TXB0SIDH, msg->id >> 3);				// Write id to id handlig regiseter (standard identifier High)
 186:	68 81       	ld	r22, Y
 188:	79 81       	ldd	r23, Y+1	; 0x01
 18a:	76 95       	lsr	r23
 18c:	67 95       	ror	r22
 18e:	76 95       	lsr	r23
 190:	67 95       	ror	r22
 192:	76 95       	lsr	r23
 194:	67 95       	ror	r22
 196:	81 e3       	ldi	r24, 0x31	; 49
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 2f 01 	call	0x25e	; 0x25e <MCP_write>
		MCP_write(MCP_TXB0SIDL, msg->id << 5);				// Write id to Id handling register (3-3, standard identifier Low)
 19e:	68 81       	ld	r22, Y
 1a0:	79 81       	ldd	r23, Y+1	; 0x01
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	62 95       	swap	r22
 1a8:	72 95       	swap	r23
 1aa:	70 7f       	andi	r23, 0xF0	; 240
 1ac:	76 27       	eor	r23, r22
 1ae:	60 7f       	andi	r22, 0xF0	; 240
 1b0:	76 27       	eor	r23, r22
 1b2:	82 e3       	ldi	r24, 0x32	; 50
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 2f 01 	call	0x25e	; 0x25e <MCP_write>
		//printf("%i \n",msg->id>>3);
		MCP_write(TXB0DLC, (msg->length));					// Write length to length handling register (3-7)
 1ba:	6a 81       	ldd	r22, Y+2	; 0x02
 1bc:	7b 81       	ldd	r23, Y+3	; 0x03
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 2f 01 	call	0x25e	; 0x25e <MCP_write>
		for(unsigned char i=0; i<msg->length;i++)
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	9b 81       	ldd	r25, Y+3	; 0x03
 1ca:	89 2b       	or	r24, r25
 1cc:	b1 f0       	breq	.+44     	; 0x1fa <CAN_send+0x84>
 1ce:	10 e0       	ldi	r17, 0x00	; 0
		{
			MCP_write(TXB0D0+i,msg->data[i]);				// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
 1d0:	81 2f       	mov	r24, r17
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	32 96       	adiw	r30, 0x02	; 2
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	60 81       	ld	r22, Z
 1e2:	71 81       	ldd	r23, Z+1	; 0x01
 1e4:	c6 96       	adiw	r24, 0x36	; 54
 1e6:	0e 94 2f 01 	call	0x25e	; 0x25e <MCP_write>
	{
		MCP_write(MCP_TXB0SIDH, msg->id >> 3);				// Write id to id handlig regiseter (standard identifier High)
		MCP_write(MCP_TXB0SIDL, msg->id << 5);				// Write id to Id handling register (3-3, standard identifier Low)
		//printf("%i \n",msg->id>>3);
		MCP_write(TXB0DLC, (msg->length));					// Write length to length handling register (3-7)
		for(unsigned char i=0; i<msg->length;i++)
 1ea:	1f 5f       	subi	r17, 0xFF	; 255
 1ec:	21 2f       	mov	r18, r17
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	9b 81       	ldd	r25, Y+3	; 0x03
 1f4:	28 17       	cp	r18, r24
 1f6:	39 07       	cpc	r19, r25
 1f8:	58 f3       	brcs	.-42     	; 0x1d0 <CAN_send+0x5a>
		{
			MCP_write(TXB0D0+i,msg->data[i]);				// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
		}


		MCP_request();										// Request to send written message MCP_RTS_ALL
 1fa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MCP_request>
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <CAN_send+0x92>
	}
	else													// If message is not sent
	{
		printf("Sendte ikke\n");							// Print this
 200:	89 e1       	ldi	r24, 0x19	; 25
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 64 02 	call	0x4c8	; 0x4c8 <puts>
	}
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	08 95       	ret

00000210 <MCP_bitmod>:
}



void MCP_bitmod(unsigned char reg, unsigned char mask, unsigned char data)
{
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	18 2f       	mov	r17, r24
 218:	d6 2f       	mov	r29, r22
 21a:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);					// Chip select
 21c:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	00 c0       	rjmp	.+0      	; 0x220 <MCP_bitmod+0x10>
 220:	00 c0       	rjmp	.+0      	; 0x222 <MCP_bitmod+0x12>
 222:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(MCP_BITMOD);			// send command "I want to modify bit"
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <MCP_bitmod+0x1c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <MCP_bitmod+0x1e>
 22e:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(reg);				// In what register do you want to operate
 230:	81 2f       	mov	r24, r17
 232:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
 236:	00 c0       	rjmp	.+0      	; 0x238 <MCP_bitmod+0x28>
 238:	00 c0       	rjmp	.+0      	; 0x23a <MCP_bitmod+0x2a>
 23a:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(mask);				// What bit mask do you want to change
 23c:	8d 2f       	mov	r24, r29
 23e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
 242:	00 c0       	rjmp	.+0      	; 0x244 <MCP_bitmod+0x34>
 244:	00 c0       	rjmp	.+0      	; 0x246 <MCP_bitmod+0x36>
 246:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(data);				// What to you want to change to
 248:	8c 2f       	mov	r24, r28
 24a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <MCP_bitmod+0x40>
 250:	00 c0       	rjmp	.+0      	; 0x252 <MCP_bitmod+0x42>
 252:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);						// chip de-select
 254:	c4 9a       	sbi	0x18, 4	; 24
	
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	08 95       	ret

0000025e <MCP_write>:
	PORTB |=(1<<PB4);					// De-selects can controller
	return result;					// Return what we read
}

void MCP_write(unsigned int address, unsigned int data)
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	d8 2f       	mov	r29, r24
 264:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);	
 266:	c4 98       	cbi	0x18, 4	; 24
 268:	00 c0       	rjmp	.+0      	; 0x26a <MCP_write+0xc>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <MCP_write+0xe>
 26c:	00 00       	nop
	_delay_us(1);				
	SPI_tranciever(MCP_WRITE);		// Send command "I want to write"
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
 274:	00 c0       	rjmp	.+0      	; 0x276 <MCP_write+0x18>
 276:	00 c0       	rjmp	.+0      	; 0x278 <MCP_write+0x1a>
 278:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(address);		// Where we want to write to
 27a:	8d 2f       	mov	r24, r29
 27c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
 280:	00 c0       	rjmp	.+0      	; 0x282 <MCP_write+0x24>
 282:	00 c0       	rjmp	.+0      	; 0x284 <MCP_write+0x26>
 284:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(data);			// What we want to write
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <MCP_write+0x30>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <MCP_write+0x32>
 290:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);
 292:	c4 9a       	sbi	0x18, 4	; 24
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <MCP_reset>:

void MCP_reset()
{
	PORTB &= ~(1<<PB4);	
 29a:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RESET);		// Send command "I want to reset MCP"
 29c:	80 ec       	ldi	r24, 0xC0	; 192
 29e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
	PORTB |=(1<<PB4);
 2a2:	c4 9a       	sbi	0x18, 4	; 24
 2a4:	08 95       	ret

000002a6 <MCP_init>:
#include <avr/io.h>
#include <avr/delay.h>
void MCP_init()
{
	// Makes sure registers are clean and MCP in control mode
	SPI_MasterInit();
 2a6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <SPI_MasterInit>
	MCP_reset();
 2aa:	0e 94 4d 01 	call	0x29a	; 0x29a <MCP_reset>
 2ae:	08 95       	ret

000002b0 <MCP_request>:
	PORTB |=(1<<PB4);
}

void MCP_request()
{
	PORTB &= ~(1<<PB4);
 2b0:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RTS_ALL);	// Send command "Request to send for all ports" (TX0, TX1 and TX2)
 2b2:	87 e8       	ldi	r24, 0x87	; 135
 2b4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
	PORTB |=(1<<PB4);
 2b8:	c4 9a       	sbi	0x18, 4	; 24
 2ba:	08 95       	ret

000002bc <MCP_status>:
}

unsigned char MCP_status()
{
	PORTB &= ~(1<<PB4);
 2bc:	c4 98       	cbi	0x18, 4	; 24
	unsigned char value  = SPI_tranciever(MCP_READ_STATUS);				// Send command "I want to read status"
 2be:	80 ea       	ldi	r24, 0xA0	; 160
 2c0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_tranciever>
																		// Save returned value for SPI_ tranciever
	PORTB |=(1<<PB4);	
 2c4:	c4 9a       	sbi	0x18, 4	; 24
	return value;														// Return saved variabel 
}
 2c6:	08 95       	ret

000002c8 <init_OLED>:
volatile char *write_d = (char *) 0x1200; 
char Name[3];

void init_OLED()
{
	MCUCR |= (1<<SRE);
 2c8:	85 b7       	in	r24, 0x35	; 53
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 2ce:	80 b7       	in	r24, 0x30	; 48
 2d0:	80 62       	ori	r24, 0x20	; 32
 2d2:	80 bf       	out	0x30, r24	; 48
	*write_c = (0xae);        //  display  off
 2d4:	e0 91 06 01 	lds	r30, 0x0106
 2d8:	f0 91 07 01 	lds	r31, 0x0107
 2dc:	8e ea       	ldi	r24, 0xAE	; 174
 2de:	80 83       	st	Z, r24
	*write_c = (0xa1);        //segment  remap
 2e0:	e0 91 06 01 	lds	r30, 0x0106
 2e4:	f0 91 07 01 	lds	r31, 0x0107
 2e8:	81 ea       	ldi	r24, 0xA1	; 161
 2ea:	80 83       	st	Z, r24
	*write_c = (0xda);        //common  pads  hardware:  alternative
 2ec:	e0 91 06 01 	lds	r30, 0x0106
 2f0:	f0 91 07 01 	lds	r31, 0x0107
 2f4:	8a ed       	ldi	r24, 0xDA	; 218
 2f6:	80 83       	st	Z, r24
	*write_c = (0x12);
 2f8:	e0 91 06 01 	lds	r30, 0x0106
 2fc:	f0 91 07 01 	lds	r31, 0x0107
 300:	82 e1       	ldi	r24, 0x12	; 18
 302:	80 83       	st	Z, r24
	*write_c = (0xc8);        //common output scan direction:com63~com0
 304:	e0 91 06 01 	lds	r30, 0x0106
 308:	f0 91 07 01 	lds	r31, 0x0107
 30c:	88 ec       	ldi	r24, 0xC8	; 200
 30e:	80 83       	st	Z, r24
	*write_c = (0xa8);        //multiplex  ration  mode:63
 310:	e0 91 06 01 	lds	r30, 0x0106
 314:	f0 91 07 01 	lds	r31, 0x0107
 318:	88 ea       	ldi	r24, 0xA8	; 168
 31a:	80 83       	st	Z, r24
	*write_c = (0x3f);
 31c:	e0 91 06 01 	lds	r30, 0x0106
 320:	f0 91 07 01 	lds	r31, 0x0107
 324:	8f e3       	ldi	r24, 0x3F	; 63
 326:	80 83       	st	Z, r24
	*write_c = (0xd5);        //display divide ratio/osc. freq. mode
 328:	e0 91 06 01 	lds	r30, 0x0106
 32c:	f0 91 07 01 	lds	r31, 0x0107
 330:	85 ed       	ldi	r24, 0xD5	; 213
 332:	80 83       	st	Z, r24
	*write_c = (0x80);
 334:	e0 91 06 01 	lds	r30, 0x0106
 338:	f0 91 07 01 	lds	r31, 0x0107
 33c:	80 e8       	ldi	r24, 0x80	; 128
 33e:	80 83       	st	Z, r24
	*write_c = (0x81);        //contrast  control
 340:	e0 91 06 01 	lds	r30, 0x0106
 344:	f0 91 07 01 	lds	r31, 0x0107
 348:	81 e8       	ldi	r24, 0x81	; 129
 34a:	80 83       	st	Z, r24
	*write_c = (0x50);
 34c:	e0 91 06 01 	lds	r30, 0x0106
 350:	f0 91 07 01 	lds	r31, 0x0107
 354:	80 e5       	ldi	r24, 0x50	; 80
 356:	80 83       	st	Z, r24
	*write_c = (0xd9);        //set  pre-charge  period
 358:	e0 91 06 01 	lds	r30, 0x0106
 35c:	f0 91 07 01 	lds	r31, 0x0107
 360:	89 ed       	ldi	r24, 0xD9	; 217
 362:	80 83       	st	Z, r24
	*write_c = (0x21);
 364:	e0 91 06 01 	lds	r30, 0x0106
 368:	f0 91 07 01 	lds	r31, 0x0107
 36c:	81 e2       	ldi	r24, 0x21	; 33
 36e:	80 83       	st	Z, r24
	*write_c = (0x20);        //Set  Memory  Addressing  Mode
 370:	e0 91 06 01 	lds	r30, 0x0106
 374:	f0 91 07 01 	lds	r31, 0x0107
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	80 83       	st	Z, r24
	*write_c = (0x02);
 37c:	e0 91 06 01 	lds	r30, 0x0106
 380:	f0 91 07 01 	lds	r31, 0x0107
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	80 83       	st	Z, r24
	*write_c = (0xdb);        //VCOM  deselect  level  mode
 388:	e0 91 06 01 	lds	r30, 0x0106
 38c:	f0 91 07 01 	lds	r31, 0x0107
 390:	8b ed       	ldi	r24, 0xDB	; 219
 392:	80 83       	st	Z, r24
	*write_c = (0x30);
 394:	e0 91 06 01 	lds	r30, 0x0106
 398:	f0 91 07 01 	lds	r31, 0x0107
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	80 83       	st	Z, r24
	*write_c = (0xad);        //master  configuration
 3a0:	e0 91 06 01 	lds	r30, 0x0106
 3a4:	f0 91 07 01 	lds	r31, 0x0107
 3a8:	8d ea       	ldi	r24, 0xAD	; 173
 3aa:	80 83       	st	Z, r24
	*write_c = (0x00);
 3ac:	e0 91 06 01 	lds	r30, 0x0106
 3b0:	f0 91 07 01 	lds	r31, 0x0107
 3b4:	10 82       	st	Z, r1
	*write_c = (0xa4);        //out  follows  RAM  content
 3b6:	e0 91 06 01 	lds	r30, 0x0106
 3ba:	f0 91 07 01 	lds	r31, 0x0107
 3be:	84 ea       	ldi	r24, 0xA4	; 164
 3c0:	80 83       	st	Z, r24
	*write_c = (0xa6);        //set  normal  display
 3c2:	e0 91 06 01 	lds	r30, 0x0106
 3c6:	f0 91 07 01 	lds	r31, 0x0107
 3ca:	86 ea       	ldi	r24, 0xA6	; 166
 3cc:	80 83       	st	Z, r24
	*write_c = (0xaf);        //  display  on
 3ce:	e0 91 06 01 	lds	r30, 0x0106
 3d2:	f0 91 07 01 	lds	r31, 0x0107
 3d6:	8f ea       	ldi	r24, 0xAF	; 175
 3d8:	80 83       	st	Z, r24
 3da:	08 95       	ret

000003dc <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	/* Set MOSI, SS and SCK output, all others input */
	DDRB &= ~(1<<PB6);
 3dc:	be 98       	cbi	0x17, 6	; 23
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
 3de:	87 b3       	in	r24, 0x17	; 23
 3e0:	80 6b       	ori	r24, 0xB0	; 176
 3e2:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB4);
 3e4:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//&~(1<<DORD);
 3e6:	8d b1       	in	r24, 0x0d	; 13
 3e8:	81 65       	ori	r24, 0x51	; 81
 3ea:	8d b9       	out	0x0d, r24	; 13
 3ec:	08 95       	ret

000003ee <SPI_tranciever>:
unsigned char SPI_tranciever(unsigned char data)
{

	/* Start transmission */

	SPDR = data;
 3ee:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
 3f0:	77 9b       	sbis	0x0e, 7	; 14
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <SPI_tranciever+0x2>

	//Return received data
	return SPDR;
 3f4:	8f b1       	in	r24, 0x0f	; 15
}
 3f6:	08 95       	ret

000003f8 <SRAM_init>:



void SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
 3f8:	85 b7       	in	r24, 0x35	; 53
 3fa:	80 68       	ori	r24, 0x80	; 128
 3fc:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 3fe:	80 b7       	in	r24, 0x30	; 48
 400:	80 62       	ori	r24, 0x20	; 32
 402:	80 bf       	out	0x30, r24	; 48
 404:	08 95       	ret

00000406 <USART_Receive>:


unsigned char USART_Receive(void)
	{
	//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 406:	5f 9b       	sbis	0x0b, 7	; 11
 408:	fe cf       	rjmp	.-4      	; 0x406 <USART_Receive>
	
	//Get and return received data from buffer
	return UDR0;
 40a:	8c b1       	in	r24, 0x0c	; 12
	}
 40c:	08 95       	ret

0000040e <USART_Transmit>:

void USART_Transmit( unsigned char data )
	{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
 40e:	5d 9b       	sbis	0x0b, 5	; 11
 410:	fe cf       	rjmp	.-4      	; 0x40e <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 412:	8c b9       	out	0x0c, r24	; 12
 414:	08 95       	ret

00000416 <UartInit>:

	
//}
void UartInit(){
	//Set Baud rate 9600
	UBRR0H = (unsigned char)(MYUBRR>>8);	// Setter de 8 mest signifikante bitene
 416:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBRR);	// Setter de 8 minst signifikante bitene
 418:	8f e1       	ldi	r24, 0x1F	; 31
 41a:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 41c:	88 e1       	ldi	r24, 0x18	; 24
 41e:	8a b9       	out	0x0a, r24	; 10
	// 8N2
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 420:	8e e8       	ldi	r24, 0x8E	; 142
 422:	80 bd       	out	0x20, r24	; 32
	fdevopen(&USART_Transmit, &USART_Receive);
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	72 e0       	ldi	r23, 0x02	; 2
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	0e 94 19 02 	call	0x432	; 0x432 <fdevopen>
 430:	08 95       	ret

00000432 <fdevopen>:
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
 43c:	8b 01       	movw	r16, r22
 43e:	00 97       	sbiw	r24, 0x00	; 0
 440:	31 f4       	brne	.+12     	; 0x44e <fdevopen+0x1c>
 442:	61 15       	cp	r22, r1
 444:	71 05       	cpc	r23, r1
 446:	19 f4       	brne	.+6      	; 0x44e <fdevopen+0x1c>
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	38 c0       	rjmp	.+112    	; 0x4be <fdevopen+0x8c>
 44e:	6e e0       	ldi	r22, 0x0E	; 14
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 91 02 	call	0x522	; 0x522 <calloc>
 45a:	fc 01       	movw	r30, r24
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	a1 f3       	breq	.-24     	; 0x448 <fdevopen+0x16>
 460:	80 e8       	ldi	r24, 0x80	; 128
 462:	83 83       	std	Z+3, r24	; 0x03
 464:	01 15       	cp	r16, r1
 466:	11 05       	cpc	r17, r1
 468:	71 f0       	breq	.+28     	; 0x486 <fdevopen+0x54>
 46a:	13 87       	std	Z+11, r17	; 0x0b
 46c:	02 87       	std	Z+10, r16	; 0x0a
 46e:	81 e8       	ldi	r24, 0x81	; 129
 470:	83 83       	std	Z+3, r24	; 0x03
 472:	80 91 50 01 	lds	r24, 0x0150
 476:	90 91 51 01 	lds	r25, 0x0151
 47a:	89 2b       	or	r24, r25
 47c:	21 f4       	brne	.+8      	; 0x486 <fdevopen+0x54>
 47e:	f0 93 51 01 	sts	0x0151, r31
 482:	e0 93 50 01 	sts	0x0150, r30
 486:	20 97       	sbiw	r28, 0x00	; 0
 488:	c9 f0       	breq	.+50     	; 0x4bc <fdevopen+0x8a>
 48a:	d1 87       	std	Z+9, r29	; 0x09
 48c:	c0 87       	std	Z+8, r28	; 0x08
 48e:	83 81       	ldd	r24, Z+3	; 0x03
 490:	82 60       	ori	r24, 0x02	; 2
 492:	83 83       	std	Z+3, r24	; 0x03
 494:	80 91 52 01 	lds	r24, 0x0152
 498:	90 91 53 01 	lds	r25, 0x0153
 49c:	89 2b       	or	r24, r25
 49e:	71 f4       	brne	.+28     	; 0x4bc <fdevopen+0x8a>
 4a0:	f0 93 53 01 	sts	0x0153, r31
 4a4:	e0 93 52 01 	sts	0x0152, r30
 4a8:	80 91 54 01 	lds	r24, 0x0154
 4ac:	90 91 55 01 	lds	r25, 0x0155
 4b0:	89 2b       	or	r24, r25
 4b2:	21 f4       	brne	.+8      	; 0x4bc <fdevopen+0x8a>
 4b4:	f0 93 55 01 	sts	0x0155, r31
 4b8:	e0 93 54 01 	sts	0x0154, r30
 4bc:	cf 01       	movw	r24, r30
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	08 95       	ret

000004c8 <puts>:
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	e0 91 52 01 	lds	r30, 0x0152
 4d4:	f0 91 53 01 	lds	r31, 0x0153
 4d8:	23 81       	ldd	r18, Z+3	; 0x03
 4da:	21 ff       	sbrs	r18, 1
 4dc:	1b c0       	rjmp	.+54     	; 0x514 <__stack+0x15>
 4de:	ec 01       	movw	r28, r24
 4e0:	00 e0       	ldi	r16, 0x00	; 0
 4e2:	10 e0       	ldi	r17, 0x00	; 0
 4e4:	89 91       	ld	r24, Y+
 4e6:	60 91 52 01 	lds	r22, 0x0152
 4ea:	70 91 53 01 	lds	r23, 0x0153
 4ee:	db 01       	movw	r26, r22
 4f0:	18 96       	adiw	r26, 0x08	; 8
 4f2:	ed 91       	ld	r30, X+
 4f4:	fc 91       	ld	r31, X
 4f6:	19 97       	sbiw	r26, 0x09	; 9
 4f8:	88 23       	and	r24, r24
 4fa:	31 f0       	breq	.+12     	; 0x508 <__stack+0x9>
 4fc:	09 95       	icall
 4fe:	89 2b       	or	r24, r25
 500:	89 f3       	breq	.-30     	; 0x4e4 <puts+0x1c>
 502:	0f ef       	ldi	r16, 0xFF	; 255
 504:	1f ef       	ldi	r17, 0xFF	; 255
 506:	ee cf       	rjmp	.-36     	; 0x4e4 <puts+0x1c>
 508:	8a e0       	ldi	r24, 0x0A	; 10
 50a:	09 95       	icall
 50c:	89 2b       	or	r24, r25
 50e:	11 f4       	brne	.+4      	; 0x514 <__stack+0x15>
 510:	c8 01       	movw	r24, r16
 512:	02 c0       	rjmp	.+4      	; 0x518 <__stack+0x19>
 514:	8f ef       	ldi	r24, 0xFF	; 255
 516:	9f ef       	ldi	r25, 0xFF	; 255
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <calloc>:
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	86 9f       	mul	r24, r22
 52c:	80 01       	movw	r16, r0
 52e:	87 9f       	mul	r24, r23
 530:	10 0d       	add	r17, r0
 532:	96 9f       	mul	r25, r22
 534:	10 0d       	add	r17, r0
 536:	11 24       	eor	r1, r1
 538:	c8 01       	movw	r24, r16
 53a:	0e 94 ad 02 	call	0x55a	; 0x55a <malloc>
 53e:	ec 01       	movw	r28, r24
 540:	00 97       	sbiw	r24, 0x00	; 0
 542:	29 f0       	breq	.+10     	; 0x54e <calloc+0x2c>
 544:	a8 01       	movw	r20, r16
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <memset>
 54e:	ce 01       	movw	r24, r28
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	08 95       	ret

0000055a <malloc>:
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	91 05       	cpc	r25, r1
 562:	10 f4       	brcc	.+4      	; 0x568 <malloc+0xe>
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	e0 91 58 01 	lds	r30, 0x0158
 56c:	f0 91 59 01 	lds	r31, 0x0159
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	a0 e0       	ldi	r26, 0x00	; 0
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	30 97       	sbiw	r30, 0x00	; 0
 57a:	39 f1       	breq	.+78     	; 0x5ca <malloc+0x70>
 57c:	40 81       	ld	r20, Z
 57e:	51 81       	ldd	r21, Z+1	; 0x01
 580:	48 17       	cp	r20, r24
 582:	59 07       	cpc	r21, r25
 584:	b8 f0       	brcs	.+46     	; 0x5b4 <malloc+0x5a>
 586:	48 17       	cp	r20, r24
 588:	59 07       	cpc	r21, r25
 58a:	71 f4       	brne	.+28     	; 0x5a8 <malloc+0x4e>
 58c:	82 81       	ldd	r24, Z+2	; 0x02
 58e:	93 81       	ldd	r25, Z+3	; 0x03
 590:	10 97       	sbiw	r26, 0x00	; 0
 592:	29 f0       	breq	.+10     	; 0x59e <malloc+0x44>
 594:	13 96       	adiw	r26, 0x03	; 3
 596:	9c 93       	st	X, r25
 598:	8e 93       	st	-X, r24
 59a:	12 97       	sbiw	r26, 0x02	; 2
 59c:	2c c0       	rjmp	.+88     	; 0x5f6 <malloc+0x9c>
 59e:	90 93 59 01 	sts	0x0159, r25
 5a2:	80 93 58 01 	sts	0x0158, r24
 5a6:	27 c0       	rjmp	.+78     	; 0x5f6 <malloc+0x9c>
 5a8:	21 15       	cp	r18, r1
 5aa:	31 05       	cpc	r19, r1
 5ac:	31 f0       	breq	.+12     	; 0x5ba <malloc+0x60>
 5ae:	42 17       	cp	r20, r18
 5b0:	53 07       	cpc	r21, r19
 5b2:	18 f0       	brcs	.+6      	; 0x5ba <malloc+0x60>
 5b4:	a9 01       	movw	r20, r18
 5b6:	db 01       	movw	r26, r22
 5b8:	01 c0       	rjmp	.+2      	; 0x5bc <malloc+0x62>
 5ba:	ef 01       	movw	r28, r30
 5bc:	9a 01       	movw	r18, r20
 5be:	bd 01       	movw	r22, r26
 5c0:	df 01       	movw	r26, r30
 5c2:	02 80       	ldd	r0, Z+2	; 0x02
 5c4:	f3 81       	ldd	r31, Z+3	; 0x03
 5c6:	e0 2d       	mov	r30, r0
 5c8:	d7 cf       	rjmp	.-82     	; 0x578 <malloc+0x1e>
 5ca:	21 15       	cp	r18, r1
 5cc:	31 05       	cpc	r19, r1
 5ce:	f9 f0       	breq	.+62     	; 0x60e <malloc+0xb4>
 5d0:	28 1b       	sub	r18, r24
 5d2:	39 0b       	sbc	r19, r25
 5d4:	24 30       	cpi	r18, 0x04	; 4
 5d6:	31 05       	cpc	r19, r1
 5d8:	80 f4       	brcc	.+32     	; 0x5fa <malloc+0xa0>
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	9b 81       	ldd	r25, Y+3	; 0x03
 5de:	61 15       	cp	r22, r1
 5e0:	71 05       	cpc	r23, r1
 5e2:	21 f0       	breq	.+8      	; 0x5ec <malloc+0x92>
 5e4:	fb 01       	movw	r30, r22
 5e6:	93 83       	std	Z+3, r25	; 0x03
 5e8:	82 83       	std	Z+2, r24	; 0x02
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <malloc+0x9a>
 5ec:	90 93 59 01 	sts	0x0159, r25
 5f0:	80 93 58 01 	sts	0x0158, r24
 5f4:	fe 01       	movw	r30, r28
 5f6:	32 96       	adiw	r30, 0x02	; 2
 5f8:	44 c0       	rjmp	.+136    	; 0x682 <malloc+0x128>
 5fa:	fe 01       	movw	r30, r28
 5fc:	e2 0f       	add	r30, r18
 5fe:	f3 1f       	adc	r31, r19
 600:	81 93       	st	Z+, r24
 602:	91 93       	st	Z+, r25
 604:	22 50       	subi	r18, 0x02	; 2
 606:	31 09       	sbc	r19, r1
 608:	39 83       	std	Y+1, r19	; 0x01
 60a:	28 83       	st	Y, r18
 60c:	3a c0       	rjmp	.+116    	; 0x682 <malloc+0x128>
 60e:	20 91 56 01 	lds	r18, 0x0156
 612:	30 91 57 01 	lds	r19, 0x0157
 616:	23 2b       	or	r18, r19
 618:	41 f4       	brne	.+16     	; 0x62a <malloc+0xd0>
 61a:	20 91 02 01 	lds	r18, 0x0102
 61e:	30 91 03 01 	lds	r19, 0x0103
 622:	30 93 57 01 	sts	0x0157, r19
 626:	20 93 56 01 	sts	0x0156, r18
 62a:	20 91 00 01 	lds	r18, 0x0100
 62e:	30 91 01 01 	lds	r19, 0x0101
 632:	21 15       	cp	r18, r1
 634:	31 05       	cpc	r19, r1
 636:	41 f4       	brne	.+16     	; 0x648 <malloc+0xee>
 638:	2d b7       	in	r18, 0x3d	; 61
 63a:	3e b7       	in	r19, 0x3e	; 62
 63c:	40 91 04 01 	lds	r20, 0x0104
 640:	50 91 05 01 	lds	r21, 0x0105
 644:	24 1b       	sub	r18, r20
 646:	35 0b       	sbc	r19, r21
 648:	e0 91 56 01 	lds	r30, 0x0156
 64c:	f0 91 57 01 	lds	r31, 0x0157
 650:	e2 17       	cp	r30, r18
 652:	f3 07       	cpc	r31, r19
 654:	a0 f4       	brcc	.+40     	; 0x67e <malloc+0x124>
 656:	2e 1b       	sub	r18, r30
 658:	3f 0b       	sbc	r19, r31
 65a:	28 17       	cp	r18, r24
 65c:	39 07       	cpc	r19, r25
 65e:	78 f0       	brcs	.+30     	; 0x67e <malloc+0x124>
 660:	ac 01       	movw	r20, r24
 662:	4e 5f       	subi	r20, 0xFE	; 254
 664:	5f 4f       	sbci	r21, 0xFF	; 255
 666:	24 17       	cp	r18, r20
 668:	35 07       	cpc	r19, r21
 66a:	48 f0       	brcs	.+18     	; 0x67e <malloc+0x124>
 66c:	4e 0f       	add	r20, r30
 66e:	5f 1f       	adc	r21, r31
 670:	50 93 57 01 	sts	0x0157, r21
 674:	40 93 56 01 	sts	0x0156, r20
 678:	81 93       	st	Z+, r24
 67a:	91 93       	st	Z+, r25
 67c:	02 c0       	rjmp	.+4      	; 0x682 <malloc+0x128>
 67e:	e0 e0       	ldi	r30, 0x00	; 0
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	cf 01       	movw	r24, r30
 684:	df 91       	pop	r29
 686:	cf 91       	pop	r28
 688:	08 95       	ret

0000068a <free>:
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	09 f4       	brne	.+2      	; 0x694 <free+0xa>
 692:	87 c0       	rjmp	.+270    	; 0x7a2 <free+0x118>
 694:	fc 01       	movw	r30, r24
 696:	32 97       	sbiw	r30, 0x02	; 2
 698:	13 82       	std	Z+3, r1	; 0x03
 69a:	12 82       	std	Z+2, r1	; 0x02
 69c:	c0 91 58 01 	lds	r28, 0x0158
 6a0:	d0 91 59 01 	lds	r29, 0x0159
 6a4:	20 97       	sbiw	r28, 0x00	; 0
 6a6:	81 f4       	brne	.+32     	; 0x6c8 <free+0x3e>
 6a8:	20 81       	ld	r18, Z
 6aa:	31 81       	ldd	r19, Z+1	; 0x01
 6ac:	28 0f       	add	r18, r24
 6ae:	39 1f       	adc	r19, r25
 6b0:	80 91 56 01 	lds	r24, 0x0156
 6b4:	90 91 57 01 	lds	r25, 0x0157
 6b8:	82 17       	cp	r24, r18
 6ba:	93 07       	cpc	r25, r19
 6bc:	79 f5       	brne	.+94     	; 0x71c <free+0x92>
 6be:	f0 93 57 01 	sts	0x0157, r31
 6c2:	e0 93 56 01 	sts	0x0156, r30
 6c6:	6d c0       	rjmp	.+218    	; 0x7a2 <free+0x118>
 6c8:	de 01       	movw	r26, r28
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	ae 17       	cp	r26, r30
 6d0:	bf 07       	cpc	r27, r31
 6d2:	50 f4       	brcc	.+20     	; 0x6e8 <free+0x5e>
 6d4:	12 96       	adiw	r26, 0x02	; 2
 6d6:	4d 91       	ld	r20, X+
 6d8:	5c 91       	ld	r21, X
 6da:	13 97       	sbiw	r26, 0x03	; 3
 6dc:	9d 01       	movw	r18, r26
 6de:	41 15       	cp	r20, r1
 6e0:	51 05       	cpc	r21, r1
 6e2:	09 f1       	breq	.+66     	; 0x726 <free+0x9c>
 6e4:	da 01       	movw	r26, r20
 6e6:	f3 cf       	rjmp	.-26     	; 0x6ce <free+0x44>
 6e8:	b3 83       	std	Z+3, r27	; 0x03
 6ea:	a2 83       	std	Z+2, r26	; 0x02
 6ec:	40 81       	ld	r20, Z
 6ee:	51 81       	ldd	r21, Z+1	; 0x01
 6f0:	84 0f       	add	r24, r20
 6f2:	95 1f       	adc	r25, r21
 6f4:	8a 17       	cp	r24, r26
 6f6:	9b 07       	cpc	r25, r27
 6f8:	71 f4       	brne	.+28     	; 0x716 <free+0x8c>
 6fa:	8d 91       	ld	r24, X+
 6fc:	9c 91       	ld	r25, X
 6fe:	11 97       	sbiw	r26, 0x01	; 1
 700:	84 0f       	add	r24, r20
 702:	95 1f       	adc	r25, r21
 704:	02 96       	adiw	r24, 0x02	; 2
 706:	91 83       	std	Z+1, r25	; 0x01
 708:	80 83       	st	Z, r24
 70a:	12 96       	adiw	r26, 0x02	; 2
 70c:	8d 91       	ld	r24, X+
 70e:	9c 91       	ld	r25, X
 710:	13 97       	sbiw	r26, 0x03	; 3
 712:	93 83       	std	Z+3, r25	; 0x03
 714:	82 83       	std	Z+2, r24	; 0x02
 716:	21 15       	cp	r18, r1
 718:	31 05       	cpc	r19, r1
 71a:	29 f4       	brne	.+10     	; 0x726 <free+0x9c>
 71c:	f0 93 59 01 	sts	0x0159, r31
 720:	e0 93 58 01 	sts	0x0158, r30
 724:	3e c0       	rjmp	.+124    	; 0x7a2 <free+0x118>
 726:	d9 01       	movw	r26, r18
 728:	13 96       	adiw	r26, 0x03	; 3
 72a:	fc 93       	st	X, r31
 72c:	ee 93       	st	-X, r30
 72e:	12 97       	sbiw	r26, 0x02	; 2
 730:	4d 91       	ld	r20, X+
 732:	5d 91       	ld	r21, X+
 734:	a4 0f       	add	r26, r20
 736:	b5 1f       	adc	r27, r21
 738:	ea 17       	cp	r30, r26
 73a:	fb 07       	cpc	r31, r27
 73c:	79 f4       	brne	.+30     	; 0x75c <free+0xd2>
 73e:	80 81       	ld	r24, Z
 740:	91 81       	ldd	r25, Z+1	; 0x01
 742:	84 0f       	add	r24, r20
 744:	95 1f       	adc	r25, r21
 746:	02 96       	adiw	r24, 0x02	; 2
 748:	d9 01       	movw	r26, r18
 74a:	11 96       	adiw	r26, 0x01	; 1
 74c:	9c 93       	st	X, r25
 74e:	8e 93       	st	-X, r24
 750:	82 81       	ldd	r24, Z+2	; 0x02
 752:	93 81       	ldd	r25, Z+3	; 0x03
 754:	13 96       	adiw	r26, 0x03	; 3
 756:	9c 93       	st	X, r25
 758:	8e 93       	st	-X, r24
 75a:	12 97       	sbiw	r26, 0x02	; 2
 75c:	e0 e0       	ldi	r30, 0x00	; 0
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	8a 81       	ldd	r24, Y+2	; 0x02
 762:	9b 81       	ldd	r25, Y+3	; 0x03
 764:	00 97       	sbiw	r24, 0x00	; 0
 766:	19 f0       	breq	.+6      	; 0x76e <free+0xe4>
 768:	fe 01       	movw	r30, r28
 76a:	ec 01       	movw	r28, r24
 76c:	f9 cf       	rjmp	.-14     	; 0x760 <free+0xd6>
 76e:	ce 01       	movw	r24, r28
 770:	02 96       	adiw	r24, 0x02	; 2
 772:	28 81       	ld	r18, Y
 774:	39 81       	ldd	r19, Y+1	; 0x01
 776:	82 0f       	add	r24, r18
 778:	93 1f       	adc	r25, r19
 77a:	20 91 56 01 	lds	r18, 0x0156
 77e:	30 91 57 01 	lds	r19, 0x0157
 782:	28 17       	cp	r18, r24
 784:	39 07       	cpc	r19, r25
 786:	69 f4       	brne	.+26     	; 0x7a2 <free+0x118>
 788:	30 97       	sbiw	r30, 0x00	; 0
 78a:	29 f4       	brne	.+10     	; 0x796 <free+0x10c>
 78c:	10 92 59 01 	sts	0x0159, r1
 790:	10 92 58 01 	sts	0x0158, r1
 794:	02 c0       	rjmp	.+4      	; 0x79a <free+0x110>
 796:	13 82       	std	Z+3, r1	; 0x03
 798:	12 82       	std	Z+2, r1	; 0x02
 79a:	d0 93 57 01 	sts	0x0157, r29
 79e:	c0 93 56 01 	sts	0x0156, r28
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <memset>:
 7a8:	dc 01       	movw	r26, r24
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <memset+0x6>
 7ac:	6d 93       	st	X+, r22
 7ae:	41 50       	subi	r20, 0x01	; 1
 7b0:	50 40       	sbci	r21, 0x00	; 0
 7b2:	e0 f7       	brcc	.-8      	; 0x7ac <memset+0x4>
 7b4:	08 95       	ret

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
