
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000e9e  00000f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800138  00800138  00000f6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001efb  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b8d  00000000  00000000  000030a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b4e  00000000  00000000  00003c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000498  00000000  00000000  00004784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d6  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000108b  00000000  00000000  000050f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  0000617d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e9       	ldi	r30, 0x9E	; 158
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 33       	cpi	r26, 0x38	; 56
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e3       	ldi	r26, 0x38	; 56
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a3 34       	cpi	r26, 0x43	; 67
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:



void ADC_init()
{	
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <main>:
//}



int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	64 97       	sbiw	r28, 0x14	; 20
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
	DDRD  = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	
	UartInit();
  d4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <UartInit>
	SRAM_init();
  d8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <SRAM_init>
	ADC_init();
  dc:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	init_OLED();
  e0:	0e 94 39 02 	call	0x472	; 0x472 <init_OLED>
	MCP_init();
  e4:	0e 94 2c 02 	call	0x458	; 0x458 <MCP_init>
//const unsigned char* streng = "Espen er en GAUDER";
//const unsigned char* streng2 = "Gaute er en test";
//const unsigned char* streng3 = "Runar er en test";
	
	// Enable Global Interrupts
	sei();
  e8:	78 94       	sei
	
	CAN_message testmess;
	testmess.id = 4;
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	89 83       	std	Y+1, r24	; 0x01
  ee:	fe 01       	movw	r30, r28
  f0:	33 96       	adiw	r30, 0x03	; 3
	testmess.length = 8;
	for (unsigned char i=0; i<testmess.length;i++)
  f2:	80 e0       	ldi	r24, 0x00	; 0
	{
		testmess.data[i] = i;
  f4:	81 93       	st	Z+, r24
	sei();
	
	CAN_message testmess;
	testmess.id = 4;
	testmess.length = 8;
	for (unsigned char i=0; i<testmess.length;i++)
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x38>
			//}
			//printf("\n");
			//printf("%i",testmess.id);
			

			CAN_send(testmess);
  fc:	68 94       	set
  fe:	99 24       	eor	r9, r9
 100:	93 f8       	bld	r9, 3
			
			
			if(h.id == 4)
			{
				
				printf("h= ");
 102:	0f 2e       	mov	r0, r31
 104:	f8 e0       	ldi	r31, 0x08	; 8
 106:	af 2e       	mov	r10, r31
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	bf 2e       	mov	r11, r31
 10c:	f0 2d       	mov	r31, r0
				for (int i =0; i<h.length; i++)
 10e:	71 2c       	mov	r7, r1
 110:	81 2c       	mov	r8, r1
				{
					printf("%i",h.data);
 112:	6e 01       	movw	r12, r28
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	c8 0e       	add	r12, r24
 118:	d1 1c       	adc	r13, r1
 11a:	0f 2e       	mov	r0, r31
 11c:	fc e0       	ldi	r31, 0x0C	; 12
 11e:	ef 2e       	mov	r14, r31
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	ff 2e       	mov	r15, r31
 124:	f0 2d       	mov	r31, r0
			//}
			//printf("\n");
			//printf("%i",testmess.id);
			

			CAN_send(testmess);
 126:	9a 82       	std	Y+2, r9	; 0x02
 128:	09 81       	ldd	r16, Y+1	; 0x01
 12a:	19 2d       	mov	r17, r9
 12c:	2b 81       	ldd	r18, Y+3	; 0x03
 12e:	3c 81       	ldd	r19, Y+4	; 0x04
 130:	4d 81       	ldd	r20, Y+5	; 0x05
 132:	5e 81       	ldd	r21, Y+6	; 0x06
 134:	6f 81       	ldd	r22, Y+7	; 0x07
 136:	78 85       	ldd	r23, Y+8	; 0x08
 138:	89 85       	ldd	r24, Y+9	; 0x09
 13a:	9a 85       	ldd	r25, Y+10	; 0x0a
 13c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <CAN_send>
			
			CAN_message h = CAN_read2();
 140:	ce 01       	movw	r24, r28
 142:	0b 96       	adiw	r24, 0x0b	; 11
 144:	0e 94 41 01 	call	0x282	; 0x282 <CAN_read2>
			
			
			if(h.id == 4)
 148:	8b 85       	ldd	r24, Y+11	; 0x0b
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	61 f7       	brne	.-40     	; 0x126 <main+0x6a>
			{
				
				printf("h= ");
 14e:	bf 92       	push	r11
 150:	af 92       	push	r10
 152:	0e 94 39 03 	call	0x672	; 0x672 <printf>
				for (int i =0; i<h.length; i++)
 156:	8c 85       	ldd	r24, Y+12	; 0x0c
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	88 23       	and	r24, r24
 15e:	99 f0       	breq	.+38     	; 0x186 <main+0xca>
 160:	07 2d       	mov	r16, r7
 162:	18 2d       	mov	r17, r8
				{
					printf("%i",h.data);
 164:	df 92       	push	r13
 166:	cf 92       	push	r12
 168:	ff 92       	push	r15
 16a:	ef 92       	push	r14
 16c:	0e 94 39 03 	call	0x672	; 0x672 <printf>
			
			if(h.id == 4)
			{
				
				printf("h= ");
				for (int i =0; i<h.length; i++)
 170:	0f 5f       	subi	r16, 0xFF	; 255
 172:	1f 4f       	sbci	r17, 0xFF	; 255
 174:	8c 85       	ldd	r24, Y+12	; 0x0c
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	08 17       	cp	r16, r24
 182:	19 07       	cpc	r17, r25
 184:	7c f3       	brlt	.-34     	; 0x164 <main+0xa8>
				{
					printf("%i",h.data);
				}
				printf("\n");
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 4d 03 	call	0x69a	; 0x69a <putchar>
			}
			//
	}
 18e:	cb cf       	rjmp	.-106    	; 0x126 <main+0x6a>

00000190 <CAN_init>:


void CAN_init()
{
	// 
	MCP_bitmod(MCP_RXB0CTRL,0x64,0xFF);
 190:	4f ef       	ldi	r20, 0xFF	; 255
 192:	64 e6       	ldi	r22, 0x64	; 100
 194:	80 e6       	ldi	r24, 0x60	; 96
 196:	0e 94 c5 01 	call	0x38a	; 0x38a <MCP_bitmod>
	//MCP_bitmod(MCP_TXB0CTRL,0x00,0xFF);
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_LOOPBACK);		// Setting MCP to loop-back mode MODE_MASK
 19a:	40 e4       	ldi	r20, 0x40	; 64
 19c:	60 ee       	ldi	r22, 0xE0	; 224
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	0e 94 c5 01 	call	0x38a	; 0x38a <MCP_bitmod>
	MCP_bitmod(MCP_CANINTE, 0x0F, 0x0F);
 1a4:	4f e0       	ldi	r20, 0x0F	; 15
 1a6:	6f e0       	ldi	r22, 0x0F	; 15
 1a8:	8b e2       	ldi	r24, 0x2B	; 43
 1aa:	0e 94 c5 01 	call	0x38a	; 0x38a <MCP_bitmod>
	rxflag=1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 38 01 	sts	0x0138, r24
 1b4:	08 95       	ret

000001b6 <Can_trans_compl>:


int Can_trans_compl()
{
	// sjekker om TX buffer er ferdig med transmission (TXREQ = 0)
	if (test_bit(MCP_read(MCP_TXB0CTRL),3))
 1b6:	80 e3       	ldi	r24, 0x30	; 48
 1b8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP_read>
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	82 27       	eor	r24, r18
	}	
	else
	{
		return 1;
	}
}
 1cc:	81 70       	andi	r24, 0x01	; 1
 1ce:	99 27       	eor	r25, r25
 1d0:	08 95       	ret

000001d2 <CAN_send>:
	MCP_bitmod(MCP_CANINTE, 0x0F, 0x0F);
	rxflag=1;
}

void CAN_send(CAN_message msg)
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	2a 97       	sbiw	r28, 0x0a	; 10
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	09 83       	std	Y+1, r16	; 0x01
 1f0:	e1 2e       	mov	r14, r17
 1f2:	1a 83       	std	Y+2, r17	; 0x02
 1f4:	2b 83       	std	Y+3, r18	; 0x03
 1f6:	3c 83       	std	Y+4, r19	; 0x04
 1f8:	4d 83       	std	Y+5, r20	; 0x05
 1fa:	5e 83       	std	Y+6, r21	; 0x06
 1fc:	6f 83       	std	Y+7, r22	; 0x07
 1fe:	78 87       	std	Y+8, r23	; 0x08
 200:	89 87       	std	Y+9, r24	; 0x09
 202:	9a 87       	std	Y+10, r25	; 0x0a


	if (Can_trans_compl())
 204:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Can_trans_compl>
 208:	89 2b       	or	r24, r25
 20a:	71 f1       	breq	.+92     	; 0x268 <CAN_send+0x96>
	{
		MCP_write(MCP_TXB0SIDH, msg.id);
 20c:	60 2f       	mov	r22, r16
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	81 e3       	ldi	r24, 0x31	; 49
 212:	0e 94 08 02 	call	0x410	; 0x410 <MCP_write>
		//MCP_write(MCP_TXB0SIDL, msg.id << 5);				// Write id to Id handling register (3-3, standard identifier high)
		printf("%i \n",msg.id);
 216:	1f 92       	push	r1
 218:	0f 93       	push	r16
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	9f 93       	push	r25
 220:	8f 93       	push	r24
 222:	0e 94 39 03 	call	0x672	; 0x672 <printf>
		MCP_write(TXB0DLC, (0x0F) & (msg.length));					// Write length to length handling register (3-7)
 226:	6e 2d       	mov	r22, r14
 228:	6f 70       	andi	r22, 0x0F	; 15
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	85 e3       	ldi	r24, 0x35	; 53
 22e:	0e 94 08 02 	call	0x410	; 0x410 <MCP_write>
		for(unsigned char i=0; i<msg.length;i++)
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	ee 20       	and	r14, r14
 23c:	99 f0       	breq	.+38     	; 0x264 <CAN_send+0x92>
 23e:	8e 01       	movw	r16, r28
 240:	0d 5f       	subi	r16, 0xFD	; 253
 242:	1f 4f       	sbci	r17, 0xFF	; 255
 244:	86 e3       	ldi	r24, 0x36	; 54
 246:	e8 0e       	add	r14, r24
 248:	0f 2e       	mov	r0, r31
 24a:	f6 e3       	ldi	r31, 0x36	; 54
 24c:	ff 2e       	mov	r15, r31
 24e:	f0 2d       	mov	r31, r0
		{
			MCP_write(TXB0D0+i,msg.data[i]);			// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
 250:	f8 01       	movw	r30, r16
 252:	61 91       	ld	r22, Z+
 254:	8f 01       	movw	r16, r30
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	8f 2d       	mov	r24, r15
 25a:	0e 94 08 02 	call	0x410	; 0x410 <MCP_write>
 25e:	f3 94       	inc	r15
	{
		MCP_write(MCP_TXB0SIDH, msg.id);
		//MCP_write(MCP_TXB0SIDL, msg.id << 5);				// Write id to Id handling register (3-3, standard identifier high)
		printf("%i \n",msg.id);
		MCP_write(TXB0DLC, (0x0F) & (msg.length));					// Write length to length handling register (3-7)
		for(unsigned char i=0; i<msg.length;i++)
 260:	fe 10       	cpse	r15, r14
 262:	f6 cf       	rjmp	.-20     	; 0x250 <CAN_send+0x7e>
		{
			MCP_write(TXB0D0+i,msg.data[i]);			// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
		}

		MCP_request();									// Request to send written message MCP_RTS_ALL
 264:	0e 94 33 02 	call	0x466	; 0x466 <MCP_request>
	}
	//else
	//{
		//// sjekk om man har can error
	//}
}
 268:	2a 96       	adiw	r28, 0x0a	; 10
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	08 95       	ret

00000282 <CAN_read2>:
	MCP_bitmod(MCP_CANINTF, 0x01, 0);
	rxflag = 1;
}

CAN_message CAN_read2()
{
 282:	7f 92       	push	r7
 284:	8f 92       	push	r8
 286:	9f 92       	push	r9
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	2a 97       	sbiw	r28, 0x0a	; 10
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	7c 01       	movw	r14, r24
	CAN_message msg;
	//printf("sdgxgxsdd");
	if (rxflag == 1)//test_bit(MCP_CANINTF, MCP_RX0IF) ) // rxflag == 1
 2ae:	90 91 38 01 	lds	r25, 0x0138
 2b2:	91 30       	cpi	r25, 0x01	; 1
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <CAN_read2+0x36>
 2b6:	48 c0       	rjmp	.+144    	; 0x348 <CAN_read2+0xc6>
	{
		printf("abc");
 2b8:	84 e1       	ldi	r24, 0x14	; 20
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9f 93       	push	r25
 2be:	8f 93       	push	r24
 2c0:	0e 94 39 03 	call	0x672	; 0x672 <printf>
		//msg.id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
		msg.id = MCP_read(MCP_RXB0SIDH);				
 2c4:	81 e6       	ldi	r24, 0x61	; 97
 2c6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP_read>
 2ca:	88 2e       	mov	r8, r24
 2cc:	5c 01       	movw	r10, r24
 2ce:	bb 24       	eor	r11, r11
		printf("s ID: %i\n",msg.id);
 2d0:	bf 92       	push	r11
 2d2:	af 92       	push	r10
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	9f 93       	push	r25
 2da:	8f 93       	push	r24
 2dc:	0e 94 39 03 	call	0x672	; 0x672 <printf>
		msg.length = (MCP_read(MCP_RXB0DLC)) & (0x0F);
 2e0:	85 e6       	ldi	r24, 0x65	; 101
 2e2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP_read>
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	78 2e       	mov	r7, r24
		for (int i = 0; i< msg.length; i++)
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	a1 f0       	breq	.+40     	; 0x320 <CAN_read2+0x9e>
 2f8:	8e 01       	movw	r16, r28
 2fa:	0d 5f       	subi	r16, 0xFD	; 253
 2fc:	1f 4f       	sbci	r17, 0xFF	; 255
 2fe:	68 01       	movw	r12, r16
 300:	c8 0e       	add	r12, r24
 302:	d1 1c       	adc	r13, r1
 304:	0f 2e       	mov	r0, r31
 306:	f6 e6       	ldi	r31, 0x66	; 102
 308:	9f 2e       	mov	r9, r31
 30a:	f0 2d       	mov	r31, r0
		{
			msg.data[i] = MCP_read(MCP_RXB0D0+i);
 30c:	89 2d       	mov	r24, r9
 30e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MCP_read>
 312:	f8 01       	movw	r30, r16
 314:	81 93       	st	Z+, r24
 316:	8f 01       	movw	r16, r30
 318:	93 94       	inc	r9
		printf("abc");
		//msg.id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
		msg.id = MCP_read(MCP_RXB0SIDH);				
		printf("s ID: %i\n",msg.id);
		msg.length = (MCP_read(MCP_RXB0DLC)) & (0x0F);
		for (int i = 0; i< msg.length; i++)
 31a:	ec 15       	cp	r30, r12
 31c:	fd 05       	cpc	r31, r13
 31e:	b1 f7       	brne	.-20     	; 0x30c <CAN_read2+0x8a>
		{
			msg.data[i] = MCP_read(MCP_RXB0D0+i);
		}
		printf("r ID: %i\n",msg.id);
 320:	bf 92       	push	r11
 322:	af 92       	push	r10
 324:	22 e2       	ldi	r18, 0x22	; 34
 326:	31 e0       	ldi	r19, 0x01	; 1
 328:	3f 93       	push	r19
 32a:	2f 93       	push	r18
 32c:	0e 94 39 03 	call	0x672	; 0x672 <printf>
												
		//Clear Interrupt flag variable
		rxflag = 0;
 330:	10 92 38 01 	sts	0x0138, r1
		MCP_bitmod(MCP_CANINTF, 0xFF, MCP_RX0IF);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	6f ef       	ldi	r22, 0xFF	; 255
 338:	8c e2       	ldi	r24, 0x2C	; 44
 33a:	0e 94 c5 01 	call	0x38a	; 0x38a <MCP_bitmod>
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	02 c0       	rjmp	.+4      	; 0x34c <CAN_read2+0xca>
		//clear_bit(MCP_CANINTF, MCP_RX0IF);
	}
	else
	{
		//Message not received
		msg.id = -1;
 348:	88 24       	eor	r8, r8
 34a:	8a 94       	dec	r8
	}
	
	return msg;										//return object msg
 34c:	89 82       	std	Y+1, r8	; 0x01
 34e:	7a 82       	std	Y+2, r7	; 0x02
 350:	8a e0       	ldi	r24, 0x0A	; 10
 352:	fe 01       	movw	r30, r28
 354:	31 96       	adiw	r30, 0x01	; 1
 356:	d7 01       	movw	r26, r14
 358:	01 90       	ld	r0, Z+
 35a:	0d 92       	st	X+, r0
 35c:	8a 95       	dec	r24
 35e:	e1 f7       	brne	.-8      	; 0x358 <CAN_read2+0xd6>

}
 360:	c7 01       	movw	r24, r14
 362:	2a 96       	adiw	r28, 0x0a	; 10
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	bf 90       	pop	r11
 380:	af 90       	pop	r10
 382:	9f 90       	pop	r9
 384:	8f 90       	pop	r8
 386:	7f 90       	pop	r7
 388:	08 95       	ret

0000038a <MCP_bitmod>:
}



void MCP_bitmod(unsigned char reg, unsigned char mask, unsigned char data)
{
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	18 2f       	mov	r17, r24
 392:	d6 2f       	mov	r29, r22
 394:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);					// Chip select
 396:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	00 c0       	rjmp	.+0      	; 0x39a <MCP_bitmod+0x10>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <MCP_bitmod+0x12>
 39c:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(MCP_BITMOD);			// send command "I want to modify bit"
 39e:	85 e0       	ldi	r24, 0x05	; 5
 3a0:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <MCP_bitmod+0x1c>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <MCP_bitmod+0x1e>
 3a8:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(reg);				// In what register do you want to operate
 3aa:	81 2f       	mov	r24, r17
 3ac:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <MCP_bitmod+0x28>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <MCP_bitmod+0x2a>
 3b4:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(mask);				// What bit mask do you want to change
 3b6:	8d 2f       	mov	r24, r29
 3b8:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <MCP_bitmod+0x34>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <MCP_bitmod+0x36>
 3c0:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(data);				// What to you want to change to
 3c2:	8c 2f       	mov	r24, r28
 3c4:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <MCP_bitmod+0x40>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <MCP_bitmod+0x42>
 3cc:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);						// chip de-select
 3ce:	c4 9a       	sbi	0x18, 4	; 24
	
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	08 95       	ret

000003d8 <MCP_read>:
// Note that bitmod will change multiple bits unless one specifies which bit address to change. f.ex: bit = DLC3 & DLC2
// This will only change these two, but to use the function this way DLC3 and DCL2 must be defined first

unsigned int MCP_read(unsigned char address)
{
 3d8:	cf 93       	push	r28
 3da:	c8 2f       	mov	r28, r24
	unsigned int result;
	PORTB &= ~(1<<PB4);				// Selects can controller
 3dc:	c4 98       	cbi	0x18, 4	; 24
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <MCP_read+0x8>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <MCP_read+0xa>
 3e2:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(MCP_READ);		// Send command "I want to read MCP
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <MCP_read+0x14>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <MCP_read+0x16>
 3ee:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(address);		// Address we want to read
 3f0:	8c 2f       	mov	r24, r28
 3f2:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <MCP_read+0x20>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <MCP_read+0x22>
 3fa:	00 00       	nop
	_delay_us(1);
	result = SPI_tranciever(0xFF);	// Save What we read in result
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 402:	00 c0       	rjmp	.+0      	; 0x404 <MCP_read+0x2c>
 404:	00 c0       	rjmp	.+0      	; 0x406 <MCP_read+0x2e>
 406:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);					// De-selects can controller
 408:	c4 9a       	sbi	0x18, 4	; 24
	return result;					// Return what we read
}
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <MCP_write>:

void MCP_write(unsigned char address, unsigned int data)
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	d8 2f       	mov	r29, r24
 416:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);	
 418:	c4 98       	cbi	0x18, 4	; 24
 41a:	00 c0       	rjmp	.+0      	; 0x41c <MCP_write+0xc>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <MCP_write+0xe>
 41e:	00 00       	nop
	_delay_us(1);				
	SPI_tranciever(MCP_WRITE);		// Send command "I want to write"
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 426:	00 c0       	rjmp	.+0      	; 0x428 <MCP_write+0x18>
 428:	00 c0       	rjmp	.+0      	; 0x42a <MCP_write+0x1a>
 42a:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(address);		// Where we want to write to
 42c:	8d 2f       	mov	r24, r29
 42e:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 432:	00 c0       	rjmp	.+0      	; 0x434 <MCP_write+0x24>
 434:	00 c0       	rjmp	.+0      	; 0x436 <MCP_write+0x26>
 436:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(data);			// What we want to write
 438:	8c 2f       	mov	r24, r28
 43a:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <MCP_write+0x30>
 440:	00 c0       	rjmp	.+0      	; 0x442 <MCP_write+0x32>
 442:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);
 444:	c4 9a       	sbi	0x18, 4	; 24
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <MCP_reset>:

void MCP_reset()
{
	PORTB &= ~(1<<PB4);	
 44c:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RESET);		// Send command "I want to reset MCP"
 44e:	80 ec       	ldi	r24, 0xC0	; 192
 450:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
	PORTB |=(1<<PB4);
 454:	c4 9a       	sbi	0x18, 4	; 24
 456:	08 95       	ret

00000458 <MCP_init>:
#include <avr/io.h>
#include <avr/delay.h>
void MCP_init()
{
	// Makes sure registers are clean and MCP in control mode
	SPI_MasterInit();
 458:	0e 94 c3 02 	call	0x586	; 0x586 <SPI_MasterInit>
	CAN_init();
 45c:	0e 94 c8 00 	call	0x190	; 0x190 <CAN_init>
	MCP_reset();
 460:	0e 94 26 02 	call	0x44c	; 0x44c <MCP_reset>
 464:	08 95       	ret

00000466 <MCP_request>:
	PORTB |=(1<<PB4);
}

void MCP_request()
{
	PORTB &= ~(1<<PB4);
 466:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RTS_ALL);	// Send command "Request to send for all ports" (TX0, TX1 and TX2)
 468:	87 e8       	ldi	r24, 0x87	; 135
 46a:	0e 94 cc 02 	call	0x598	; 0x598 <SPI_tranciever>
	PORTB |=(1<<PB4);
 46e:	c4 9a       	sbi	0x18, 4	; 24
 470:	08 95       	ret

00000472 <init_OLED>:
volatile char *write_d = (char *) 0x1200; 
char Name[3];

void init_OLED()
{
	MCUCR |= (1<<SRE);
 472:	85 b7       	in	r24, 0x35	; 53
 474:	80 68       	ori	r24, 0x80	; 128
 476:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 478:	80 b7       	in	r24, 0x30	; 48
 47a:	80 62       	ori	r24, 0x20	; 32
 47c:	80 bf       	out	0x30, r24	; 48
	*write_c = (0xae);        //  display  off
 47e:	e0 91 06 01 	lds	r30, 0x0106
 482:	f0 91 07 01 	lds	r31, 0x0107
 486:	8e ea       	ldi	r24, 0xAE	; 174
 488:	80 83       	st	Z, r24
	*write_c = (0xa1);        //segment  remap
 48a:	e0 91 06 01 	lds	r30, 0x0106
 48e:	f0 91 07 01 	lds	r31, 0x0107
 492:	81 ea       	ldi	r24, 0xA1	; 161
 494:	80 83       	st	Z, r24
	*write_c = (0xda);        //common  pads  hardware:  alternative
 496:	e0 91 06 01 	lds	r30, 0x0106
 49a:	f0 91 07 01 	lds	r31, 0x0107
 49e:	8a ed       	ldi	r24, 0xDA	; 218
 4a0:	80 83       	st	Z, r24
	*write_c = (0x12);
 4a2:	e0 91 06 01 	lds	r30, 0x0106
 4a6:	f0 91 07 01 	lds	r31, 0x0107
 4aa:	82 e1       	ldi	r24, 0x12	; 18
 4ac:	80 83       	st	Z, r24
	*write_c = (0xc8);        //common output scan direction:com63~com0
 4ae:	e0 91 06 01 	lds	r30, 0x0106
 4b2:	f0 91 07 01 	lds	r31, 0x0107
 4b6:	88 ec       	ldi	r24, 0xC8	; 200
 4b8:	80 83       	st	Z, r24
	*write_c = (0xa8);        //multiplex  ration  mode:63
 4ba:	e0 91 06 01 	lds	r30, 0x0106
 4be:	f0 91 07 01 	lds	r31, 0x0107
 4c2:	88 ea       	ldi	r24, 0xA8	; 168
 4c4:	80 83       	st	Z, r24
	*write_c = (0x3f);
 4c6:	e0 91 06 01 	lds	r30, 0x0106
 4ca:	f0 91 07 01 	lds	r31, 0x0107
 4ce:	8f e3       	ldi	r24, 0x3F	; 63
 4d0:	80 83       	st	Z, r24
	*write_c = (0xd5);        //display divide ratio/osc. freq. mode
 4d2:	e0 91 06 01 	lds	r30, 0x0106
 4d6:	f0 91 07 01 	lds	r31, 0x0107
 4da:	85 ed       	ldi	r24, 0xD5	; 213
 4dc:	80 83       	st	Z, r24
	*write_c = (0x80);
 4de:	e0 91 06 01 	lds	r30, 0x0106
 4e2:	f0 91 07 01 	lds	r31, 0x0107
 4e6:	80 e8       	ldi	r24, 0x80	; 128
 4e8:	80 83       	st	Z, r24
	*write_c = (0x81);        //contrast  control
 4ea:	e0 91 06 01 	lds	r30, 0x0106
 4ee:	f0 91 07 01 	lds	r31, 0x0107
 4f2:	81 e8       	ldi	r24, 0x81	; 129
 4f4:	80 83       	st	Z, r24
	*write_c = (0x50);
 4f6:	e0 91 06 01 	lds	r30, 0x0106
 4fa:	f0 91 07 01 	lds	r31, 0x0107
 4fe:	80 e5       	ldi	r24, 0x50	; 80
 500:	80 83       	st	Z, r24
	*write_c = (0xd9);        //set  pre-charge  period
 502:	e0 91 06 01 	lds	r30, 0x0106
 506:	f0 91 07 01 	lds	r31, 0x0107
 50a:	89 ed       	ldi	r24, 0xD9	; 217
 50c:	80 83       	st	Z, r24
	*write_c = (0x21);
 50e:	e0 91 06 01 	lds	r30, 0x0106
 512:	f0 91 07 01 	lds	r31, 0x0107
 516:	81 e2       	ldi	r24, 0x21	; 33
 518:	80 83       	st	Z, r24
	*write_c = (0x20);        //Set  Memory  Addressing  Mode
 51a:	e0 91 06 01 	lds	r30, 0x0106
 51e:	f0 91 07 01 	lds	r31, 0x0107
 522:	80 e2       	ldi	r24, 0x20	; 32
 524:	80 83       	st	Z, r24
	*write_c = (0x02);
 526:	e0 91 06 01 	lds	r30, 0x0106
 52a:	f0 91 07 01 	lds	r31, 0x0107
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	80 83       	st	Z, r24
	*write_c = (0xdb);        //VCOM  deselect  level  mode
 532:	e0 91 06 01 	lds	r30, 0x0106
 536:	f0 91 07 01 	lds	r31, 0x0107
 53a:	8b ed       	ldi	r24, 0xDB	; 219
 53c:	80 83       	st	Z, r24
	*write_c = (0x30);
 53e:	e0 91 06 01 	lds	r30, 0x0106
 542:	f0 91 07 01 	lds	r31, 0x0107
 546:	80 e3       	ldi	r24, 0x30	; 48
 548:	80 83       	st	Z, r24
	*write_c = (0xad);        //master  configuration
 54a:	e0 91 06 01 	lds	r30, 0x0106
 54e:	f0 91 07 01 	lds	r31, 0x0107
 552:	8d ea       	ldi	r24, 0xAD	; 173
 554:	80 83       	st	Z, r24
	*write_c = (0x00);
 556:	e0 91 06 01 	lds	r30, 0x0106
 55a:	f0 91 07 01 	lds	r31, 0x0107
 55e:	10 82       	st	Z, r1
	*write_c = (0xa4);        //out  follows  RAM  content
 560:	e0 91 06 01 	lds	r30, 0x0106
 564:	f0 91 07 01 	lds	r31, 0x0107
 568:	84 ea       	ldi	r24, 0xA4	; 164
 56a:	80 83       	st	Z, r24
	*write_c = (0xa6);        //set  normal  display
 56c:	e0 91 06 01 	lds	r30, 0x0106
 570:	f0 91 07 01 	lds	r31, 0x0107
 574:	86 ea       	ldi	r24, 0xA6	; 166
 576:	80 83       	st	Z, r24
	*write_c = (0xaf);        //  display  on
 578:	e0 91 06 01 	lds	r30, 0x0106
 57c:	f0 91 07 01 	lds	r31, 0x0107
 580:	8f ea       	ldi	r24, 0xAF	; 175
 582:	80 83       	st	Z, r24
 584:	08 95       	ret

00000586 <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	/* Set MOSI, SS and SCK output, all others input */
	DDRB &= ~(1<<PB6);
 586:	be 98       	cbi	0x17, 6	; 23
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
 588:	87 b3       	in	r24, 0x17	; 23
 58a:	80 6b       	ori	r24, 0xB0	; 176
 58c:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB4);
 58e:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//&~(1<<DORD);
 590:	8d b1       	in	r24, 0x0d	; 13
 592:	81 65       	ori	r24, 0x51	; 81
 594:	8d b9       	out	0x0d, r24	; 13
 596:	08 95       	ret

00000598 <SPI_tranciever>:
unsigned char SPI_tranciever(unsigned char data)
{

	/* Start transmission */

	SPDR = data;
 598:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
 59a:	77 9b       	sbis	0x0e, 7	; 14
 59c:	fe cf       	rjmp	.-4      	; 0x59a <SPI_tranciever+0x2>

	//Return received data
	return SPDR;
 59e:	8f b1       	in	r24, 0x0f	; 15
}
 5a0:	08 95       	ret

000005a2 <SRAM_init>:



void SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
 5a2:	85 b7       	in	r24, 0x35	; 53
 5a4:	80 68       	ori	r24, 0x80	; 128
 5a6:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 5a8:	80 b7       	in	r24, 0x30	; 48
 5aa:	80 62       	ori	r24, 0x20	; 32
 5ac:	80 bf       	out	0x30, r24	; 48
 5ae:	08 95       	ret

000005b0 <USART_Receive>:


unsigned char USART_Receive(void)
	{
	//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 5b0:	5f 9b       	sbis	0x0b, 7	; 11
 5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <USART_Receive>
	
	//Get and return received data from buffer
	return UDR0;
 5b4:	8c b1       	in	r24, 0x0c	; 12
	}
 5b6:	08 95       	ret

000005b8 <USART_Transmit>:

void USART_Transmit( unsigned char data )
	{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
 5b8:	5d 9b       	sbis	0x0b, 5	; 11
 5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 5bc:	8c b9       	out	0x0c, r24	; 12
 5be:	08 95       	ret

000005c0 <UartInit>:

	
//}
void UartInit(){
	//Set Baud rate 9600
	UBRR0H = (unsigned char)(MYUBRR>>8);	// Setter de 8 mest signifikante bitene
 5c0:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBRR);	// Setter de 8 minst signifikante bitene
 5c2:	8f e1       	ldi	r24, 0x1F	; 31
 5c4:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 5c6:	88 e1       	ldi	r24, 0x18	; 24
 5c8:	8a b9       	out	0x0a, r24	; 10
	// 8N2
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 5ca:	8e e8       	ldi	r24, 0x8E	; 142
 5cc:	80 bd       	out	0x20, r24	; 32
	fdevopen(&USART_Transmit, &USART_Receive);
 5ce:	68 ed       	ldi	r22, 0xD8	; 216
 5d0:	72 e0       	ldi	r23, 0x02	; 2
 5d2:	8c ed       	ldi	r24, 0xDC	; 220
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <fdevopen>
 5da:	08 95       	ret

000005dc <fdevopen>:
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	ec 01       	movw	r28, r24
 5e6:	8b 01       	movw	r16, r22
 5e8:	00 97       	sbiw	r24, 0x00	; 0
 5ea:	31 f4       	brne	.+12     	; 0x5f8 <fdevopen+0x1c>
 5ec:	61 15       	cp	r22, r1
 5ee:	71 05       	cpc	r23, r1
 5f0:	19 f4       	brne	.+6      	; 0x5f8 <fdevopen+0x1c>
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	38 c0       	rjmp	.+112    	; 0x668 <fdevopen+0x8c>
 5f8:	6e e0       	ldi	r22, 0x0E	; 14
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 26 05 	call	0xa4c	; 0xa4c <calloc>
 604:	fc 01       	movw	r30, r24
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	a1 f3       	breq	.-24     	; 0x5f2 <fdevopen+0x16>
 60a:	80 e8       	ldi	r24, 0x80	; 128
 60c:	83 83       	std	Z+3, r24	; 0x03
 60e:	01 15       	cp	r16, r1
 610:	11 05       	cpc	r17, r1
 612:	71 f0       	breq	.+28     	; 0x630 <fdevopen+0x54>
 614:	13 87       	std	Z+11, r17	; 0x0b
 616:	02 87       	std	Z+10, r16	; 0x0a
 618:	81 e8       	ldi	r24, 0x81	; 129
 61a:	83 83       	std	Z+3, r24	; 0x03
 61c:	80 91 39 01 	lds	r24, 0x0139
 620:	90 91 3a 01 	lds	r25, 0x013A
 624:	89 2b       	or	r24, r25
 626:	21 f4       	brne	.+8      	; 0x630 <fdevopen+0x54>
 628:	f0 93 3a 01 	sts	0x013A, r31
 62c:	e0 93 39 01 	sts	0x0139, r30
 630:	20 97       	sbiw	r28, 0x00	; 0
 632:	c9 f0       	breq	.+50     	; 0x666 <fdevopen+0x8a>
 634:	d1 87       	std	Z+9, r29	; 0x09
 636:	c0 87       	std	Z+8, r28	; 0x08
 638:	83 81       	ldd	r24, Z+3	; 0x03
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	83 83       	std	Z+3, r24	; 0x03
 63e:	80 91 3b 01 	lds	r24, 0x013B
 642:	90 91 3c 01 	lds	r25, 0x013C
 646:	89 2b       	or	r24, r25
 648:	71 f4       	brne	.+28     	; 0x666 <fdevopen+0x8a>
 64a:	f0 93 3c 01 	sts	0x013C, r31
 64e:	e0 93 3b 01 	sts	0x013B, r30
 652:	80 91 3d 01 	lds	r24, 0x013D
 656:	90 91 3e 01 	lds	r25, 0x013E
 65a:	89 2b       	or	r24, r25
 65c:	21 f4       	brne	.+8      	; 0x666 <fdevopen+0x8a>
 65e:	f0 93 3e 01 	sts	0x013E, r31
 662:	e0 93 3d 01 	sts	0x013D, r30
 666:	cf 01       	movw	r24, r30
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	08 95       	ret

00000672 <printf>:
 672:	a0 e0       	ldi	r26, 0x00	; 0
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ef e3       	ldi	r30, 0x3F	; 63
 678:	f3 e0       	ldi	r31, 0x03	; 3
 67a:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__prologue_saves__+0x20>
 67e:	fe 01       	movw	r30, r28
 680:	35 96       	adiw	r30, 0x05	; 5
 682:	61 91       	ld	r22, Z+
 684:	71 91       	ld	r23, Z+
 686:	af 01       	movw	r20, r30
 688:	80 91 3b 01 	lds	r24, 0x013B
 68c:	90 91 3c 01 	lds	r25, 0x013C
 690:	0e 94 54 03 	call	0x6a8	; 0x6a8 <vfprintf>
 694:	e2 e0       	ldi	r30, 0x02	; 2
 696:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__epilogue_restores__+0x20>

0000069a <putchar>:
 69a:	60 91 3b 01 	lds	r22, 0x013B
 69e:	70 91 3c 01 	lds	r23, 0x013C
 6a2:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 6a6:	08 95       	ret

000006a8 <vfprintf>:
 6a8:	ac e0       	ldi	r26, 0x0C	; 12
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	ea e5       	ldi	r30, 0x5A	; 90
 6ae:	f3 e0       	ldi	r31, 0x03	; 3
 6b0:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__prologue_saves__>
 6b4:	7c 01       	movw	r14, r24
 6b6:	6b 01       	movw	r12, r22
 6b8:	8a 01       	movw	r16, r20
 6ba:	fc 01       	movw	r30, r24
 6bc:	17 82       	std	Z+7, r1	; 0x07
 6be:	16 82       	std	Z+6, r1	; 0x06
 6c0:	83 81       	ldd	r24, Z+3	; 0x03
 6c2:	81 ff       	sbrs	r24, 1
 6c4:	bd c1       	rjmp	.+890    	; 0xa40 <vfprintf+0x398>
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	4c 01       	movw	r8, r24
 6cc:	f7 01       	movw	r30, r14
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	f6 01       	movw	r30, r12
 6d2:	93 fd       	sbrc	r25, 3
 6d4:	85 91       	lpm	r24, Z+
 6d6:	93 ff       	sbrs	r25, 3
 6d8:	81 91       	ld	r24, Z+
 6da:	6f 01       	movw	r12, r30
 6dc:	88 23       	and	r24, r24
 6de:	09 f4       	brne	.+2      	; 0x6e2 <vfprintf+0x3a>
 6e0:	ab c1       	rjmp	.+854    	; 0xa38 <vfprintf+0x390>
 6e2:	85 32       	cpi	r24, 0x25	; 37
 6e4:	39 f4       	brne	.+14     	; 0x6f4 <vfprintf+0x4c>
 6e6:	93 fd       	sbrc	r25, 3
 6e8:	85 91       	lpm	r24, Z+
 6ea:	93 ff       	sbrs	r25, 3
 6ec:	81 91       	ld	r24, Z+
 6ee:	6f 01       	movw	r12, r30
 6f0:	85 32       	cpi	r24, 0x25	; 37
 6f2:	29 f4       	brne	.+10     	; 0x6fe <vfprintf+0x56>
 6f4:	b7 01       	movw	r22, r14
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 6fc:	e7 cf       	rjmp	.-50     	; 0x6cc <vfprintf+0x24>
 6fe:	51 2c       	mov	r5, r1
 700:	31 2c       	mov	r3, r1
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	20 32       	cpi	r18, 0x20	; 32
 706:	a0 f4       	brcc	.+40     	; 0x730 <vfprintf+0x88>
 708:	8b 32       	cpi	r24, 0x2B	; 43
 70a:	69 f0       	breq	.+26     	; 0x726 <vfprintf+0x7e>
 70c:	30 f4       	brcc	.+12     	; 0x71a <vfprintf+0x72>
 70e:	80 32       	cpi	r24, 0x20	; 32
 710:	59 f0       	breq	.+22     	; 0x728 <vfprintf+0x80>
 712:	83 32       	cpi	r24, 0x23	; 35
 714:	69 f4       	brne	.+26     	; 0x730 <vfprintf+0x88>
 716:	20 61       	ori	r18, 0x10	; 16
 718:	2c c0       	rjmp	.+88     	; 0x772 <vfprintf+0xca>
 71a:	8d 32       	cpi	r24, 0x2D	; 45
 71c:	39 f0       	breq	.+14     	; 0x72c <vfprintf+0x84>
 71e:	80 33       	cpi	r24, 0x30	; 48
 720:	39 f4       	brne	.+14     	; 0x730 <vfprintf+0x88>
 722:	21 60       	ori	r18, 0x01	; 1
 724:	26 c0       	rjmp	.+76     	; 0x772 <vfprintf+0xca>
 726:	22 60       	ori	r18, 0x02	; 2
 728:	24 60       	ori	r18, 0x04	; 4
 72a:	23 c0       	rjmp	.+70     	; 0x772 <vfprintf+0xca>
 72c:	28 60       	ori	r18, 0x08	; 8
 72e:	21 c0       	rjmp	.+66     	; 0x772 <vfprintf+0xca>
 730:	27 fd       	sbrc	r18, 7
 732:	27 c0       	rjmp	.+78     	; 0x782 <vfprintf+0xda>
 734:	30 ed       	ldi	r19, 0xD0	; 208
 736:	38 0f       	add	r19, r24
 738:	3a 30       	cpi	r19, 0x0A	; 10
 73a:	78 f4       	brcc	.+30     	; 0x75a <vfprintf+0xb2>
 73c:	26 ff       	sbrs	r18, 6
 73e:	06 c0       	rjmp	.+12     	; 0x74c <vfprintf+0xa4>
 740:	fa e0       	ldi	r31, 0x0A	; 10
 742:	5f 9e       	mul	r5, r31
 744:	30 0d       	add	r19, r0
 746:	11 24       	eor	r1, r1
 748:	53 2e       	mov	r5, r19
 74a:	13 c0       	rjmp	.+38     	; 0x772 <vfprintf+0xca>
 74c:	8a e0       	ldi	r24, 0x0A	; 10
 74e:	38 9e       	mul	r3, r24
 750:	30 0d       	add	r19, r0
 752:	11 24       	eor	r1, r1
 754:	33 2e       	mov	r3, r19
 756:	20 62       	ori	r18, 0x20	; 32
 758:	0c c0       	rjmp	.+24     	; 0x772 <vfprintf+0xca>
 75a:	8e 32       	cpi	r24, 0x2E	; 46
 75c:	21 f4       	brne	.+8      	; 0x766 <vfprintf+0xbe>
 75e:	26 fd       	sbrc	r18, 6
 760:	6b c1       	rjmp	.+726    	; 0xa38 <vfprintf+0x390>
 762:	20 64       	ori	r18, 0x40	; 64
 764:	06 c0       	rjmp	.+12     	; 0x772 <vfprintf+0xca>
 766:	8c 36       	cpi	r24, 0x6C	; 108
 768:	11 f4       	brne	.+4      	; 0x76e <vfprintf+0xc6>
 76a:	20 68       	ori	r18, 0x80	; 128
 76c:	02 c0       	rjmp	.+4      	; 0x772 <vfprintf+0xca>
 76e:	88 36       	cpi	r24, 0x68	; 104
 770:	41 f4       	brne	.+16     	; 0x782 <vfprintf+0xda>
 772:	f6 01       	movw	r30, r12
 774:	93 fd       	sbrc	r25, 3
 776:	85 91       	lpm	r24, Z+
 778:	93 ff       	sbrs	r25, 3
 77a:	81 91       	ld	r24, Z+
 77c:	6f 01       	movw	r12, r30
 77e:	81 11       	cpse	r24, r1
 780:	c1 cf       	rjmp	.-126    	; 0x704 <vfprintf+0x5c>
 782:	98 2f       	mov	r25, r24
 784:	9f 7d       	andi	r25, 0xDF	; 223
 786:	95 54       	subi	r25, 0x45	; 69
 788:	93 30       	cpi	r25, 0x03	; 3
 78a:	28 f4       	brcc	.+10     	; 0x796 <vfprintf+0xee>
 78c:	0c 5f       	subi	r16, 0xFC	; 252
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	ff e3       	ldi	r31, 0x3F	; 63
 792:	f9 83       	std	Y+1, r31	; 0x01
 794:	0d c0       	rjmp	.+26     	; 0x7b0 <vfprintf+0x108>
 796:	83 36       	cpi	r24, 0x63	; 99
 798:	31 f0       	breq	.+12     	; 0x7a6 <vfprintf+0xfe>
 79a:	83 37       	cpi	r24, 0x73	; 115
 79c:	71 f0       	breq	.+28     	; 0x7ba <vfprintf+0x112>
 79e:	83 35       	cpi	r24, 0x53	; 83
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <vfprintf+0xfc>
 7a2:	5b c0       	rjmp	.+182    	; 0x85a <vfprintf+0x1b2>
 7a4:	22 c0       	rjmp	.+68     	; 0x7ea <vfprintf+0x142>
 7a6:	f8 01       	movw	r30, r16
 7a8:	80 81       	ld	r24, Z
 7aa:	89 83       	std	Y+1, r24	; 0x01
 7ac:	0e 5f       	subi	r16, 0xFE	; 254
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	44 24       	eor	r4, r4
 7b2:	43 94       	inc	r4
 7b4:	51 2c       	mov	r5, r1
 7b6:	54 01       	movw	r10, r8
 7b8:	15 c0       	rjmp	.+42     	; 0x7e4 <vfprintf+0x13c>
 7ba:	38 01       	movw	r6, r16
 7bc:	f2 e0       	ldi	r31, 0x02	; 2
 7be:	6f 0e       	add	r6, r31
 7c0:	71 1c       	adc	r7, r1
 7c2:	f8 01       	movw	r30, r16
 7c4:	a0 80       	ld	r10, Z
 7c6:	b1 80       	ldd	r11, Z+1	; 0x01
 7c8:	26 ff       	sbrs	r18, 6
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <vfprintf+0x12a>
 7cc:	65 2d       	mov	r22, r5
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <vfprintf+0x12e>
 7d2:	6f ef       	ldi	r22, 0xFF	; 255
 7d4:	7f ef       	ldi	r23, 0xFF	; 255
 7d6:	c5 01       	movw	r24, r10
 7d8:	2c 87       	std	Y+12, r18	; 0x0c
 7da:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <strnlen>
 7de:	2c 01       	movw	r4, r24
 7e0:	83 01       	movw	r16, r6
 7e2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7e4:	2f 77       	andi	r18, 0x7F	; 127
 7e6:	22 2e       	mov	r2, r18
 7e8:	17 c0       	rjmp	.+46     	; 0x818 <vfprintf+0x170>
 7ea:	38 01       	movw	r6, r16
 7ec:	f2 e0       	ldi	r31, 0x02	; 2
 7ee:	6f 0e       	add	r6, r31
 7f0:	71 1c       	adc	r7, r1
 7f2:	f8 01       	movw	r30, r16
 7f4:	a0 80       	ld	r10, Z
 7f6:	b1 80       	ldd	r11, Z+1	; 0x01
 7f8:	26 ff       	sbrs	r18, 6
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <vfprintf+0x15a>
 7fc:	65 2d       	mov	r22, r5
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <vfprintf+0x15e>
 802:	6f ef       	ldi	r22, 0xFF	; 255
 804:	7f ef       	ldi	r23, 0xFF	; 255
 806:	c5 01       	movw	r24, r10
 808:	2c 87       	std	Y+12, r18	; 0x0c
 80a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <strnlen_P>
 80e:	2c 01       	movw	r4, r24
 810:	2c 85       	ldd	r18, Y+12	; 0x0c
 812:	20 68       	ori	r18, 0x80	; 128
 814:	22 2e       	mov	r2, r18
 816:	83 01       	movw	r16, r6
 818:	23 fc       	sbrc	r2, 3
 81a:	1b c0       	rjmp	.+54     	; 0x852 <vfprintf+0x1aa>
 81c:	83 2d       	mov	r24, r3
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	48 16       	cp	r4, r24
 822:	59 06       	cpc	r5, r25
 824:	b0 f4       	brcc	.+44     	; 0x852 <vfprintf+0x1aa>
 826:	b7 01       	movw	r22, r14
 828:	80 e2       	ldi	r24, 0x20	; 32
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 830:	3a 94       	dec	r3
 832:	f4 cf       	rjmp	.-24     	; 0x81c <vfprintf+0x174>
 834:	f5 01       	movw	r30, r10
 836:	27 fc       	sbrc	r2, 7
 838:	85 91       	lpm	r24, Z+
 83a:	27 fe       	sbrs	r2, 7
 83c:	81 91       	ld	r24, Z+
 83e:	5f 01       	movw	r10, r30
 840:	b7 01       	movw	r22, r14
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 848:	31 10       	cpse	r3, r1
 84a:	3a 94       	dec	r3
 84c:	f1 e0       	ldi	r31, 0x01	; 1
 84e:	4f 1a       	sub	r4, r31
 850:	51 08       	sbc	r5, r1
 852:	41 14       	cp	r4, r1
 854:	51 04       	cpc	r5, r1
 856:	71 f7       	brne	.-36     	; 0x834 <vfprintf+0x18c>
 858:	e5 c0       	rjmp	.+458    	; 0xa24 <vfprintf+0x37c>
 85a:	84 36       	cpi	r24, 0x64	; 100
 85c:	11 f0       	breq	.+4      	; 0x862 <vfprintf+0x1ba>
 85e:	89 36       	cpi	r24, 0x69	; 105
 860:	39 f5       	brne	.+78     	; 0x8b0 <vfprintf+0x208>
 862:	f8 01       	movw	r30, r16
 864:	27 ff       	sbrs	r18, 7
 866:	07 c0       	rjmp	.+14     	; 0x876 <vfprintf+0x1ce>
 868:	60 81       	ld	r22, Z
 86a:	71 81       	ldd	r23, Z+1	; 0x01
 86c:	82 81       	ldd	r24, Z+2	; 0x02
 86e:	93 81       	ldd	r25, Z+3	; 0x03
 870:	0c 5f       	subi	r16, 0xFC	; 252
 872:	1f 4f       	sbci	r17, 0xFF	; 255
 874:	08 c0       	rjmp	.+16     	; 0x886 <vfprintf+0x1de>
 876:	60 81       	ld	r22, Z
 878:	71 81       	ldd	r23, Z+1	; 0x01
 87a:	88 27       	eor	r24, r24
 87c:	77 fd       	sbrc	r23, 7
 87e:	80 95       	com	r24
 880:	98 2f       	mov	r25, r24
 882:	0e 5f       	subi	r16, 0xFE	; 254
 884:	1f 4f       	sbci	r17, 0xFF	; 255
 886:	2f 76       	andi	r18, 0x6F	; 111
 888:	b2 2e       	mov	r11, r18
 88a:	97 ff       	sbrs	r25, 7
 88c:	09 c0       	rjmp	.+18     	; 0x8a0 <vfprintf+0x1f8>
 88e:	90 95       	com	r25
 890:	80 95       	com	r24
 892:	70 95       	com	r23
 894:	61 95       	neg	r22
 896:	7f 4f       	sbci	r23, 0xFF	; 255
 898:	8f 4f       	sbci	r24, 0xFF	; 255
 89a:	9f 4f       	sbci	r25, 0xFF	; 255
 89c:	20 68       	ori	r18, 0x80	; 128
 89e:	b2 2e       	mov	r11, r18
 8a0:	2a e0       	ldi	r18, 0x0A	; 10
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	a4 01       	movw	r20, r8
 8a6:	0e 94 b8 06 	call	0xd70	; 0xd70 <__ultoa_invert>
 8aa:	a8 2e       	mov	r10, r24
 8ac:	a8 18       	sub	r10, r8
 8ae:	44 c0       	rjmp	.+136    	; 0x938 <vfprintf+0x290>
 8b0:	85 37       	cpi	r24, 0x75	; 117
 8b2:	29 f4       	brne	.+10     	; 0x8be <vfprintf+0x216>
 8b4:	2f 7e       	andi	r18, 0xEF	; 239
 8b6:	b2 2e       	mov	r11, r18
 8b8:	2a e0       	ldi	r18, 0x0A	; 10
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	25 c0       	rjmp	.+74     	; 0x908 <vfprintf+0x260>
 8be:	f2 2f       	mov	r31, r18
 8c0:	f9 7f       	andi	r31, 0xF9	; 249
 8c2:	bf 2e       	mov	r11, r31
 8c4:	8f 36       	cpi	r24, 0x6F	; 111
 8c6:	c1 f0       	breq	.+48     	; 0x8f8 <vfprintf+0x250>
 8c8:	18 f4       	brcc	.+6      	; 0x8d0 <vfprintf+0x228>
 8ca:	88 35       	cpi	r24, 0x58	; 88
 8cc:	79 f0       	breq	.+30     	; 0x8ec <vfprintf+0x244>
 8ce:	b4 c0       	rjmp	.+360    	; 0xa38 <vfprintf+0x390>
 8d0:	80 37       	cpi	r24, 0x70	; 112
 8d2:	19 f0       	breq	.+6      	; 0x8da <vfprintf+0x232>
 8d4:	88 37       	cpi	r24, 0x78	; 120
 8d6:	21 f0       	breq	.+8      	; 0x8e0 <vfprintf+0x238>
 8d8:	af c0       	rjmp	.+350    	; 0xa38 <vfprintf+0x390>
 8da:	2f 2f       	mov	r18, r31
 8dc:	20 61       	ori	r18, 0x10	; 16
 8de:	b2 2e       	mov	r11, r18
 8e0:	b4 fe       	sbrs	r11, 4
 8e2:	0d c0       	rjmp	.+26     	; 0x8fe <vfprintf+0x256>
 8e4:	8b 2d       	mov	r24, r11
 8e6:	84 60       	ori	r24, 0x04	; 4
 8e8:	b8 2e       	mov	r11, r24
 8ea:	09 c0       	rjmp	.+18     	; 0x8fe <vfprintf+0x256>
 8ec:	24 ff       	sbrs	r18, 4
 8ee:	0a c0       	rjmp	.+20     	; 0x904 <vfprintf+0x25c>
 8f0:	9f 2f       	mov	r25, r31
 8f2:	96 60       	ori	r25, 0x06	; 6
 8f4:	b9 2e       	mov	r11, r25
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <vfprintf+0x25c>
 8f8:	28 e0       	ldi	r18, 0x08	; 8
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	05 c0       	rjmp	.+10     	; 0x908 <vfprintf+0x260>
 8fe:	20 e1       	ldi	r18, 0x10	; 16
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	02 c0       	rjmp	.+4      	; 0x908 <vfprintf+0x260>
 904:	20 e1       	ldi	r18, 0x10	; 16
 906:	32 e0       	ldi	r19, 0x02	; 2
 908:	f8 01       	movw	r30, r16
 90a:	b7 fe       	sbrs	r11, 7
 90c:	07 c0       	rjmp	.+14     	; 0x91c <vfprintf+0x274>
 90e:	60 81       	ld	r22, Z
 910:	71 81       	ldd	r23, Z+1	; 0x01
 912:	82 81       	ldd	r24, Z+2	; 0x02
 914:	93 81       	ldd	r25, Z+3	; 0x03
 916:	0c 5f       	subi	r16, 0xFC	; 252
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	06 c0       	rjmp	.+12     	; 0x928 <vfprintf+0x280>
 91c:	60 81       	ld	r22, Z
 91e:	71 81       	ldd	r23, Z+1	; 0x01
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 5f       	subi	r16, 0xFE	; 254
 926:	1f 4f       	sbci	r17, 0xFF	; 255
 928:	a4 01       	movw	r20, r8
 92a:	0e 94 b8 06 	call	0xd70	; 0xd70 <__ultoa_invert>
 92e:	a8 2e       	mov	r10, r24
 930:	a8 18       	sub	r10, r8
 932:	fb 2d       	mov	r31, r11
 934:	ff 77       	andi	r31, 0x7F	; 127
 936:	bf 2e       	mov	r11, r31
 938:	b6 fe       	sbrs	r11, 6
 93a:	0b c0       	rjmp	.+22     	; 0x952 <vfprintf+0x2aa>
 93c:	2b 2d       	mov	r18, r11
 93e:	2e 7f       	andi	r18, 0xFE	; 254
 940:	a5 14       	cp	r10, r5
 942:	50 f4       	brcc	.+20     	; 0x958 <vfprintf+0x2b0>
 944:	b4 fe       	sbrs	r11, 4
 946:	0a c0       	rjmp	.+20     	; 0x95c <vfprintf+0x2b4>
 948:	b2 fc       	sbrc	r11, 2
 94a:	08 c0       	rjmp	.+16     	; 0x95c <vfprintf+0x2b4>
 94c:	2b 2d       	mov	r18, r11
 94e:	2e 7e       	andi	r18, 0xEE	; 238
 950:	05 c0       	rjmp	.+10     	; 0x95c <vfprintf+0x2b4>
 952:	7a 2c       	mov	r7, r10
 954:	2b 2d       	mov	r18, r11
 956:	03 c0       	rjmp	.+6      	; 0x95e <vfprintf+0x2b6>
 958:	7a 2c       	mov	r7, r10
 95a:	01 c0       	rjmp	.+2      	; 0x95e <vfprintf+0x2b6>
 95c:	75 2c       	mov	r7, r5
 95e:	24 ff       	sbrs	r18, 4
 960:	0d c0       	rjmp	.+26     	; 0x97c <vfprintf+0x2d4>
 962:	fe 01       	movw	r30, r28
 964:	ea 0d       	add	r30, r10
 966:	f1 1d       	adc	r31, r1
 968:	80 81       	ld	r24, Z
 96a:	80 33       	cpi	r24, 0x30	; 48
 96c:	11 f4       	brne	.+4      	; 0x972 <vfprintf+0x2ca>
 96e:	29 7e       	andi	r18, 0xE9	; 233
 970:	09 c0       	rjmp	.+18     	; 0x984 <vfprintf+0x2dc>
 972:	22 ff       	sbrs	r18, 2
 974:	06 c0       	rjmp	.+12     	; 0x982 <vfprintf+0x2da>
 976:	73 94       	inc	r7
 978:	73 94       	inc	r7
 97a:	04 c0       	rjmp	.+8      	; 0x984 <vfprintf+0x2dc>
 97c:	82 2f       	mov	r24, r18
 97e:	86 78       	andi	r24, 0x86	; 134
 980:	09 f0       	breq	.+2      	; 0x984 <vfprintf+0x2dc>
 982:	73 94       	inc	r7
 984:	23 fd       	sbrc	r18, 3
 986:	13 c0       	rjmp	.+38     	; 0x9ae <vfprintf+0x306>
 988:	20 ff       	sbrs	r18, 0
 98a:	06 c0       	rjmp	.+12     	; 0x998 <vfprintf+0x2f0>
 98c:	5a 2c       	mov	r5, r10
 98e:	73 14       	cp	r7, r3
 990:	18 f4       	brcc	.+6      	; 0x998 <vfprintf+0x2f0>
 992:	53 0c       	add	r5, r3
 994:	57 18       	sub	r5, r7
 996:	73 2c       	mov	r7, r3
 998:	73 14       	cp	r7, r3
 99a:	68 f4       	brcc	.+26     	; 0x9b6 <vfprintf+0x30e>
 99c:	b7 01       	movw	r22, r14
 99e:	80 e2       	ldi	r24, 0x20	; 32
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	2c 87       	std	Y+12, r18	; 0x0c
 9a4:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 9a8:	73 94       	inc	r7
 9aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ac:	f5 cf       	rjmp	.-22     	; 0x998 <vfprintf+0x2f0>
 9ae:	73 14       	cp	r7, r3
 9b0:	10 f4       	brcc	.+4      	; 0x9b6 <vfprintf+0x30e>
 9b2:	37 18       	sub	r3, r7
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <vfprintf+0x310>
 9b6:	31 2c       	mov	r3, r1
 9b8:	24 ff       	sbrs	r18, 4
 9ba:	12 c0       	rjmp	.+36     	; 0x9e0 <vfprintf+0x338>
 9bc:	b7 01       	movw	r22, r14
 9be:	80 e3       	ldi	r24, 0x30	; 48
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	2c 87       	std	Y+12, r18	; 0x0c
 9c4:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 9c8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ca:	22 ff       	sbrs	r18, 2
 9cc:	17 c0       	rjmp	.+46     	; 0x9fc <vfprintf+0x354>
 9ce:	21 ff       	sbrs	r18, 1
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <vfprintf+0x330>
 9d2:	88 e5       	ldi	r24, 0x58	; 88
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <vfprintf+0x334>
 9d8:	88 e7       	ldi	r24, 0x78	; 120
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	b7 01       	movw	r22, r14
 9de:	0c c0       	rjmp	.+24     	; 0x9f8 <vfprintf+0x350>
 9e0:	82 2f       	mov	r24, r18
 9e2:	86 78       	andi	r24, 0x86	; 134
 9e4:	59 f0       	breq	.+22     	; 0x9fc <vfprintf+0x354>
 9e6:	21 fd       	sbrc	r18, 1
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <vfprintf+0x346>
 9ea:	80 e2       	ldi	r24, 0x20	; 32
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <vfprintf+0x348>
 9ee:	8b e2       	ldi	r24, 0x2B	; 43
 9f0:	27 fd       	sbrc	r18, 7
 9f2:	8d e2       	ldi	r24, 0x2D	; 45
 9f4:	b7 01       	movw	r22, r14
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 9fc:	a5 14       	cp	r10, r5
 9fe:	38 f4       	brcc	.+14     	; 0xa0e <vfprintf+0x366>
 a00:	b7 01       	movw	r22, r14
 a02:	80 e3       	ldi	r24, 0x30	; 48
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 a0a:	5a 94       	dec	r5
 a0c:	f7 cf       	rjmp	.-18     	; 0x9fc <vfprintf+0x354>
 a0e:	aa 94       	dec	r10
 a10:	f4 01       	movw	r30, r8
 a12:	ea 0d       	add	r30, r10
 a14:	f1 1d       	adc	r31, r1
 a16:	80 81       	ld	r24, Z
 a18:	b7 01       	movw	r22, r14
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 a20:	a1 10       	cpse	r10, r1
 a22:	f5 cf       	rjmp	.-22     	; 0xa0e <vfprintf+0x366>
 a24:	33 20       	and	r3, r3
 a26:	09 f4       	brne	.+2      	; 0xa2a <vfprintf+0x382>
 a28:	51 ce       	rjmp	.-862    	; 0x6cc <vfprintf+0x24>
 a2a:	b7 01       	movw	r22, r14
 a2c:	80 e2       	ldi	r24, 0x20	; 32
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 86 06 	call	0xd0c	; 0xd0c <fputc>
 a34:	3a 94       	dec	r3
 a36:	f6 cf       	rjmp	.-20     	; 0xa24 <vfprintf+0x37c>
 a38:	f7 01       	movw	r30, r14
 a3a:	86 81       	ldd	r24, Z+6	; 0x06
 a3c:	97 81       	ldd	r25, Z+7	; 0x07
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <vfprintf+0x39c>
 a40:	8f ef       	ldi	r24, 0xFF	; 255
 a42:	9f ef       	ldi	r25, 0xFF	; 255
 a44:	2c 96       	adiw	r28, 0x0c	; 12
 a46:	e2 e1       	ldi	r30, 0x12	; 18
 a48:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__epilogue_restores__>

00000a4c <calloc>:
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	86 9f       	mul	r24, r22
 a56:	80 01       	movw	r16, r0
 a58:	87 9f       	mul	r24, r23
 a5a:	10 0d       	add	r17, r0
 a5c:	96 9f       	mul	r25, r22
 a5e:	10 0d       	add	r17, r0
 a60:	11 24       	eor	r1, r1
 a62:	c8 01       	movw	r24, r16
 a64:	0e 94 42 05 	call	0xa84	; 0xa84 <malloc>
 a68:	ec 01       	movw	r28, r24
 a6a:	00 97       	sbiw	r24, 0x00	; 0
 a6c:	29 f0       	breq	.+10     	; 0xa78 <calloc+0x2c>
 a6e:	a8 01       	movw	r20, r16
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	0e 94 74 06 	call	0xce8	; 0xce8 <memset>
 a78:	ce 01       	movw	r24, r28
 a7a:	df 91       	pop	r29
 a7c:	cf 91       	pop	r28
 a7e:	1f 91       	pop	r17
 a80:	0f 91       	pop	r16
 a82:	08 95       	ret

00000a84 <malloc>:
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	91 05       	cpc	r25, r1
 a8c:	10 f4       	brcc	.+4      	; 0xa92 <malloc+0xe>
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	e0 91 41 01 	lds	r30, 0x0141
 a96:	f0 91 42 01 	lds	r31, 0x0142
 a9a:	20 e0       	ldi	r18, 0x00	; 0
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	a0 e0       	ldi	r26, 0x00	; 0
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	30 97       	sbiw	r30, 0x00	; 0
 aa4:	39 f1       	breq	.+78     	; 0xaf4 <malloc+0x70>
 aa6:	40 81       	ld	r20, Z
 aa8:	51 81       	ldd	r21, Z+1	; 0x01
 aaa:	48 17       	cp	r20, r24
 aac:	59 07       	cpc	r21, r25
 aae:	b8 f0       	brcs	.+46     	; 0xade <malloc+0x5a>
 ab0:	48 17       	cp	r20, r24
 ab2:	59 07       	cpc	r21, r25
 ab4:	71 f4       	brne	.+28     	; 0xad2 <malloc+0x4e>
 ab6:	82 81       	ldd	r24, Z+2	; 0x02
 ab8:	93 81       	ldd	r25, Z+3	; 0x03
 aba:	10 97       	sbiw	r26, 0x00	; 0
 abc:	29 f0       	breq	.+10     	; 0xac8 <malloc+0x44>
 abe:	13 96       	adiw	r26, 0x03	; 3
 ac0:	9c 93       	st	X, r25
 ac2:	8e 93       	st	-X, r24
 ac4:	12 97       	sbiw	r26, 0x02	; 2
 ac6:	2c c0       	rjmp	.+88     	; 0xb20 <malloc+0x9c>
 ac8:	90 93 42 01 	sts	0x0142, r25
 acc:	80 93 41 01 	sts	0x0141, r24
 ad0:	27 c0       	rjmp	.+78     	; 0xb20 <malloc+0x9c>
 ad2:	21 15       	cp	r18, r1
 ad4:	31 05       	cpc	r19, r1
 ad6:	31 f0       	breq	.+12     	; 0xae4 <malloc+0x60>
 ad8:	42 17       	cp	r20, r18
 ada:	53 07       	cpc	r21, r19
 adc:	18 f0       	brcs	.+6      	; 0xae4 <malloc+0x60>
 ade:	a9 01       	movw	r20, r18
 ae0:	db 01       	movw	r26, r22
 ae2:	01 c0       	rjmp	.+2      	; 0xae6 <malloc+0x62>
 ae4:	ef 01       	movw	r28, r30
 ae6:	9a 01       	movw	r18, r20
 ae8:	bd 01       	movw	r22, r26
 aea:	df 01       	movw	r26, r30
 aec:	02 80       	ldd	r0, Z+2	; 0x02
 aee:	f3 81       	ldd	r31, Z+3	; 0x03
 af0:	e0 2d       	mov	r30, r0
 af2:	d7 cf       	rjmp	.-82     	; 0xaa2 <malloc+0x1e>
 af4:	21 15       	cp	r18, r1
 af6:	31 05       	cpc	r19, r1
 af8:	f9 f0       	breq	.+62     	; 0xb38 <malloc+0xb4>
 afa:	28 1b       	sub	r18, r24
 afc:	39 0b       	sbc	r19, r25
 afe:	24 30       	cpi	r18, 0x04	; 4
 b00:	31 05       	cpc	r19, r1
 b02:	80 f4       	brcc	.+32     	; 0xb24 <malloc+0xa0>
 b04:	8a 81       	ldd	r24, Y+2	; 0x02
 b06:	9b 81       	ldd	r25, Y+3	; 0x03
 b08:	61 15       	cp	r22, r1
 b0a:	71 05       	cpc	r23, r1
 b0c:	21 f0       	breq	.+8      	; 0xb16 <malloc+0x92>
 b0e:	fb 01       	movw	r30, r22
 b10:	93 83       	std	Z+3, r25	; 0x03
 b12:	82 83       	std	Z+2, r24	; 0x02
 b14:	04 c0       	rjmp	.+8      	; 0xb1e <malloc+0x9a>
 b16:	90 93 42 01 	sts	0x0142, r25
 b1a:	80 93 41 01 	sts	0x0141, r24
 b1e:	fe 01       	movw	r30, r28
 b20:	32 96       	adiw	r30, 0x02	; 2
 b22:	44 c0       	rjmp	.+136    	; 0xbac <malloc+0x128>
 b24:	fe 01       	movw	r30, r28
 b26:	e2 0f       	add	r30, r18
 b28:	f3 1f       	adc	r31, r19
 b2a:	81 93       	st	Z+, r24
 b2c:	91 93       	st	Z+, r25
 b2e:	22 50       	subi	r18, 0x02	; 2
 b30:	31 09       	sbc	r19, r1
 b32:	39 83       	std	Y+1, r19	; 0x01
 b34:	28 83       	st	Y, r18
 b36:	3a c0       	rjmp	.+116    	; 0xbac <malloc+0x128>
 b38:	20 91 3f 01 	lds	r18, 0x013F
 b3c:	30 91 40 01 	lds	r19, 0x0140
 b40:	23 2b       	or	r18, r19
 b42:	41 f4       	brne	.+16     	; 0xb54 <malloc+0xd0>
 b44:	20 91 02 01 	lds	r18, 0x0102
 b48:	30 91 03 01 	lds	r19, 0x0103
 b4c:	30 93 40 01 	sts	0x0140, r19
 b50:	20 93 3f 01 	sts	0x013F, r18
 b54:	20 91 00 01 	lds	r18, 0x0100
 b58:	30 91 01 01 	lds	r19, 0x0101
 b5c:	21 15       	cp	r18, r1
 b5e:	31 05       	cpc	r19, r1
 b60:	41 f4       	brne	.+16     	; 0xb72 <malloc+0xee>
 b62:	2d b7       	in	r18, 0x3d	; 61
 b64:	3e b7       	in	r19, 0x3e	; 62
 b66:	40 91 04 01 	lds	r20, 0x0104
 b6a:	50 91 05 01 	lds	r21, 0x0105
 b6e:	24 1b       	sub	r18, r20
 b70:	35 0b       	sbc	r19, r21
 b72:	e0 91 3f 01 	lds	r30, 0x013F
 b76:	f0 91 40 01 	lds	r31, 0x0140
 b7a:	e2 17       	cp	r30, r18
 b7c:	f3 07       	cpc	r31, r19
 b7e:	a0 f4       	brcc	.+40     	; 0xba8 <malloc+0x124>
 b80:	2e 1b       	sub	r18, r30
 b82:	3f 0b       	sbc	r19, r31
 b84:	28 17       	cp	r18, r24
 b86:	39 07       	cpc	r19, r25
 b88:	78 f0       	brcs	.+30     	; 0xba8 <malloc+0x124>
 b8a:	ac 01       	movw	r20, r24
 b8c:	4e 5f       	subi	r20, 0xFE	; 254
 b8e:	5f 4f       	sbci	r21, 0xFF	; 255
 b90:	24 17       	cp	r18, r20
 b92:	35 07       	cpc	r19, r21
 b94:	48 f0       	brcs	.+18     	; 0xba8 <malloc+0x124>
 b96:	4e 0f       	add	r20, r30
 b98:	5f 1f       	adc	r21, r31
 b9a:	50 93 40 01 	sts	0x0140, r21
 b9e:	40 93 3f 01 	sts	0x013F, r20
 ba2:	81 93       	st	Z+, r24
 ba4:	91 93       	st	Z+, r25
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <malloc+0x128>
 ba8:	e0 e0       	ldi	r30, 0x00	; 0
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	cf 01       	movw	r24, r30
 bae:	df 91       	pop	r29
 bb0:	cf 91       	pop	r28
 bb2:	08 95       	ret

00000bb4 <free>:
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	00 97       	sbiw	r24, 0x00	; 0
 bba:	09 f4       	brne	.+2      	; 0xbbe <free+0xa>
 bbc:	87 c0       	rjmp	.+270    	; 0xccc <free+0x118>
 bbe:	fc 01       	movw	r30, r24
 bc0:	32 97       	sbiw	r30, 0x02	; 2
 bc2:	13 82       	std	Z+3, r1	; 0x03
 bc4:	12 82       	std	Z+2, r1	; 0x02
 bc6:	c0 91 41 01 	lds	r28, 0x0141
 bca:	d0 91 42 01 	lds	r29, 0x0142
 bce:	20 97       	sbiw	r28, 0x00	; 0
 bd0:	81 f4       	brne	.+32     	; 0xbf2 <free+0x3e>
 bd2:	20 81       	ld	r18, Z
 bd4:	31 81       	ldd	r19, Z+1	; 0x01
 bd6:	28 0f       	add	r18, r24
 bd8:	39 1f       	adc	r19, r25
 bda:	80 91 3f 01 	lds	r24, 0x013F
 bde:	90 91 40 01 	lds	r25, 0x0140
 be2:	82 17       	cp	r24, r18
 be4:	93 07       	cpc	r25, r19
 be6:	79 f5       	brne	.+94     	; 0xc46 <free+0x92>
 be8:	f0 93 40 01 	sts	0x0140, r31
 bec:	e0 93 3f 01 	sts	0x013F, r30
 bf0:	6d c0       	rjmp	.+218    	; 0xccc <free+0x118>
 bf2:	de 01       	movw	r26, r28
 bf4:	20 e0       	ldi	r18, 0x00	; 0
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	ae 17       	cp	r26, r30
 bfa:	bf 07       	cpc	r27, r31
 bfc:	50 f4       	brcc	.+20     	; 0xc12 <free+0x5e>
 bfe:	12 96       	adiw	r26, 0x02	; 2
 c00:	4d 91       	ld	r20, X+
 c02:	5c 91       	ld	r21, X
 c04:	13 97       	sbiw	r26, 0x03	; 3
 c06:	9d 01       	movw	r18, r26
 c08:	41 15       	cp	r20, r1
 c0a:	51 05       	cpc	r21, r1
 c0c:	09 f1       	breq	.+66     	; 0xc50 <free+0x9c>
 c0e:	da 01       	movw	r26, r20
 c10:	f3 cf       	rjmp	.-26     	; 0xbf8 <free+0x44>
 c12:	b3 83       	std	Z+3, r27	; 0x03
 c14:	a2 83       	std	Z+2, r26	; 0x02
 c16:	40 81       	ld	r20, Z
 c18:	51 81       	ldd	r21, Z+1	; 0x01
 c1a:	84 0f       	add	r24, r20
 c1c:	95 1f       	adc	r25, r21
 c1e:	8a 17       	cp	r24, r26
 c20:	9b 07       	cpc	r25, r27
 c22:	71 f4       	brne	.+28     	; 0xc40 <free+0x8c>
 c24:	8d 91       	ld	r24, X+
 c26:	9c 91       	ld	r25, X
 c28:	11 97       	sbiw	r26, 0x01	; 1
 c2a:	84 0f       	add	r24, r20
 c2c:	95 1f       	adc	r25, r21
 c2e:	02 96       	adiw	r24, 0x02	; 2
 c30:	91 83       	std	Z+1, r25	; 0x01
 c32:	80 83       	st	Z, r24
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	8d 91       	ld	r24, X+
 c38:	9c 91       	ld	r25, X
 c3a:	13 97       	sbiw	r26, 0x03	; 3
 c3c:	93 83       	std	Z+3, r25	; 0x03
 c3e:	82 83       	std	Z+2, r24	; 0x02
 c40:	21 15       	cp	r18, r1
 c42:	31 05       	cpc	r19, r1
 c44:	29 f4       	brne	.+10     	; 0xc50 <free+0x9c>
 c46:	f0 93 42 01 	sts	0x0142, r31
 c4a:	e0 93 41 01 	sts	0x0141, r30
 c4e:	3e c0       	rjmp	.+124    	; 0xccc <free+0x118>
 c50:	d9 01       	movw	r26, r18
 c52:	13 96       	adiw	r26, 0x03	; 3
 c54:	fc 93       	st	X, r31
 c56:	ee 93       	st	-X, r30
 c58:	12 97       	sbiw	r26, 0x02	; 2
 c5a:	4d 91       	ld	r20, X+
 c5c:	5d 91       	ld	r21, X+
 c5e:	a4 0f       	add	r26, r20
 c60:	b5 1f       	adc	r27, r21
 c62:	ea 17       	cp	r30, r26
 c64:	fb 07       	cpc	r31, r27
 c66:	79 f4       	brne	.+30     	; 0xc86 <free+0xd2>
 c68:	80 81       	ld	r24, Z
 c6a:	91 81       	ldd	r25, Z+1	; 0x01
 c6c:	84 0f       	add	r24, r20
 c6e:	95 1f       	adc	r25, r21
 c70:	02 96       	adiw	r24, 0x02	; 2
 c72:	d9 01       	movw	r26, r18
 c74:	11 96       	adiw	r26, 0x01	; 1
 c76:	9c 93       	st	X, r25
 c78:	8e 93       	st	-X, r24
 c7a:	82 81       	ldd	r24, Z+2	; 0x02
 c7c:	93 81       	ldd	r25, Z+3	; 0x03
 c7e:	13 96       	adiw	r26, 0x03	; 3
 c80:	9c 93       	st	X, r25
 c82:	8e 93       	st	-X, r24
 c84:	12 97       	sbiw	r26, 0x02	; 2
 c86:	e0 e0       	ldi	r30, 0x00	; 0
 c88:	f0 e0       	ldi	r31, 0x00	; 0
 c8a:	8a 81       	ldd	r24, Y+2	; 0x02
 c8c:	9b 81       	ldd	r25, Y+3	; 0x03
 c8e:	00 97       	sbiw	r24, 0x00	; 0
 c90:	19 f0       	breq	.+6      	; 0xc98 <free+0xe4>
 c92:	fe 01       	movw	r30, r28
 c94:	ec 01       	movw	r28, r24
 c96:	f9 cf       	rjmp	.-14     	; 0xc8a <free+0xd6>
 c98:	ce 01       	movw	r24, r28
 c9a:	02 96       	adiw	r24, 0x02	; 2
 c9c:	28 81       	ld	r18, Y
 c9e:	39 81       	ldd	r19, Y+1	; 0x01
 ca0:	82 0f       	add	r24, r18
 ca2:	93 1f       	adc	r25, r19
 ca4:	20 91 3f 01 	lds	r18, 0x013F
 ca8:	30 91 40 01 	lds	r19, 0x0140
 cac:	28 17       	cp	r18, r24
 cae:	39 07       	cpc	r19, r25
 cb0:	69 f4       	brne	.+26     	; 0xccc <free+0x118>
 cb2:	30 97       	sbiw	r30, 0x00	; 0
 cb4:	29 f4       	brne	.+10     	; 0xcc0 <free+0x10c>
 cb6:	10 92 42 01 	sts	0x0142, r1
 cba:	10 92 41 01 	sts	0x0141, r1
 cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <free+0x110>
 cc0:	13 82       	std	Z+3, r1	; 0x03
 cc2:	12 82       	std	Z+2, r1	; 0x02
 cc4:	d0 93 40 01 	sts	0x0140, r29
 cc8:	c0 93 3f 01 	sts	0x013F, r28
 ccc:	df 91       	pop	r29
 cce:	cf 91       	pop	r28
 cd0:	08 95       	ret

00000cd2 <strnlen_P>:
 cd2:	fc 01       	movw	r30, r24
 cd4:	05 90       	lpm	r0, Z+
 cd6:	61 50       	subi	r22, 0x01	; 1
 cd8:	70 40       	sbci	r23, 0x00	; 0
 cda:	01 10       	cpse	r0, r1
 cdc:	d8 f7       	brcc	.-10     	; 0xcd4 <strnlen_P+0x2>
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	8e 0f       	add	r24, r30
 ce4:	9f 1f       	adc	r25, r31
 ce6:	08 95       	ret

00000ce8 <memset>:
 ce8:	dc 01       	movw	r26, r24
 cea:	01 c0       	rjmp	.+2      	; 0xcee <memset+0x6>
 cec:	6d 93       	st	X+, r22
 cee:	41 50       	subi	r20, 0x01	; 1
 cf0:	50 40       	sbci	r21, 0x00	; 0
 cf2:	e0 f7       	brcc	.-8      	; 0xcec <memset+0x4>
 cf4:	08 95       	ret

00000cf6 <strnlen>:
 cf6:	fc 01       	movw	r30, r24
 cf8:	61 50       	subi	r22, 0x01	; 1
 cfa:	70 40       	sbci	r23, 0x00	; 0
 cfc:	01 90       	ld	r0, Z+
 cfe:	01 10       	cpse	r0, r1
 d00:	d8 f7       	brcc	.-10     	; 0xcf8 <strnlen+0x2>
 d02:	80 95       	com	r24
 d04:	90 95       	com	r25
 d06:	8e 0f       	add	r24, r30
 d08:	9f 1f       	adc	r25, r31
 d0a:	08 95       	ret

00000d0c <fputc>:
 d0c:	0f 93       	push	r16
 d0e:	1f 93       	push	r17
 d10:	cf 93       	push	r28
 d12:	df 93       	push	r29
 d14:	18 2f       	mov	r17, r24
 d16:	09 2f       	mov	r16, r25
 d18:	eb 01       	movw	r28, r22
 d1a:	8b 81       	ldd	r24, Y+3	; 0x03
 d1c:	81 fd       	sbrc	r24, 1
 d1e:	03 c0       	rjmp	.+6      	; 0xd26 <fputc+0x1a>
 d20:	8f ef       	ldi	r24, 0xFF	; 255
 d22:	9f ef       	ldi	r25, 0xFF	; 255
 d24:	20 c0       	rjmp	.+64     	; 0xd66 <fputc+0x5a>
 d26:	82 ff       	sbrs	r24, 2
 d28:	10 c0       	rjmp	.+32     	; 0xd4a <fputc+0x3e>
 d2a:	4e 81       	ldd	r20, Y+6	; 0x06
 d2c:	5f 81       	ldd	r21, Y+7	; 0x07
 d2e:	2c 81       	ldd	r18, Y+4	; 0x04
 d30:	3d 81       	ldd	r19, Y+5	; 0x05
 d32:	42 17       	cp	r20, r18
 d34:	53 07       	cpc	r21, r19
 d36:	7c f4       	brge	.+30     	; 0xd56 <fputc+0x4a>
 d38:	e8 81       	ld	r30, Y
 d3a:	f9 81       	ldd	r31, Y+1	; 0x01
 d3c:	9f 01       	movw	r18, r30
 d3e:	2f 5f       	subi	r18, 0xFF	; 255
 d40:	3f 4f       	sbci	r19, 0xFF	; 255
 d42:	39 83       	std	Y+1, r19	; 0x01
 d44:	28 83       	st	Y, r18
 d46:	10 83       	st	Z, r17
 d48:	06 c0       	rjmp	.+12     	; 0xd56 <fputc+0x4a>
 d4a:	e8 85       	ldd	r30, Y+8	; 0x08
 d4c:	f9 85       	ldd	r31, Y+9	; 0x09
 d4e:	81 2f       	mov	r24, r17
 d50:	09 95       	icall
 d52:	89 2b       	or	r24, r25
 d54:	29 f7       	brne	.-54     	; 0xd20 <fputc+0x14>
 d56:	2e 81       	ldd	r18, Y+6	; 0x06
 d58:	3f 81       	ldd	r19, Y+7	; 0x07
 d5a:	2f 5f       	subi	r18, 0xFF	; 255
 d5c:	3f 4f       	sbci	r19, 0xFF	; 255
 d5e:	3f 83       	std	Y+7, r19	; 0x07
 d60:	2e 83       	std	Y+6, r18	; 0x06
 d62:	81 2f       	mov	r24, r17
 d64:	90 2f       	mov	r25, r16
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	1f 91       	pop	r17
 d6c:	0f 91       	pop	r16
 d6e:	08 95       	ret

00000d70 <__ultoa_invert>:
 d70:	fa 01       	movw	r30, r20
 d72:	aa 27       	eor	r26, r26
 d74:	28 30       	cpi	r18, 0x08	; 8
 d76:	51 f1       	breq	.+84     	; 0xdcc <__ultoa_invert+0x5c>
 d78:	20 31       	cpi	r18, 0x10	; 16
 d7a:	81 f1       	breq	.+96     	; 0xddc <__ultoa_invert+0x6c>
 d7c:	e8 94       	clt
 d7e:	6f 93       	push	r22
 d80:	6e 7f       	andi	r22, 0xFE	; 254
 d82:	6e 5f       	subi	r22, 0xFE	; 254
 d84:	7f 4f       	sbci	r23, 0xFF	; 255
 d86:	8f 4f       	sbci	r24, 0xFF	; 255
 d88:	9f 4f       	sbci	r25, 0xFF	; 255
 d8a:	af 4f       	sbci	r26, 0xFF	; 255
 d8c:	b1 e0       	ldi	r27, 0x01	; 1
 d8e:	3e d0       	rcall	.+124    	; 0xe0c <__ultoa_invert+0x9c>
 d90:	b4 e0       	ldi	r27, 0x04	; 4
 d92:	3c d0       	rcall	.+120    	; 0xe0c <__ultoa_invert+0x9c>
 d94:	67 0f       	add	r22, r23
 d96:	78 1f       	adc	r23, r24
 d98:	89 1f       	adc	r24, r25
 d9a:	9a 1f       	adc	r25, r26
 d9c:	a1 1d       	adc	r26, r1
 d9e:	68 0f       	add	r22, r24
 da0:	79 1f       	adc	r23, r25
 da2:	8a 1f       	adc	r24, r26
 da4:	91 1d       	adc	r25, r1
 da6:	a1 1d       	adc	r26, r1
 da8:	6a 0f       	add	r22, r26
 daa:	71 1d       	adc	r23, r1
 dac:	81 1d       	adc	r24, r1
 dae:	91 1d       	adc	r25, r1
 db0:	a1 1d       	adc	r26, r1
 db2:	20 d0       	rcall	.+64     	; 0xdf4 <__ultoa_invert+0x84>
 db4:	09 f4       	brne	.+2      	; 0xdb8 <__ultoa_invert+0x48>
 db6:	68 94       	set
 db8:	3f 91       	pop	r19
 dba:	2a e0       	ldi	r18, 0x0A	; 10
 dbc:	26 9f       	mul	r18, r22
 dbe:	11 24       	eor	r1, r1
 dc0:	30 19       	sub	r19, r0
 dc2:	30 5d       	subi	r19, 0xD0	; 208
 dc4:	31 93       	st	Z+, r19
 dc6:	de f6       	brtc	.-74     	; 0xd7e <__ultoa_invert+0xe>
 dc8:	cf 01       	movw	r24, r30
 dca:	08 95       	ret
 dcc:	46 2f       	mov	r20, r22
 dce:	47 70       	andi	r20, 0x07	; 7
 dd0:	40 5d       	subi	r20, 0xD0	; 208
 dd2:	41 93       	st	Z+, r20
 dd4:	b3 e0       	ldi	r27, 0x03	; 3
 dd6:	0f d0       	rcall	.+30     	; 0xdf6 <__ultoa_invert+0x86>
 dd8:	c9 f7       	brne	.-14     	; 0xdcc <__ultoa_invert+0x5c>
 dda:	f6 cf       	rjmp	.-20     	; 0xdc8 <__ultoa_invert+0x58>
 ddc:	46 2f       	mov	r20, r22
 dde:	4f 70       	andi	r20, 0x0F	; 15
 de0:	40 5d       	subi	r20, 0xD0	; 208
 de2:	4a 33       	cpi	r20, 0x3A	; 58
 de4:	18 f0       	brcs	.+6      	; 0xdec <__ultoa_invert+0x7c>
 de6:	49 5d       	subi	r20, 0xD9	; 217
 de8:	31 fd       	sbrc	r19, 1
 dea:	40 52       	subi	r20, 0x20	; 32
 dec:	41 93       	st	Z+, r20
 dee:	02 d0       	rcall	.+4      	; 0xdf4 <__ultoa_invert+0x84>
 df0:	a9 f7       	brne	.-22     	; 0xddc <__ultoa_invert+0x6c>
 df2:	ea cf       	rjmp	.-44     	; 0xdc8 <__ultoa_invert+0x58>
 df4:	b4 e0       	ldi	r27, 0x04	; 4
 df6:	a6 95       	lsr	r26
 df8:	97 95       	ror	r25
 dfa:	87 95       	ror	r24
 dfc:	77 95       	ror	r23
 dfe:	67 95       	ror	r22
 e00:	ba 95       	dec	r27
 e02:	c9 f7       	brne	.-14     	; 0xdf6 <__ultoa_invert+0x86>
 e04:	00 97       	sbiw	r24, 0x00	; 0
 e06:	61 05       	cpc	r22, r1
 e08:	71 05       	cpc	r23, r1
 e0a:	08 95       	ret
 e0c:	9b 01       	movw	r18, r22
 e0e:	ac 01       	movw	r20, r24
 e10:	0a 2e       	mov	r0, r26
 e12:	06 94       	lsr	r0
 e14:	57 95       	ror	r21
 e16:	47 95       	ror	r20
 e18:	37 95       	ror	r19
 e1a:	27 95       	ror	r18
 e1c:	ba 95       	dec	r27
 e1e:	c9 f7       	brne	.-14     	; 0xe12 <__ultoa_invert+0xa2>
 e20:	62 0f       	add	r22, r18
 e22:	73 1f       	adc	r23, r19
 e24:	84 1f       	adc	r24, r20
 e26:	95 1f       	adc	r25, r21
 e28:	a0 1d       	adc	r26, r0
 e2a:	08 95       	ret

00000e2c <__prologue_saves__>:
 e2c:	2f 92       	push	r2
 e2e:	3f 92       	push	r3
 e30:	4f 92       	push	r4
 e32:	5f 92       	push	r5
 e34:	6f 92       	push	r6
 e36:	7f 92       	push	r7
 e38:	8f 92       	push	r8
 e3a:	9f 92       	push	r9
 e3c:	af 92       	push	r10
 e3e:	bf 92       	push	r11
 e40:	cf 92       	push	r12
 e42:	df 92       	push	r13
 e44:	ef 92       	push	r14
 e46:	ff 92       	push	r15
 e48:	0f 93       	push	r16
 e4a:	1f 93       	push	r17
 e4c:	cf 93       	push	r28
 e4e:	df 93       	push	r29
 e50:	cd b7       	in	r28, 0x3d	; 61
 e52:	de b7       	in	r29, 0x3e	; 62
 e54:	ca 1b       	sub	r28, r26
 e56:	db 0b       	sbc	r29, r27
 e58:	0f b6       	in	r0, 0x3f	; 63
 e5a:	f8 94       	cli
 e5c:	de bf       	out	0x3e, r29	; 62
 e5e:	0f be       	out	0x3f, r0	; 63
 e60:	cd bf       	out	0x3d, r28	; 61
 e62:	09 94       	ijmp

00000e64 <__epilogue_restores__>:
 e64:	2a 88       	ldd	r2, Y+18	; 0x12
 e66:	39 88       	ldd	r3, Y+17	; 0x11
 e68:	48 88       	ldd	r4, Y+16	; 0x10
 e6a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e6c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e6e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e70:	8c 84       	ldd	r8, Y+12	; 0x0c
 e72:	9b 84       	ldd	r9, Y+11	; 0x0b
 e74:	aa 84       	ldd	r10, Y+10	; 0x0a
 e76:	b9 84       	ldd	r11, Y+9	; 0x09
 e78:	c8 84       	ldd	r12, Y+8	; 0x08
 e7a:	df 80       	ldd	r13, Y+7	; 0x07
 e7c:	ee 80       	ldd	r14, Y+6	; 0x06
 e7e:	fd 80       	ldd	r15, Y+5	; 0x05
 e80:	0c 81       	ldd	r16, Y+4	; 0x04
 e82:	1b 81       	ldd	r17, Y+3	; 0x03
 e84:	aa 81       	ldd	r26, Y+2	; 0x02
 e86:	b9 81       	ldd	r27, Y+1	; 0x01
 e88:	ce 0f       	add	r28, r30
 e8a:	d1 1d       	adc	r29, r1
 e8c:	0f b6       	in	r0, 0x3f	; 63
 e8e:	f8 94       	cli
 e90:	de bf       	out	0x3e, r29	; 62
 e92:	0f be       	out	0x3f, r0	; 63
 e94:	cd bf       	out	0x3d, r28	; 61
 e96:	ed 01       	movw	r28, r26
 e98:	08 95       	ret

00000e9a <_exit>:
 e9a:	f8 94       	cli

00000e9c <__stop_program>:
 e9c:	ff cf       	rjmp	.-2      	; 0xe9c <__stop_program>
