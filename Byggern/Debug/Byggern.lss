
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000e00  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800118  00800118  00000eac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a83  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a78  00000000  00000000  00002b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a03  00000000  00000000  000035d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000454  00000000  00000000  00003fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b1  00000000  00000000  0000442c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ff4  00000000  00000000  000048dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  000058d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e0       	ldi	r30, 0x00	; 0
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 31       	cpi	r26, 0x18	; 24
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e1       	ldi	r26, 0x18	; 24
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 32       	cpi	r26, 0x22	; 34
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:



void ADC_init()
{	
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <main>:
//}



int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	64 97       	sbiw	r28, 0x14	; 20
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
	DDRD  = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	
	UartInit();
  d4:	0e 94 91 02 	call	0x522	; 0x522 <UartInit>
	SRAM_init();
  d8:	0e 94 82 02 	call	0x504	; 0x504 <SRAM_init>
	ADC_init();
  dc:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	init_OLED();
  e0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <init_OLED>
	
	MCP_init();
  e4:	0e 94 df 01 	call	0x3be	; 0x3be <MCP_init>
	
	CAN_init();
  e8:	0e 94 cc 00 	call	0x198	; 0x198 <CAN_init>
//const unsigned char* streng = "Espen er en GAUDER";
//const unsigned char* streng2 = "Gaute er en test";
//const unsigned char* streng3 = "Runar er en test";
	
	// Enable Global Interrupts
	sei();
  ec:	78 94       	sei
	
	CAN_message testmess;
	testmess.id = 0b01;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	89 83       	std	Y+1, r24	; 0x01
  f2:	fe 01       	movw	r30, r28
  f4:	33 96       	adiw	r30, 0x03	; 3
  f6:	ce 01       	movw	r24, r28
  f8:	0b 96       	adiw	r24, 0x0b	; 11
	testmess.length = 8;
	for (unsigned char i=0; i<testmess.length;i++)
	{
		testmess.data[i] = 9;
  fa:	29 e0       	ldi	r18, 0x09	; 9
  fc:	21 93       	st	Z+, r18
	sei();
	
	CAN_message testmess;
	testmess.id = 0b01;
	testmess.length = 8;
	for (unsigned char i=0; i<testmess.length;i++)
  fe:	e8 17       	cp	r30, r24
 100:	f9 07       	cpc	r31, r25
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x40>
			}
			//printf("\n");
			//printf("%i",testmess.id);
			

			CAN_send(testmess);
 104:	68 94       	set
 106:	99 24       	eor	r9, r9
 108:	93 f8       	bld	r9, 3
			
			
			if(h.id == 157)
			{
				
				printf("h= ");
 10a:	0f 2e       	mov	r0, r31
 10c:	f8 e0       	ldi	r31, 0x08	; 8
 10e:	af 2e       	mov	r10, r31
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	bf 2e       	mov	r11, r31
 114:	f0 2d       	mov	r31, r0
				for (int i =0; i<h.length; i++)
 116:	71 2c       	mov	r7, r1
 118:	81 2c       	mov	r8, r1
				{
					printf("%i",h.data);
 11a:	6e 01       	movw	r12, r28
 11c:	8d e0       	ldi	r24, 0x0D	; 13
 11e:	c8 0e       	add	r12, r24
 120:	d1 1c       	adc	r13, r1
 122:	0f 2e       	mov	r0, r31
 124:	fc e0       	ldi	r31, 0x0C	; 12
 126:	ef 2e       	mov	r14, r31
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	ff 2e       	mov	r15, r31
 12c:	f0 2d       	mov	r31, r0
			}
			//printf("\n");
			//printf("%i",testmess.id);
			

			CAN_send(testmess);
 12e:	9a 82       	std	Y+2, r9	; 0x02
 130:	09 81       	ldd	r16, Y+1	; 0x01
 132:	19 2d       	mov	r17, r9
 134:	2b 81       	ldd	r18, Y+3	; 0x03
 136:	3c 81       	ldd	r19, Y+4	; 0x04
 138:	4d 81       	ldd	r20, Y+5	; 0x05
 13a:	5e 81       	ldd	r21, Y+6	; 0x06
 13c:	6f 81       	ldd	r22, Y+7	; 0x07
 13e:	78 85       	ldd	r23, Y+8	; 0x08
 140:	89 85       	ldd	r24, Y+9	; 0x09
 142:	9a 85       	ldd	r25, Y+10	; 0x0a
 144:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <CAN_send>
			
			CAN_message h = CAN_read2();
 148:	ce 01       	movw	r24, r28
 14a:	0b 96       	adiw	r24, 0x0b	; 11
 14c:	0e 94 35 01 	call	0x26a	; 0x26a <CAN_read2>
			
			
			if(h.id == 157)
 150:	8b 85       	ldd	r24, Y+11	; 0x0b
 152:	8d 39       	cpi	r24, 0x9D	; 157
 154:	61 f7       	brne	.-40     	; 0x12e <main+0x72>
			{
				
				printf("h= ");
 156:	bf 92       	push	r11
 158:	af 92       	push	r10
 15a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <printf>
				for (int i =0; i<h.length; i++)
 15e:	8c 85       	ldd	r24, Y+12	; 0x0c
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	88 23       	and	r24, r24
 166:	99 f0       	breq	.+38     	; 0x18e <main+0xd2>
 168:	07 2d       	mov	r16, r7
 16a:	18 2d       	mov	r17, r8
				{
					printf("%i",h.data);
 16c:	df 92       	push	r13
 16e:	cf 92       	push	r12
 170:	ff 92       	push	r15
 172:	ef 92       	push	r14
 174:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <printf>
			
			if(h.id == 157)
			{
				
				printf("h= ");
				for (int i =0; i<h.length; i++)
 178:	0f 5f       	subi	r16, 0xFF	; 255
 17a:	1f 4f       	sbci	r17, 0xFF	; 255
 17c:	8c 85       	ldd	r24, Y+12	; 0x0c
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
 188:	08 17       	cp	r16, r24
 18a:	19 07       	cpc	r17, r25
 18c:	7c f3       	brlt	.-34     	; 0x16c <main+0xb0>
				{
					printf("%i",h.data);
				}
				printf("\n");
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 fe 02 	call	0x5fc	; 0x5fc <putchar>
			}
			
	}
 196:	cb cf       	rjmp	.-106    	; 0x12e <main+0x72>

00000198 <CAN_init>:



void CAN_init()
{
	MCP_init();
 198:	0e 94 df 01 	call	0x3be	; 0x3be <MCP_init>
	MCP_bitmod(MCP_RXB0CTRL,0xFF,0x64);
 19c:	44 e6       	ldi	r20, 0x64	; 100
 19e:	6f ef       	ldi	r22, 0xFF	; 255
 1a0:	80 e6       	ldi	r24, 0x60	; 96
 1a2:	0e 94 9f 01 	call	0x33e	; 0x33e <MCP_bitmod>
	MCP_bitmod(MCP_TXB0CTRL,0xFF,0x00);
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	6f ef       	ldi	r22, 0xFF	; 255
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	0e 94 9f 01 	call	0x33e	; 0x33e <MCP_bitmod>
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_LOOPBACK);		// Setting MCP to loop-back mode MODE_MASK
 1b0:	40 e4       	ldi	r20, 0x40	; 64
 1b2:	60 ee       	ldi	r22, 0xE0	; 224
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	0e 94 9f 01 	call	0x33e	; 0x33e <MCP_bitmod>
	MCP_bitmod(MCP_CANINTE, 0x01, 1);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	8b e2       	ldi	r24, 0x2B	; 43
 1c0:	0e 94 9f 01 	call	0x33e	; 0x33e <MCP_bitmod>
 1c4:	08 95       	ret

000001c6 <CAN_send>:
}

void CAN_send(CAN_message msg)
{
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	2a 97       	sbiw	r28, 0x0a	; 10
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	09 83       	std	Y+1, r16	; 0x01
 1e4:	e1 2e       	mov	r14, r17
 1e6:	1a 83       	std	Y+2, r17	; 0x02
 1e8:	2b 83       	std	Y+3, r18	; 0x03
 1ea:	3c 83       	std	Y+4, r19	; 0x04
 1ec:	4d 83       	std	Y+5, r20	; 0x05
 1ee:	5e 83       	std	Y+6, r21	; 0x06
 1f0:	6f 83       	std	Y+7, r22	; 0x07
 1f2:	78 87       	std	Y+8, r23	; 0x08
 1f4:	89 87       	std	Y+9, r24	; 0x09
 1f6:	9a 87       	std	Y+10, r25	; 0x0a
	MCP_write(MCP_TXB0SIDH, msg.id >> 3);
 1f8:	60 2f       	mov	r22, r16
 1fa:	66 95       	lsr	r22
 1fc:	66 95       	lsr	r22
 1fe:	66 95       	lsr	r22
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	81 e3       	ldi	r24, 0x31	; 49
 204:	0e 94 c7 01 	call	0x38e	; 0x38e <MCP_write>
	MCP_write(MCP_TXB0SIDL, msg.id << 5);				// Write id to Id handling register (3-3, standard identifier high)
 208:	80 e2       	ldi	r24, 0x20	; 32
 20a:	08 9f       	mul	r16, r24
 20c:	b0 01       	movw	r22, r0
 20e:	11 24       	eor	r1, r1
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	0e 94 c7 01 	call	0x38e	; 0x38e <MCP_write>

	MCP_write(TXB0DLC, (0x0F) & (msg.length));					// Write length to length handling register (3-7)
 216:	61 2f       	mov	r22, r17
 218:	6f 70       	andi	r22, 0x0F	; 15
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	85 e3       	ldi	r24, 0x35	; 53
 21e:	0e 94 c7 01 	call	0x38e	; 0x38e <MCP_write>
	for(unsigned char i=0; i<msg.length;i++)
 222:	11 23       	and	r17, r17
 224:	99 f0       	breq	.+38     	; 0x24c <CAN_send+0x86>
 226:	8e 01       	movw	r16, r28
 228:	0d 5f       	subi	r16, 0xFD	; 253
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	e6 e3       	ldi	r30, 0x36	; 54
 22e:	ee 0e       	add	r14, r30
 230:	0f 2e       	mov	r0, r31
 232:	f6 e3       	ldi	r31, 0x36	; 54
 234:	ff 2e       	mov	r15, r31
 236:	f0 2d       	mov	r31, r0
	{
		MCP_write(TXB0D0+i,msg.data[i]);			// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
 238:	f8 01       	movw	r30, r16
 23a:	61 91       	ld	r22, Z+
 23c:	8f 01       	movw	r16, r30
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	8f 2d       	mov	r24, r15
 242:	0e 94 c7 01 	call	0x38e	; 0x38e <MCP_write>
 246:	f3 94       	inc	r15
{
	MCP_write(MCP_TXB0SIDH, msg.id >> 3);
	MCP_write(MCP_TXB0SIDL, msg.id << 5);				// Write id to Id handling register (3-3, standard identifier high)

	MCP_write(TXB0DLC, (0x0F) & (msg.length));					// Write length to length handling register (3-7)
	for(unsigned char i=0; i<msg.length;i++)
 248:	fe 10       	cpse	r15, r14
 24a:	f6 cf       	rjmp	.-20     	; 0x238 <CAN_send+0x72>
		//for (int i =0; i<8; i++)
		//{
			//printf("%c",msg.data[i]);
		//}
		//printf("\n\n");
	MCP_request();									// Request to send written message MCP_RTS_ALL
 24c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <MCP_request>
	
}
 250:	2a 96       	adiw	r28, 0x0a	; 10
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	08 95       	ret

0000026a <CAN_read2>:
	//return result;									//return read message
//}
// returns only data

CAN_message CAN_read2()
{
 26a:	9f 92       	push	r9
 26c:	af 92       	push	r10
 26e:	bf 92       	push	r11
 270:	cf 92       	push	r12
 272:	df 92       	push	r13
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	2a 97       	sbiw	r28, 0x0a	; 10
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	6c 01       	movw	r12, r24
	CAN_message msg;
	msg.id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
 292:	81 e6       	ldi	r24, 0x61	; 97
 294:	0e 94 b7 01 	call	0x36e	; 0x36e <MCP_read>
 298:	98 2e       	mov	r9, r24
 29a:	82 e6       	ldi	r24, 0x62	; 98
 29c:	0e 94 b7 01 	call	0x36e	; 0x36e <MCP_read>
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	92 95       	swap	r25
 2a6:	82 95       	swap	r24
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	89 27       	eor	r24, r25
 2ac:	9f 70       	andi	r25, 0x0F	; 15
 2ae:	89 27       	eor	r24, r25
 2b0:	99 0c       	add	r9, r9
 2b2:	99 0c       	add	r9, r9
 2b4:	99 0c       	add	r9, r9
 2b6:	98 2a       	or	r9, r24
							
	msg.length = (MCP_read(MCP_RXB0DLC)) & (0x0F);
 2b8:	85 e6       	ldi	r24, 0x65	; 101
 2ba:	0e 94 b7 01 	call	0x36e	; 0x36e <MCP_read>
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	a8 2e       	mov	r10, r24
	for (int i = 0; i< msg.length; i++)
 2c2:	a1 f0       	breq	.+40     	; 0x2ec <CAN_read2+0x82>
 2c4:	8e 01       	movw	r16, r28
 2c6:	0d 5f       	subi	r16, 0xFD	; 253
 2c8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ca:	78 01       	movw	r14, r16
 2cc:	e8 0e       	add	r14, r24
 2ce:	f1 1c       	adc	r15, r1
 2d0:	0f 2e       	mov	r0, r31
 2d2:	f6 e6       	ldi	r31, 0x66	; 102
 2d4:	bf 2e       	mov	r11, r31
 2d6:	f0 2d       	mov	r31, r0
	{
		msg.data[i] = MCP_read(MCP_RXB0D0+i);
 2d8:	8b 2d       	mov	r24, r11
 2da:	0e 94 b7 01 	call	0x36e	; 0x36e <MCP_read>
 2de:	f8 01       	movw	r30, r16
 2e0:	81 93       	st	Z+, r24
 2e2:	8f 01       	movw	r16, r30
 2e4:	b3 94       	inc	r11
{
	CAN_message msg;
	msg.id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
							
	msg.length = (MCP_read(MCP_RXB0DLC)) & (0x0F);
	for (int i = 0; i< msg.length; i++)
 2e6:	ee 15       	cp	r30, r14
 2e8:	ff 05       	cpc	r31, r15
 2ea:	b1 f7       	brne	.-20     	; 0x2d8 <CAN_read2+0x6e>
	{
		msg.data[i] = MCP_read(MCP_RXB0D0+i);
	}
	printf("ID: %i\n",msg.id);
 2ec:	1f 92       	push	r1
 2ee:	9f 92       	push	r9
 2f0:	2f e0       	ldi	r18, 0x0F	; 15
 2f2:	31 e0       	ldi	r19, 0x01	; 1
 2f4:	3f 93       	push	r19
 2f6:	2f 93       	push	r18
 2f8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <printf>
	//for (int i =0; i<8; i++)	
		//{
			//printf("Bit %i: %i\n",i,msg.data[i]);
		//}
	//printf("\n");												
	return msg;										//return object msg
 2fc:	99 82       	std	Y+1, r9	; 0x01
 2fe:	aa 82       	std	Y+2, r10	; 0x02
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	fe 01       	movw	r30, r28
 304:	31 96       	adiw	r30, 0x01	; 1
 306:	d6 01       	movw	r26, r12
 308:	01 90       	ld	r0, Z+
 30a:	0d 92       	st	X+, r0
 30c:	8a 95       	dec	r24
 30e:	e1 f7       	brne	.-8      	; 0x308 <CAN_read2+0x9e>
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
}
 318:	c6 01       	movw	r24, r12
 31a:	2a 96       	adiw	r28, 0x0a	; 10
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	bf 90       	pop	r11
 338:	af 90       	pop	r10
 33a:	9f 90       	pop	r9
 33c:	08 95       	ret

0000033e <MCP_bitmod>:
}



void MCP_bitmod(unsigned char reg, unsigned char bit, unsigned char bittil)
{
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	18 2f       	mov	r17, r24
 346:	d6 2f       	mov	r29, r22
 348:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);					// Chip select
 34a:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_BITMOD);			// send command "I want to modify bit"
 34c:	85 e0       	ldi	r24, 0x05	; 5
 34e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	SPI_tranciever(reg);				// In what register do you want to operate
 352:	81 2f       	mov	r24, r17
 354:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	SPI_tranciever(bit);				// What bit mask do you want to change
 358:	8d 2f       	mov	r24, r29
 35a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	SPI_tranciever(bittil);				// What to you want to change to
 35e:	8c 2f       	mov	r24, r28
 360:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	PORTB |=(1<<PB4);						// chip de-select
 364:	c4 9a       	sbi	0x18, 4	; 24
	
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	08 95       	ret

0000036e <MCP_read>:
// Note that bitmod will change multiple bits unless one specifies which bit address to change. f.ex: bit = DLC3 & DLC2
// This will only change these two, but to use the function this way DLC3 and DCL2 must be defined first

unsigned int MCP_read(unsigned char address)
{
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
	unsigned int result;
	PORTB &= ~(1<<PB4);				// Selects can controller
 372:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_READ);		// Send command "I want to read MCP
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	SPI_tranciever(address);		// Address we want to read
 37a:	8c 2f       	mov	r24, r28
 37c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	result = SPI_tranciever(0xFF);	// Save What we read in result
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	PORTB |=(1<<PB4);					// De-selects can controller
 386:	c4 9a       	sbi	0x18, 4	; 24
	return result;					// Return what we read
}
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <MCP_write>:

void MCP_write(unsigned char address, unsigned int data)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	d8 2f       	mov	r29, r24
 394:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);					
 396:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_WRITE);		// Send command "I want to write"
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	SPI_tranciever(address);		// Where we want to write to
 39e:	8d 2f       	mov	r24, r29
 3a0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	SPI_tranciever(data);			// What we want to write
 3a4:	8c 2f       	mov	r24, r28
 3a6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	
	PORTB |=(1<<PB4);
 3aa:	c4 9a       	sbi	0x18, 4	; 24
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <MCP_reset>:

void MCP_reset()
{
	PORTB &= ~(1<<PB4);	
 3b2:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RESET);		// Send command "I want to reset MCP"
 3b4:	80 ec       	ldi	r24, 0xC0	; 192
 3b6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	PORTB |=(1<<PB4);
 3ba:	c4 9a       	sbi	0x18, 4	; 24
 3bc:	08 95       	ret

000003be <MCP_init>:
#include "SPI.h"
#include <avr/io.h>
void MCP_init()
{
	// Makes sure registers are clean and MCP in control mode
	SPI_MasterInit();
 3be:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SPI_MasterInit>
	MCP_reset();
 3c2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <MCP_reset>
 3c6:	08 95       	ret

000003c8 <MCP_request>:
	PORTB |=(1<<PB4);
}

void MCP_request()
{
	PORTB &= ~(1<<PB4);
 3c8:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RTS_ALL);	// Send command "Request to send for all ports" (TX0, TX1 and TX2)
 3ca:	87 e8       	ldi	r24, 0x87	; 135
 3cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_tranciever>
	PORTB |=(1<<PB4);
 3d0:	c4 9a       	sbi	0x18, 4	; 24
 3d2:	08 95       	ret

000003d4 <init_OLED>:
volatile char *write_d = (char *) 0x1200; 
char Name[3];

void init_OLED()
{
	MCUCR |= (1<<SRE);
 3d4:	85 b7       	in	r24, 0x35	; 53
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 3da:	80 b7       	in	r24, 0x30	; 48
 3dc:	80 62       	ori	r24, 0x20	; 32
 3de:	80 bf       	out	0x30, r24	; 48
	*write_c = (0xae);        //  display  off
 3e0:	e0 91 06 01 	lds	r30, 0x0106
 3e4:	f0 91 07 01 	lds	r31, 0x0107
 3e8:	8e ea       	ldi	r24, 0xAE	; 174
 3ea:	80 83       	st	Z, r24
	*write_c = (0xa1);        //segment  remap
 3ec:	e0 91 06 01 	lds	r30, 0x0106
 3f0:	f0 91 07 01 	lds	r31, 0x0107
 3f4:	81 ea       	ldi	r24, 0xA1	; 161
 3f6:	80 83       	st	Z, r24
	*write_c = (0xda);        //common  pads  hardware:  alternative
 3f8:	e0 91 06 01 	lds	r30, 0x0106
 3fc:	f0 91 07 01 	lds	r31, 0x0107
 400:	8a ed       	ldi	r24, 0xDA	; 218
 402:	80 83       	st	Z, r24
	*write_c = (0x12);
 404:	e0 91 06 01 	lds	r30, 0x0106
 408:	f0 91 07 01 	lds	r31, 0x0107
 40c:	82 e1       	ldi	r24, 0x12	; 18
 40e:	80 83       	st	Z, r24
	*write_c = (0xc8);        //common output scan direction:com63~com0
 410:	e0 91 06 01 	lds	r30, 0x0106
 414:	f0 91 07 01 	lds	r31, 0x0107
 418:	88 ec       	ldi	r24, 0xC8	; 200
 41a:	80 83       	st	Z, r24
	*write_c = (0xa8);        //multiplex  ration  mode:63
 41c:	e0 91 06 01 	lds	r30, 0x0106
 420:	f0 91 07 01 	lds	r31, 0x0107
 424:	88 ea       	ldi	r24, 0xA8	; 168
 426:	80 83       	st	Z, r24
	*write_c = (0x3f);
 428:	e0 91 06 01 	lds	r30, 0x0106
 42c:	f0 91 07 01 	lds	r31, 0x0107
 430:	8f e3       	ldi	r24, 0x3F	; 63
 432:	80 83       	st	Z, r24
	*write_c = (0xd5);        //display divide ratio/osc. freq. mode
 434:	e0 91 06 01 	lds	r30, 0x0106
 438:	f0 91 07 01 	lds	r31, 0x0107
 43c:	85 ed       	ldi	r24, 0xD5	; 213
 43e:	80 83       	st	Z, r24
	*write_c = (0x80);
 440:	e0 91 06 01 	lds	r30, 0x0106
 444:	f0 91 07 01 	lds	r31, 0x0107
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	80 83       	st	Z, r24
	*write_c = (0x81);        //contrast  control
 44c:	e0 91 06 01 	lds	r30, 0x0106
 450:	f0 91 07 01 	lds	r31, 0x0107
 454:	81 e8       	ldi	r24, 0x81	; 129
 456:	80 83       	st	Z, r24
	*write_c = (0x50);
 458:	e0 91 06 01 	lds	r30, 0x0106
 45c:	f0 91 07 01 	lds	r31, 0x0107
 460:	80 e5       	ldi	r24, 0x50	; 80
 462:	80 83       	st	Z, r24
	*write_c = (0xd9);        //set  pre-charge  period
 464:	e0 91 06 01 	lds	r30, 0x0106
 468:	f0 91 07 01 	lds	r31, 0x0107
 46c:	89 ed       	ldi	r24, 0xD9	; 217
 46e:	80 83       	st	Z, r24
	*write_c = (0x21);
 470:	e0 91 06 01 	lds	r30, 0x0106
 474:	f0 91 07 01 	lds	r31, 0x0107
 478:	81 e2       	ldi	r24, 0x21	; 33
 47a:	80 83       	st	Z, r24
	*write_c = (0x20);        //Set  Memory  Addressing  Mode
 47c:	e0 91 06 01 	lds	r30, 0x0106
 480:	f0 91 07 01 	lds	r31, 0x0107
 484:	80 e2       	ldi	r24, 0x20	; 32
 486:	80 83       	st	Z, r24
	*write_c = (0x02);
 488:	e0 91 06 01 	lds	r30, 0x0106
 48c:	f0 91 07 01 	lds	r31, 0x0107
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	80 83       	st	Z, r24
	*write_c = (0xdb);        //VCOM  deselect  level  mode
 494:	e0 91 06 01 	lds	r30, 0x0106
 498:	f0 91 07 01 	lds	r31, 0x0107
 49c:	8b ed       	ldi	r24, 0xDB	; 219
 49e:	80 83       	st	Z, r24
	*write_c = (0x30);
 4a0:	e0 91 06 01 	lds	r30, 0x0106
 4a4:	f0 91 07 01 	lds	r31, 0x0107
 4a8:	80 e3       	ldi	r24, 0x30	; 48
 4aa:	80 83       	st	Z, r24
	*write_c = (0xad);        //master  configuration
 4ac:	e0 91 06 01 	lds	r30, 0x0106
 4b0:	f0 91 07 01 	lds	r31, 0x0107
 4b4:	8d ea       	ldi	r24, 0xAD	; 173
 4b6:	80 83       	st	Z, r24
	*write_c = (0x00);
 4b8:	e0 91 06 01 	lds	r30, 0x0106
 4bc:	f0 91 07 01 	lds	r31, 0x0107
 4c0:	10 82       	st	Z, r1
	*write_c = (0xa4);        //out  follows  RAM  content
 4c2:	e0 91 06 01 	lds	r30, 0x0106
 4c6:	f0 91 07 01 	lds	r31, 0x0107
 4ca:	84 ea       	ldi	r24, 0xA4	; 164
 4cc:	80 83       	st	Z, r24
	*write_c = (0xa6);        //set  normal  display
 4ce:	e0 91 06 01 	lds	r30, 0x0106
 4d2:	f0 91 07 01 	lds	r31, 0x0107
 4d6:	86 ea       	ldi	r24, 0xA6	; 166
 4d8:	80 83       	st	Z, r24
	*write_c = (0xaf);        //  display  on
 4da:	e0 91 06 01 	lds	r30, 0x0106
 4de:	f0 91 07 01 	lds	r31, 0x0107
 4e2:	8f ea       	ldi	r24, 0xAF	; 175
 4e4:	80 83       	st	Z, r24
 4e6:	08 95       	ret

000004e8 <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	/* Set MOSI, SS and SCK output, all others input */
	DDRB &= ~(1<<PB6);
 4e8:	be 98       	cbi	0x17, 6	; 23
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
 4ea:	87 b3       	in	r24, 0x17	; 23
 4ec:	80 6b       	ori	r24, 0xB0	; 176
 4ee:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB4);
 4f0:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//&~(1<<DORD);
 4f2:	8d b1       	in	r24, 0x0d	; 13
 4f4:	81 65       	ori	r24, 0x51	; 81
 4f6:	8d b9       	out	0x0d, r24	; 13
 4f8:	08 95       	ret

000004fa <SPI_tranciever>:
unsigned char SPI_tranciever(unsigned char data)
{

	/* Start transmission */

	SPDR = data;
 4fa:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
 4fc:	77 9b       	sbis	0x0e, 7	; 14
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <SPI_tranciever+0x2>

	//Return received data
	return SPDR;
 500:	8f b1       	in	r24, 0x0f	; 15
}
 502:	08 95       	ret

00000504 <SRAM_init>:



void SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
 504:	85 b7       	in	r24, 0x35	; 53
 506:	80 68       	ori	r24, 0x80	; 128
 508:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 50a:	80 b7       	in	r24, 0x30	; 48
 50c:	80 62       	ori	r24, 0x20	; 32
 50e:	80 bf       	out	0x30, r24	; 48
 510:	08 95       	ret

00000512 <USART_Receive>:


unsigned char USART_Receive(void)
	{
	//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 512:	5f 9b       	sbis	0x0b, 7	; 11
 514:	fe cf       	rjmp	.-4      	; 0x512 <USART_Receive>
	
	//Get and return received data from buffer
	return UDR0;
 516:	8c b1       	in	r24, 0x0c	; 12
	}
 518:	08 95       	ret

0000051a <USART_Transmit>:

void USART_Transmit( unsigned char data )
	{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
 51a:	5d 9b       	sbis	0x0b, 5	; 11
 51c:	fe cf       	rjmp	.-4      	; 0x51a <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 51e:	8c b9       	out	0x0c, r24	; 12
 520:	08 95       	ret

00000522 <UartInit>:

	
//}
void UartInit(){
	//Set Baud rate 9600
	UBRR0H = (unsigned char)(MYUBRR>>8);	// Setter de 8 mest signifikante bitene
 522:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBRR);	// Setter de 8 minst signifikante bitene
 524:	8f e1       	ldi	r24, 0x1F	; 31
 526:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 528:	88 e1       	ldi	r24, 0x18	; 24
 52a:	8a b9       	out	0x0a, r24	; 10
	// 8N2
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 52c:	8e e8       	ldi	r24, 0x8E	; 142
 52e:	80 bd       	out	0x20, r24	; 32
	fdevopen(&USART_Transmit, &USART_Receive);
 530:	69 e8       	ldi	r22, 0x89	; 137
 532:	72 e0       	ldi	r23, 0x02	; 2
 534:	8d e8       	ldi	r24, 0x8D	; 141
 536:	92 e0       	ldi	r25, 0x02	; 2
 538:	0e 94 9f 02 	call	0x53e	; 0x53e <fdevopen>
 53c:	08 95       	ret

0000053e <fdevopen>:
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	ec 01       	movw	r28, r24
 548:	8b 01       	movw	r16, r22
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	31 f4       	brne	.+12     	; 0x55a <fdevopen+0x1c>
 54e:	61 15       	cp	r22, r1
 550:	71 05       	cpc	r23, r1
 552:	19 f4       	brne	.+6      	; 0x55a <fdevopen+0x1c>
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	38 c0       	rjmp	.+112    	; 0x5ca <fdevopen+0x8c>
 55a:	6e e0       	ldi	r22, 0x0E	; 14
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 d7 04 	call	0x9ae	; 0x9ae <calloc>
 566:	fc 01       	movw	r30, r24
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	a1 f3       	breq	.-24     	; 0x554 <fdevopen+0x16>
 56c:	80 e8       	ldi	r24, 0x80	; 128
 56e:	83 83       	std	Z+3, r24	; 0x03
 570:	01 15       	cp	r16, r1
 572:	11 05       	cpc	r17, r1
 574:	71 f0       	breq	.+28     	; 0x592 <fdevopen+0x54>
 576:	13 87       	std	Z+11, r17	; 0x0b
 578:	02 87       	std	Z+10, r16	; 0x0a
 57a:	81 e8       	ldi	r24, 0x81	; 129
 57c:	83 83       	std	Z+3, r24	; 0x03
 57e:	80 91 18 01 	lds	r24, 0x0118
 582:	90 91 19 01 	lds	r25, 0x0119
 586:	89 2b       	or	r24, r25
 588:	21 f4       	brne	.+8      	; 0x592 <fdevopen+0x54>
 58a:	f0 93 19 01 	sts	0x0119, r31
 58e:	e0 93 18 01 	sts	0x0118, r30
 592:	20 97       	sbiw	r28, 0x00	; 0
 594:	c9 f0       	breq	.+50     	; 0x5c8 <fdevopen+0x8a>
 596:	d1 87       	std	Z+9, r29	; 0x09
 598:	c0 87       	std	Z+8, r28	; 0x08
 59a:	83 81       	ldd	r24, Z+3	; 0x03
 59c:	82 60       	ori	r24, 0x02	; 2
 59e:	83 83       	std	Z+3, r24	; 0x03
 5a0:	80 91 1a 01 	lds	r24, 0x011A
 5a4:	90 91 1b 01 	lds	r25, 0x011B
 5a8:	89 2b       	or	r24, r25
 5aa:	71 f4       	brne	.+28     	; 0x5c8 <fdevopen+0x8a>
 5ac:	f0 93 1b 01 	sts	0x011B, r31
 5b0:	e0 93 1a 01 	sts	0x011A, r30
 5b4:	80 91 1c 01 	lds	r24, 0x011C
 5b8:	90 91 1d 01 	lds	r25, 0x011D
 5bc:	89 2b       	or	r24, r25
 5be:	21 f4       	brne	.+8      	; 0x5c8 <fdevopen+0x8a>
 5c0:	f0 93 1d 01 	sts	0x011D, r31
 5c4:	e0 93 1c 01 	sts	0x011C, r30
 5c8:	cf 01       	movw	r24, r30
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <printf>:
 5d4:	a0 e0       	ldi	r26, 0x00	; 0
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	e0 ef       	ldi	r30, 0xF0	; 240
 5da:	f2 e0       	ldi	r31, 0x02	; 2
 5dc:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__prologue_saves__+0x20>
 5e0:	fe 01       	movw	r30, r28
 5e2:	35 96       	adiw	r30, 0x05	; 5
 5e4:	61 91       	ld	r22, Z+
 5e6:	71 91       	ld	r23, Z+
 5e8:	af 01       	movw	r20, r30
 5ea:	80 91 1a 01 	lds	r24, 0x011A
 5ee:	90 91 1b 01 	lds	r25, 0x011B
 5f2:	0e 94 05 03 	call	0x60a	; 0x60a <vfprintf>
 5f6:	e2 e0       	ldi	r30, 0x02	; 2
 5f8:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__epilogue_restores__+0x20>

000005fc <putchar>:
 5fc:	60 91 1a 01 	lds	r22, 0x011A
 600:	70 91 1b 01 	lds	r23, 0x011B
 604:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 608:	08 95       	ret

0000060a <vfprintf>:
 60a:	ac e0       	ldi	r26, 0x0C	; 12
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	eb e0       	ldi	r30, 0x0B	; 11
 610:	f3 e0       	ldi	r31, 0x03	; 3
 612:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__prologue_saves__>
 616:	7c 01       	movw	r14, r24
 618:	6b 01       	movw	r12, r22
 61a:	8a 01       	movw	r16, r20
 61c:	fc 01       	movw	r30, r24
 61e:	17 82       	std	Z+7, r1	; 0x07
 620:	16 82       	std	Z+6, r1	; 0x06
 622:	83 81       	ldd	r24, Z+3	; 0x03
 624:	81 ff       	sbrs	r24, 1
 626:	bd c1       	rjmp	.+890    	; 0x9a2 <vfprintf+0x398>
 628:	ce 01       	movw	r24, r28
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	4c 01       	movw	r8, r24
 62e:	f7 01       	movw	r30, r14
 630:	93 81       	ldd	r25, Z+3	; 0x03
 632:	f6 01       	movw	r30, r12
 634:	93 fd       	sbrc	r25, 3
 636:	85 91       	lpm	r24, Z+
 638:	93 ff       	sbrs	r25, 3
 63a:	81 91       	ld	r24, Z+
 63c:	6f 01       	movw	r12, r30
 63e:	88 23       	and	r24, r24
 640:	09 f4       	brne	.+2      	; 0x644 <vfprintf+0x3a>
 642:	ab c1       	rjmp	.+854    	; 0x99a <vfprintf+0x390>
 644:	85 32       	cpi	r24, 0x25	; 37
 646:	39 f4       	brne	.+14     	; 0x656 <vfprintf+0x4c>
 648:	93 fd       	sbrc	r25, 3
 64a:	85 91       	lpm	r24, Z+
 64c:	93 ff       	sbrs	r25, 3
 64e:	81 91       	ld	r24, Z+
 650:	6f 01       	movw	r12, r30
 652:	85 32       	cpi	r24, 0x25	; 37
 654:	29 f4       	brne	.+10     	; 0x660 <vfprintf+0x56>
 656:	b7 01       	movw	r22, r14
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 65e:	e7 cf       	rjmp	.-50     	; 0x62e <vfprintf+0x24>
 660:	51 2c       	mov	r5, r1
 662:	31 2c       	mov	r3, r1
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	20 32       	cpi	r18, 0x20	; 32
 668:	a0 f4       	brcc	.+40     	; 0x692 <vfprintf+0x88>
 66a:	8b 32       	cpi	r24, 0x2B	; 43
 66c:	69 f0       	breq	.+26     	; 0x688 <vfprintf+0x7e>
 66e:	30 f4       	brcc	.+12     	; 0x67c <vfprintf+0x72>
 670:	80 32       	cpi	r24, 0x20	; 32
 672:	59 f0       	breq	.+22     	; 0x68a <vfprintf+0x80>
 674:	83 32       	cpi	r24, 0x23	; 35
 676:	69 f4       	brne	.+26     	; 0x692 <vfprintf+0x88>
 678:	20 61       	ori	r18, 0x10	; 16
 67a:	2c c0       	rjmp	.+88     	; 0x6d4 <vfprintf+0xca>
 67c:	8d 32       	cpi	r24, 0x2D	; 45
 67e:	39 f0       	breq	.+14     	; 0x68e <vfprintf+0x84>
 680:	80 33       	cpi	r24, 0x30	; 48
 682:	39 f4       	brne	.+14     	; 0x692 <vfprintf+0x88>
 684:	21 60       	ori	r18, 0x01	; 1
 686:	26 c0       	rjmp	.+76     	; 0x6d4 <vfprintf+0xca>
 688:	22 60       	ori	r18, 0x02	; 2
 68a:	24 60       	ori	r18, 0x04	; 4
 68c:	23 c0       	rjmp	.+70     	; 0x6d4 <vfprintf+0xca>
 68e:	28 60       	ori	r18, 0x08	; 8
 690:	21 c0       	rjmp	.+66     	; 0x6d4 <vfprintf+0xca>
 692:	27 fd       	sbrc	r18, 7
 694:	27 c0       	rjmp	.+78     	; 0x6e4 <vfprintf+0xda>
 696:	30 ed       	ldi	r19, 0xD0	; 208
 698:	38 0f       	add	r19, r24
 69a:	3a 30       	cpi	r19, 0x0A	; 10
 69c:	78 f4       	brcc	.+30     	; 0x6bc <vfprintf+0xb2>
 69e:	26 ff       	sbrs	r18, 6
 6a0:	06 c0       	rjmp	.+12     	; 0x6ae <vfprintf+0xa4>
 6a2:	fa e0       	ldi	r31, 0x0A	; 10
 6a4:	5f 9e       	mul	r5, r31
 6a6:	30 0d       	add	r19, r0
 6a8:	11 24       	eor	r1, r1
 6aa:	53 2e       	mov	r5, r19
 6ac:	13 c0       	rjmp	.+38     	; 0x6d4 <vfprintf+0xca>
 6ae:	8a e0       	ldi	r24, 0x0A	; 10
 6b0:	38 9e       	mul	r3, r24
 6b2:	30 0d       	add	r19, r0
 6b4:	11 24       	eor	r1, r1
 6b6:	33 2e       	mov	r3, r19
 6b8:	20 62       	ori	r18, 0x20	; 32
 6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <vfprintf+0xca>
 6bc:	8e 32       	cpi	r24, 0x2E	; 46
 6be:	21 f4       	brne	.+8      	; 0x6c8 <vfprintf+0xbe>
 6c0:	26 fd       	sbrc	r18, 6
 6c2:	6b c1       	rjmp	.+726    	; 0x99a <vfprintf+0x390>
 6c4:	20 64       	ori	r18, 0x40	; 64
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <vfprintf+0xca>
 6c8:	8c 36       	cpi	r24, 0x6C	; 108
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <vfprintf+0xc6>
 6cc:	20 68       	ori	r18, 0x80	; 128
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <vfprintf+0xca>
 6d0:	88 36       	cpi	r24, 0x68	; 104
 6d2:	41 f4       	brne	.+16     	; 0x6e4 <vfprintf+0xda>
 6d4:	f6 01       	movw	r30, r12
 6d6:	93 fd       	sbrc	r25, 3
 6d8:	85 91       	lpm	r24, Z+
 6da:	93 ff       	sbrs	r25, 3
 6dc:	81 91       	ld	r24, Z+
 6de:	6f 01       	movw	r12, r30
 6e0:	81 11       	cpse	r24, r1
 6e2:	c1 cf       	rjmp	.-126    	; 0x666 <vfprintf+0x5c>
 6e4:	98 2f       	mov	r25, r24
 6e6:	9f 7d       	andi	r25, 0xDF	; 223
 6e8:	95 54       	subi	r25, 0x45	; 69
 6ea:	93 30       	cpi	r25, 0x03	; 3
 6ec:	28 f4       	brcc	.+10     	; 0x6f8 <vfprintf+0xee>
 6ee:	0c 5f       	subi	r16, 0xFC	; 252
 6f0:	1f 4f       	sbci	r17, 0xFF	; 255
 6f2:	ff e3       	ldi	r31, 0x3F	; 63
 6f4:	f9 83       	std	Y+1, r31	; 0x01
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <vfprintf+0x108>
 6f8:	83 36       	cpi	r24, 0x63	; 99
 6fa:	31 f0       	breq	.+12     	; 0x708 <vfprintf+0xfe>
 6fc:	83 37       	cpi	r24, 0x73	; 115
 6fe:	71 f0       	breq	.+28     	; 0x71c <vfprintf+0x112>
 700:	83 35       	cpi	r24, 0x53	; 83
 702:	09 f0       	breq	.+2      	; 0x706 <vfprintf+0xfc>
 704:	5b c0       	rjmp	.+182    	; 0x7bc <vfprintf+0x1b2>
 706:	22 c0       	rjmp	.+68     	; 0x74c <vfprintf+0x142>
 708:	f8 01       	movw	r30, r16
 70a:	80 81       	ld	r24, Z
 70c:	89 83       	std	Y+1, r24	; 0x01
 70e:	0e 5f       	subi	r16, 0xFE	; 254
 710:	1f 4f       	sbci	r17, 0xFF	; 255
 712:	44 24       	eor	r4, r4
 714:	43 94       	inc	r4
 716:	51 2c       	mov	r5, r1
 718:	54 01       	movw	r10, r8
 71a:	15 c0       	rjmp	.+42     	; 0x746 <vfprintf+0x13c>
 71c:	38 01       	movw	r6, r16
 71e:	f2 e0       	ldi	r31, 0x02	; 2
 720:	6f 0e       	add	r6, r31
 722:	71 1c       	adc	r7, r1
 724:	f8 01       	movw	r30, r16
 726:	a0 80       	ld	r10, Z
 728:	b1 80       	ldd	r11, Z+1	; 0x01
 72a:	26 ff       	sbrs	r18, 6
 72c:	03 c0       	rjmp	.+6      	; 0x734 <vfprintf+0x12a>
 72e:	65 2d       	mov	r22, r5
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0x12e>
 734:	6f ef       	ldi	r22, 0xFF	; 255
 736:	7f ef       	ldi	r23, 0xFF	; 255
 738:	c5 01       	movw	r24, r10
 73a:	2c 87       	std	Y+12, r18	; 0x0c
 73c:	0e 94 2c 06 	call	0xc58	; 0xc58 <strnlen>
 740:	2c 01       	movw	r4, r24
 742:	83 01       	movw	r16, r6
 744:	2c 85       	ldd	r18, Y+12	; 0x0c
 746:	2f 77       	andi	r18, 0x7F	; 127
 748:	22 2e       	mov	r2, r18
 74a:	17 c0       	rjmp	.+46     	; 0x77a <vfprintf+0x170>
 74c:	38 01       	movw	r6, r16
 74e:	f2 e0       	ldi	r31, 0x02	; 2
 750:	6f 0e       	add	r6, r31
 752:	71 1c       	adc	r7, r1
 754:	f8 01       	movw	r30, r16
 756:	a0 80       	ld	r10, Z
 758:	b1 80       	ldd	r11, Z+1	; 0x01
 75a:	26 ff       	sbrs	r18, 6
 75c:	03 c0       	rjmp	.+6      	; 0x764 <vfprintf+0x15a>
 75e:	65 2d       	mov	r22, r5
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <vfprintf+0x15e>
 764:	6f ef       	ldi	r22, 0xFF	; 255
 766:	7f ef       	ldi	r23, 0xFF	; 255
 768:	c5 01       	movw	r24, r10
 76a:	2c 87       	std	Y+12, r18	; 0x0c
 76c:	0e 94 1a 06 	call	0xc34	; 0xc34 <strnlen_P>
 770:	2c 01       	movw	r4, r24
 772:	2c 85       	ldd	r18, Y+12	; 0x0c
 774:	20 68       	ori	r18, 0x80	; 128
 776:	22 2e       	mov	r2, r18
 778:	83 01       	movw	r16, r6
 77a:	23 fc       	sbrc	r2, 3
 77c:	1b c0       	rjmp	.+54     	; 0x7b4 <vfprintf+0x1aa>
 77e:	83 2d       	mov	r24, r3
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	48 16       	cp	r4, r24
 784:	59 06       	cpc	r5, r25
 786:	b0 f4       	brcc	.+44     	; 0x7b4 <vfprintf+0x1aa>
 788:	b7 01       	movw	r22, r14
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 792:	3a 94       	dec	r3
 794:	f4 cf       	rjmp	.-24     	; 0x77e <vfprintf+0x174>
 796:	f5 01       	movw	r30, r10
 798:	27 fc       	sbrc	r2, 7
 79a:	85 91       	lpm	r24, Z+
 79c:	27 fe       	sbrs	r2, 7
 79e:	81 91       	ld	r24, Z+
 7a0:	5f 01       	movw	r10, r30
 7a2:	b7 01       	movw	r22, r14
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 7aa:	31 10       	cpse	r3, r1
 7ac:	3a 94       	dec	r3
 7ae:	f1 e0       	ldi	r31, 0x01	; 1
 7b0:	4f 1a       	sub	r4, r31
 7b2:	51 08       	sbc	r5, r1
 7b4:	41 14       	cp	r4, r1
 7b6:	51 04       	cpc	r5, r1
 7b8:	71 f7       	brne	.-36     	; 0x796 <vfprintf+0x18c>
 7ba:	e5 c0       	rjmp	.+458    	; 0x986 <vfprintf+0x37c>
 7bc:	84 36       	cpi	r24, 0x64	; 100
 7be:	11 f0       	breq	.+4      	; 0x7c4 <vfprintf+0x1ba>
 7c0:	89 36       	cpi	r24, 0x69	; 105
 7c2:	39 f5       	brne	.+78     	; 0x812 <vfprintf+0x208>
 7c4:	f8 01       	movw	r30, r16
 7c6:	27 ff       	sbrs	r18, 7
 7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <vfprintf+0x1ce>
 7ca:	60 81       	ld	r22, Z
 7cc:	71 81       	ldd	r23, Z+1	; 0x01
 7ce:	82 81       	ldd	r24, Z+2	; 0x02
 7d0:	93 81       	ldd	r25, Z+3	; 0x03
 7d2:	0c 5f       	subi	r16, 0xFC	; 252
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	08 c0       	rjmp	.+16     	; 0x7e8 <vfprintf+0x1de>
 7d8:	60 81       	ld	r22, Z
 7da:	71 81       	ldd	r23, Z+1	; 0x01
 7dc:	88 27       	eor	r24, r24
 7de:	77 fd       	sbrc	r23, 7
 7e0:	80 95       	com	r24
 7e2:	98 2f       	mov	r25, r24
 7e4:	0e 5f       	subi	r16, 0xFE	; 254
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	2f 76       	andi	r18, 0x6F	; 111
 7ea:	b2 2e       	mov	r11, r18
 7ec:	97 ff       	sbrs	r25, 7
 7ee:	09 c0       	rjmp	.+18     	; 0x802 <vfprintf+0x1f8>
 7f0:	90 95       	com	r25
 7f2:	80 95       	com	r24
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	20 68       	ori	r18, 0x80	; 128
 800:	b2 2e       	mov	r11, r18
 802:	2a e0       	ldi	r18, 0x0A	; 10
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	a4 01       	movw	r20, r8
 808:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__ultoa_invert>
 80c:	a8 2e       	mov	r10, r24
 80e:	a8 18       	sub	r10, r8
 810:	44 c0       	rjmp	.+136    	; 0x89a <vfprintf+0x290>
 812:	85 37       	cpi	r24, 0x75	; 117
 814:	29 f4       	brne	.+10     	; 0x820 <vfprintf+0x216>
 816:	2f 7e       	andi	r18, 0xEF	; 239
 818:	b2 2e       	mov	r11, r18
 81a:	2a e0       	ldi	r18, 0x0A	; 10
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	25 c0       	rjmp	.+74     	; 0x86a <vfprintf+0x260>
 820:	f2 2f       	mov	r31, r18
 822:	f9 7f       	andi	r31, 0xF9	; 249
 824:	bf 2e       	mov	r11, r31
 826:	8f 36       	cpi	r24, 0x6F	; 111
 828:	c1 f0       	breq	.+48     	; 0x85a <vfprintf+0x250>
 82a:	18 f4       	brcc	.+6      	; 0x832 <vfprintf+0x228>
 82c:	88 35       	cpi	r24, 0x58	; 88
 82e:	79 f0       	breq	.+30     	; 0x84e <vfprintf+0x244>
 830:	b4 c0       	rjmp	.+360    	; 0x99a <vfprintf+0x390>
 832:	80 37       	cpi	r24, 0x70	; 112
 834:	19 f0       	breq	.+6      	; 0x83c <vfprintf+0x232>
 836:	88 37       	cpi	r24, 0x78	; 120
 838:	21 f0       	breq	.+8      	; 0x842 <vfprintf+0x238>
 83a:	af c0       	rjmp	.+350    	; 0x99a <vfprintf+0x390>
 83c:	2f 2f       	mov	r18, r31
 83e:	20 61       	ori	r18, 0x10	; 16
 840:	b2 2e       	mov	r11, r18
 842:	b4 fe       	sbrs	r11, 4
 844:	0d c0       	rjmp	.+26     	; 0x860 <vfprintf+0x256>
 846:	8b 2d       	mov	r24, r11
 848:	84 60       	ori	r24, 0x04	; 4
 84a:	b8 2e       	mov	r11, r24
 84c:	09 c0       	rjmp	.+18     	; 0x860 <vfprintf+0x256>
 84e:	24 ff       	sbrs	r18, 4
 850:	0a c0       	rjmp	.+20     	; 0x866 <vfprintf+0x25c>
 852:	9f 2f       	mov	r25, r31
 854:	96 60       	ori	r25, 0x06	; 6
 856:	b9 2e       	mov	r11, r25
 858:	06 c0       	rjmp	.+12     	; 0x866 <vfprintf+0x25c>
 85a:	28 e0       	ldi	r18, 0x08	; 8
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	05 c0       	rjmp	.+10     	; 0x86a <vfprintf+0x260>
 860:	20 e1       	ldi	r18, 0x10	; 16
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x260>
 866:	20 e1       	ldi	r18, 0x10	; 16
 868:	32 e0       	ldi	r19, 0x02	; 2
 86a:	f8 01       	movw	r30, r16
 86c:	b7 fe       	sbrs	r11, 7
 86e:	07 c0       	rjmp	.+14     	; 0x87e <vfprintf+0x274>
 870:	60 81       	ld	r22, Z
 872:	71 81       	ldd	r23, Z+1	; 0x01
 874:	82 81       	ldd	r24, Z+2	; 0x02
 876:	93 81       	ldd	r25, Z+3	; 0x03
 878:	0c 5f       	subi	r16, 0xFC	; 252
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	06 c0       	rjmp	.+12     	; 0x88a <vfprintf+0x280>
 87e:	60 81       	ld	r22, Z
 880:	71 81       	ldd	r23, Z+1	; 0x01
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 5f       	subi	r16, 0xFE	; 254
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	a4 01       	movw	r20, r8
 88c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__ultoa_invert>
 890:	a8 2e       	mov	r10, r24
 892:	a8 18       	sub	r10, r8
 894:	fb 2d       	mov	r31, r11
 896:	ff 77       	andi	r31, 0x7F	; 127
 898:	bf 2e       	mov	r11, r31
 89a:	b6 fe       	sbrs	r11, 6
 89c:	0b c0       	rjmp	.+22     	; 0x8b4 <vfprintf+0x2aa>
 89e:	2b 2d       	mov	r18, r11
 8a0:	2e 7f       	andi	r18, 0xFE	; 254
 8a2:	a5 14       	cp	r10, r5
 8a4:	50 f4       	brcc	.+20     	; 0x8ba <vfprintf+0x2b0>
 8a6:	b4 fe       	sbrs	r11, 4
 8a8:	0a c0       	rjmp	.+20     	; 0x8be <vfprintf+0x2b4>
 8aa:	b2 fc       	sbrc	r11, 2
 8ac:	08 c0       	rjmp	.+16     	; 0x8be <vfprintf+0x2b4>
 8ae:	2b 2d       	mov	r18, r11
 8b0:	2e 7e       	andi	r18, 0xEE	; 238
 8b2:	05 c0       	rjmp	.+10     	; 0x8be <vfprintf+0x2b4>
 8b4:	7a 2c       	mov	r7, r10
 8b6:	2b 2d       	mov	r18, r11
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <vfprintf+0x2b6>
 8ba:	7a 2c       	mov	r7, r10
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <vfprintf+0x2b6>
 8be:	75 2c       	mov	r7, r5
 8c0:	24 ff       	sbrs	r18, 4
 8c2:	0d c0       	rjmp	.+26     	; 0x8de <vfprintf+0x2d4>
 8c4:	fe 01       	movw	r30, r28
 8c6:	ea 0d       	add	r30, r10
 8c8:	f1 1d       	adc	r31, r1
 8ca:	80 81       	ld	r24, Z
 8cc:	80 33       	cpi	r24, 0x30	; 48
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <vfprintf+0x2ca>
 8d0:	29 7e       	andi	r18, 0xE9	; 233
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <vfprintf+0x2dc>
 8d4:	22 ff       	sbrs	r18, 2
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <vfprintf+0x2da>
 8d8:	73 94       	inc	r7
 8da:	73 94       	inc	r7
 8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <vfprintf+0x2dc>
 8de:	82 2f       	mov	r24, r18
 8e0:	86 78       	andi	r24, 0x86	; 134
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <vfprintf+0x2dc>
 8e4:	73 94       	inc	r7
 8e6:	23 fd       	sbrc	r18, 3
 8e8:	13 c0       	rjmp	.+38     	; 0x910 <vfprintf+0x306>
 8ea:	20 ff       	sbrs	r18, 0
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <vfprintf+0x2f0>
 8ee:	5a 2c       	mov	r5, r10
 8f0:	73 14       	cp	r7, r3
 8f2:	18 f4       	brcc	.+6      	; 0x8fa <vfprintf+0x2f0>
 8f4:	53 0c       	add	r5, r3
 8f6:	57 18       	sub	r5, r7
 8f8:	73 2c       	mov	r7, r3
 8fa:	73 14       	cp	r7, r3
 8fc:	68 f4       	brcc	.+26     	; 0x918 <vfprintf+0x30e>
 8fe:	b7 01       	movw	r22, r14
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	2c 87       	std	Y+12, r18	; 0x0c
 906:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 90a:	73 94       	inc	r7
 90c:	2c 85       	ldd	r18, Y+12	; 0x0c
 90e:	f5 cf       	rjmp	.-22     	; 0x8fa <vfprintf+0x2f0>
 910:	73 14       	cp	r7, r3
 912:	10 f4       	brcc	.+4      	; 0x918 <vfprintf+0x30e>
 914:	37 18       	sub	r3, r7
 916:	01 c0       	rjmp	.+2      	; 0x91a <vfprintf+0x310>
 918:	31 2c       	mov	r3, r1
 91a:	24 ff       	sbrs	r18, 4
 91c:	12 c0       	rjmp	.+36     	; 0x942 <vfprintf+0x338>
 91e:	b7 01       	movw	r22, r14
 920:	80 e3       	ldi	r24, 0x30	; 48
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	2c 87       	std	Y+12, r18	; 0x0c
 926:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 92a:	2c 85       	ldd	r18, Y+12	; 0x0c
 92c:	22 ff       	sbrs	r18, 2
 92e:	17 c0       	rjmp	.+46     	; 0x95e <vfprintf+0x354>
 930:	21 ff       	sbrs	r18, 1
 932:	03 c0       	rjmp	.+6      	; 0x93a <vfprintf+0x330>
 934:	88 e5       	ldi	r24, 0x58	; 88
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	02 c0       	rjmp	.+4      	; 0x93e <vfprintf+0x334>
 93a:	88 e7       	ldi	r24, 0x78	; 120
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	b7 01       	movw	r22, r14
 940:	0c c0       	rjmp	.+24     	; 0x95a <vfprintf+0x350>
 942:	82 2f       	mov	r24, r18
 944:	86 78       	andi	r24, 0x86	; 134
 946:	59 f0       	breq	.+22     	; 0x95e <vfprintf+0x354>
 948:	21 fd       	sbrc	r18, 1
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0x346>
 94c:	80 e2       	ldi	r24, 0x20	; 32
 94e:	01 c0       	rjmp	.+2      	; 0x952 <vfprintf+0x348>
 950:	8b e2       	ldi	r24, 0x2B	; 43
 952:	27 fd       	sbrc	r18, 7
 954:	8d e2       	ldi	r24, 0x2D	; 45
 956:	b7 01       	movw	r22, r14
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 95e:	a5 14       	cp	r10, r5
 960:	38 f4       	brcc	.+14     	; 0x970 <vfprintf+0x366>
 962:	b7 01       	movw	r22, r14
 964:	80 e3       	ldi	r24, 0x30	; 48
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 96c:	5a 94       	dec	r5
 96e:	f7 cf       	rjmp	.-18     	; 0x95e <vfprintf+0x354>
 970:	aa 94       	dec	r10
 972:	f4 01       	movw	r30, r8
 974:	ea 0d       	add	r30, r10
 976:	f1 1d       	adc	r31, r1
 978:	80 81       	ld	r24, Z
 97a:	b7 01       	movw	r22, r14
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 982:	a1 10       	cpse	r10, r1
 984:	f5 cf       	rjmp	.-22     	; 0x970 <vfprintf+0x366>
 986:	33 20       	and	r3, r3
 988:	09 f4       	brne	.+2      	; 0x98c <vfprintf+0x382>
 98a:	51 ce       	rjmp	.-862    	; 0x62e <vfprintf+0x24>
 98c:	b7 01       	movw	r22, r14
 98e:	80 e2       	ldi	r24, 0x20	; 32
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 37 06 	call	0xc6e	; 0xc6e <fputc>
 996:	3a 94       	dec	r3
 998:	f6 cf       	rjmp	.-20     	; 0x986 <vfprintf+0x37c>
 99a:	f7 01       	movw	r30, r14
 99c:	86 81       	ldd	r24, Z+6	; 0x06
 99e:	97 81       	ldd	r25, Z+7	; 0x07
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <vfprintf+0x39c>
 9a2:	8f ef       	ldi	r24, 0xFF	; 255
 9a4:	9f ef       	ldi	r25, 0xFF	; 255
 9a6:	2c 96       	adiw	r28, 0x0c	; 12
 9a8:	e2 e1       	ldi	r30, 0x12	; 18
 9aa:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__epilogue_restores__>

000009ae <calloc>:
 9ae:	0f 93       	push	r16
 9b0:	1f 93       	push	r17
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	86 9f       	mul	r24, r22
 9b8:	80 01       	movw	r16, r0
 9ba:	87 9f       	mul	r24, r23
 9bc:	10 0d       	add	r17, r0
 9be:	96 9f       	mul	r25, r22
 9c0:	10 0d       	add	r17, r0
 9c2:	11 24       	eor	r1, r1
 9c4:	c8 01       	movw	r24, r16
 9c6:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <malloc>
 9ca:	ec 01       	movw	r28, r24
 9cc:	00 97       	sbiw	r24, 0x00	; 0
 9ce:	29 f0       	breq	.+10     	; 0x9da <calloc+0x2c>
 9d0:	a8 01       	movw	r20, r16
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	0e 94 25 06 	call	0xc4a	; 0xc4a <memset>
 9da:	ce 01       	movw	r24, r28
 9dc:	df 91       	pop	r29
 9de:	cf 91       	pop	r28
 9e0:	1f 91       	pop	r17
 9e2:	0f 91       	pop	r16
 9e4:	08 95       	ret

000009e6 <malloc>:
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	82 30       	cpi	r24, 0x02	; 2
 9ec:	91 05       	cpc	r25, r1
 9ee:	10 f4       	brcc	.+4      	; 0x9f4 <malloc+0xe>
 9f0:	82 e0       	ldi	r24, 0x02	; 2
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	e0 91 20 01 	lds	r30, 0x0120
 9f8:	f0 91 21 01 	lds	r31, 0x0121
 9fc:	20 e0       	ldi	r18, 0x00	; 0
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	a0 e0       	ldi	r26, 0x00	; 0
 a02:	b0 e0       	ldi	r27, 0x00	; 0
 a04:	30 97       	sbiw	r30, 0x00	; 0
 a06:	39 f1       	breq	.+78     	; 0xa56 <malloc+0x70>
 a08:	40 81       	ld	r20, Z
 a0a:	51 81       	ldd	r21, Z+1	; 0x01
 a0c:	48 17       	cp	r20, r24
 a0e:	59 07       	cpc	r21, r25
 a10:	b8 f0       	brcs	.+46     	; 0xa40 <malloc+0x5a>
 a12:	48 17       	cp	r20, r24
 a14:	59 07       	cpc	r21, r25
 a16:	71 f4       	brne	.+28     	; 0xa34 <malloc+0x4e>
 a18:	82 81       	ldd	r24, Z+2	; 0x02
 a1a:	93 81       	ldd	r25, Z+3	; 0x03
 a1c:	10 97       	sbiw	r26, 0x00	; 0
 a1e:	29 f0       	breq	.+10     	; 0xa2a <malloc+0x44>
 a20:	13 96       	adiw	r26, 0x03	; 3
 a22:	9c 93       	st	X, r25
 a24:	8e 93       	st	-X, r24
 a26:	12 97       	sbiw	r26, 0x02	; 2
 a28:	2c c0       	rjmp	.+88     	; 0xa82 <malloc+0x9c>
 a2a:	90 93 21 01 	sts	0x0121, r25
 a2e:	80 93 20 01 	sts	0x0120, r24
 a32:	27 c0       	rjmp	.+78     	; 0xa82 <malloc+0x9c>
 a34:	21 15       	cp	r18, r1
 a36:	31 05       	cpc	r19, r1
 a38:	31 f0       	breq	.+12     	; 0xa46 <malloc+0x60>
 a3a:	42 17       	cp	r20, r18
 a3c:	53 07       	cpc	r21, r19
 a3e:	18 f0       	brcs	.+6      	; 0xa46 <malloc+0x60>
 a40:	a9 01       	movw	r20, r18
 a42:	db 01       	movw	r26, r22
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <malloc+0x62>
 a46:	ef 01       	movw	r28, r30
 a48:	9a 01       	movw	r18, r20
 a4a:	bd 01       	movw	r22, r26
 a4c:	df 01       	movw	r26, r30
 a4e:	02 80       	ldd	r0, Z+2	; 0x02
 a50:	f3 81       	ldd	r31, Z+3	; 0x03
 a52:	e0 2d       	mov	r30, r0
 a54:	d7 cf       	rjmp	.-82     	; 0xa04 <malloc+0x1e>
 a56:	21 15       	cp	r18, r1
 a58:	31 05       	cpc	r19, r1
 a5a:	f9 f0       	breq	.+62     	; 0xa9a <malloc+0xb4>
 a5c:	28 1b       	sub	r18, r24
 a5e:	39 0b       	sbc	r19, r25
 a60:	24 30       	cpi	r18, 0x04	; 4
 a62:	31 05       	cpc	r19, r1
 a64:	80 f4       	brcc	.+32     	; 0xa86 <malloc+0xa0>
 a66:	8a 81       	ldd	r24, Y+2	; 0x02
 a68:	9b 81       	ldd	r25, Y+3	; 0x03
 a6a:	61 15       	cp	r22, r1
 a6c:	71 05       	cpc	r23, r1
 a6e:	21 f0       	breq	.+8      	; 0xa78 <malloc+0x92>
 a70:	fb 01       	movw	r30, r22
 a72:	93 83       	std	Z+3, r25	; 0x03
 a74:	82 83       	std	Z+2, r24	; 0x02
 a76:	04 c0       	rjmp	.+8      	; 0xa80 <malloc+0x9a>
 a78:	90 93 21 01 	sts	0x0121, r25
 a7c:	80 93 20 01 	sts	0x0120, r24
 a80:	fe 01       	movw	r30, r28
 a82:	32 96       	adiw	r30, 0x02	; 2
 a84:	44 c0       	rjmp	.+136    	; 0xb0e <malloc+0x128>
 a86:	fe 01       	movw	r30, r28
 a88:	e2 0f       	add	r30, r18
 a8a:	f3 1f       	adc	r31, r19
 a8c:	81 93       	st	Z+, r24
 a8e:	91 93       	st	Z+, r25
 a90:	22 50       	subi	r18, 0x02	; 2
 a92:	31 09       	sbc	r19, r1
 a94:	39 83       	std	Y+1, r19	; 0x01
 a96:	28 83       	st	Y, r18
 a98:	3a c0       	rjmp	.+116    	; 0xb0e <malloc+0x128>
 a9a:	20 91 1e 01 	lds	r18, 0x011E
 a9e:	30 91 1f 01 	lds	r19, 0x011F
 aa2:	23 2b       	or	r18, r19
 aa4:	41 f4       	brne	.+16     	; 0xab6 <malloc+0xd0>
 aa6:	20 91 02 01 	lds	r18, 0x0102
 aaa:	30 91 03 01 	lds	r19, 0x0103
 aae:	30 93 1f 01 	sts	0x011F, r19
 ab2:	20 93 1e 01 	sts	0x011E, r18
 ab6:	20 91 00 01 	lds	r18, 0x0100
 aba:	30 91 01 01 	lds	r19, 0x0101
 abe:	21 15       	cp	r18, r1
 ac0:	31 05       	cpc	r19, r1
 ac2:	41 f4       	brne	.+16     	; 0xad4 <malloc+0xee>
 ac4:	2d b7       	in	r18, 0x3d	; 61
 ac6:	3e b7       	in	r19, 0x3e	; 62
 ac8:	40 91 04 01 	lds	r20, 0x0104
 acc:	50 91 05 01 	lds	r21, 0x0105
 ad0:	24 1b       	sub	r18, r20
 ad2:	35 0b       	sbc	r19, r21
 ad4:	e0 91 1e 01 	lds	r30, 0x011E
 ad8:	f0 91 1f 01 	lds	r31, 0x011F
 adc:	e2 17       	cp	r30, r18
 ade:	f3 07       	cpc	r31, r19
 ae0:	a0 f4       	brcc	.+40     	; 0xb0a <malloc+0x124>
 ae2:	2e 1b       	sub	r18, r30
 ae4:	3f 0b       	sbc	r19, r31
 ae6:	28 17       	cp	r18, r24
 ae8:	39 07       	cpc	r19, r25
 aea:	78 f0       	brcs	.+30     	; 0xb0a <malloc+0x124>
 aec:	ac 01       	movw	r20, r24
 aee:	4e 5f       	subi	r20, 0xFE	; 254
 af0:	5f 4f       	sbci	r21, 0xFF	; 255
 af2:	24 17       	cp	r18, r20
 af4:	35 07       	cpc	r19, r21
 af6:	48 f0       	brcs	.+18     	; 0xb0a <malloc+0x124>
 af8:	4e 0f       	add	r20, r30
 afa:	5f 1f       	adc	r21, r31
 afc:	50 93 1f 01 	sts	0x011F, r21
 b00:	40 93 1e 01 	sts	0x011E, r20
 b04:	81 93       	st	Z+, r24
 b06:	91 93       	st	Z+, r25
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <malloc+0x128>
 b0a:	e0 e0       	ldi	r30, 0x00	; 0
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	cf 01       	movw	r24, r30
 b10:	df 91       	pop	r29
 b12:	cf 91       	pop	r28
 b14:	08 95       	ret

00000b16 <free>:
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	00 97       	sbiw	r24, 0x00	; 0
 b1c:	09 f4       	brne	.+2      	; 0xb20 <free+0xa>
 b1e:	87 c0       	rjmp	.+270    	; 0xc2e <free+0x118>
 b20:	fc 01       	movw	r30, r24
 b22:	32 97       	sbiw	r30, 0x02	; 2
 b24:	13 82       	std	Z+3, r1	; 0x03
 b26:	12 82       	std	Z+2, r1	; 0x02
 b28:	c0 91 20 01 	lds	r28, 0x0120
 b2c:	d0 91 21 01 	lds	r29, 0x0121
 b30:	20 97       	sbiw	r28, 0x00	; 0
 b32:	81 f4       	brne	.+32     	; 0xb54 <free+0x3e>
 b34:	20 81       	ld	r18, Z
 b36:	31 81       	ldd	r19, Z+1	; 0x01
 b38:	28 0f       	add	r18, r24
 b3a:	39 1f       	adc	r19, r25
 b3c:	80 91 1e 01 	lds	r24, 0x011E
 b40:	90 91 1f 01 	lds	r25, 0x011F
 b44:	82 17       	cp	r24, r18
 b46:	93 07       	cpc	r25, r19
 b48:	79 f5       	brne	.+94     	; 0xba8 <free+0x92>
 b4a:	f0 93 1f 01 	sts	0x011F, r31
 b4e:	e0 93 1e 01 	sts	0x011E, r30
 b52:	6d c0       	rjmp	.+218    	; 0xc2e <free+0x118>
 b54:	de 01       	movw	r26, r28
 b56:	20 e0       	ldi	r18, 0x00	; 0
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	ae 17       	cp	r26, r30
 b5c:	bf 07       	cpc	r27, r31
 b5e:	50 f4       	brcc	.+20     	; 0xb74 <free+0x5e>
 b60:	12 96       	adiw	r26, 0x02	; 2
 b62:	4d 91       	ld	r20, X+
 b64:	5c 91       	ld	r21, X
 b66:	13 97       	sbiw	r26, 0x03	; 3
 b68:	9d 01       	movw	r18, r26
 b6a:	41 15       	cp	r20, r1
 b6c:	51 05       	cpc	r21, r1
 b6e:	09 f1       	breq	.+66     	; 0xbb2 <free+0x9c>
 b70:	da 01       	movw	r26, r20
 b72:	f3 cf       	rjmp	.-26     	; 0xb5a <free+0x44>
 b74:	b3 83       	std	Z+3, r27	; 0x03
 b76:	a2 83       	std	Z+2, r26	; 0x02
 b78:	40 81       	ld	r20, Z
 b7a:	51 81       	ldd	r21, Z+1	; 0x01
 b7c:	84 0f       	add	r24, r20
 b7e:	95 1f       	adc	r25, r21
 b80:	8a 17       	cp	r24, r26
 b82:	9b 07       	cpc	r25, r27
 b84:	71 f4       	brne	.+28     	; 0xba2 <free+0x8c>
 b86:	8d 91       	ld	r24, X+
 b88:	9c 91       	ld	r25, X
 b8a:	11 97       	sbiw	r26, 0x01	; 1
 b8c:	84 0f       	add	r24, r20
 b8e:	95 1f       	adc	r25, r21
 b90:	02 96       	adiw	r24, 0x02	; 2
 b92:	91 83       	std	Z+1, r25	; 0x01
 b94:	80 83       	st	Z, r24
 b96:	12 96       	adiw	r26, 0x02	; 2
 b98:	8d 91       	ld	r24, X+
 b9a:	9c 91       	ld	r25, X
 b9c:	13 97       	sbiw	r26, 0x03	; 3
 b9e:	93 83       	std	Z+3, r25	; 0x03
 ba0:	82 83       	std	Z+2, r24	; 0x02
 ba2:	21 15       	cp	r18, r1
 ba4:	31 05       	cpc	r19, r1
 ba6:	29 f4       	brne	.+10     	; 0xbb2 <free+0x9c>
 ba8:	f0 93 21 01 	sts	0x0121, r31
 bac:	e0 93 20 01 	sts	0x0120, r30
 bb0:	3e c0       	rjmp	.+124    	; 0xc2e <free+0x118>
 bb2:	d9 01       	movw	r26, r18
 bb4:	13 96       	adiw	r26, 0x03	; 3
 bb6:	fc 93       	st	X, r31
 bb8:	ee 93       	st	-X, r30
 bba:	12 97       	sbiw	r26, 0x02	; 2
 bbc:	4d 91       	ld	r20, X+
 bbe:	5d 91       	ld	r21, X+
 bc0:	a4 0f       	add	r26, r20
 bc2:	b5 1f       	adc	r27, r21
 bc4:	ea 17       	cp	r30, r26
 bc6:	fb 07       	cpc	r31, r27
 bc8:	79 f4       	brne	.+30     	; 0xbe8 <free+0xd2>
 bca:	80 81       	ld	r24, Z
 bcc:	91 81       	ldd	r25, Z+1	; 0x01
 bce:	84 0f       	add	r24, r20
 bd0:	95 1f       	adc	r25, r21
 bd2:	02 96       	adiw	r24, 0x02	; 2
 bd4:	d9 01       	movw	r26, r18
 bd6:	11 96       	adiw	r26, 0x01	; 1
 bd8:	9c 93       	st	X, r25
 bda:	8e 93       	st	-X, r24
 bdc:	82 81       	ldd	r24, Z+2	; 0x02
 bde:	93 81       	ldd	r25, Z+3	; 0x03
 be0:	13 96       	adiw	r26, 0x03	; 3
 be2:	9c 93       	st	X, r25
 be4:	8e 93       	st	-X, r24
 be6:	12 97       	sbiw	r26, 0x02	; 2
 be8:	e0 e0       	ldi	r30, 0x00	; 0
 bea:	f0 e0       	ldi	r31, 0x00	; 0
 bec:	8a 81       	ldd	r24, Y+2	; 0x02
 bee:	9b 81       	ldd	r25, Y+3	; 0x03
 bf0:	00 97       	sbiw	r24, 0x00	; 0
 bf2:	19 f0       	breq	.+6      	; 0xbfa <free+0xe4>
 bf4:	fe 01       	movw	r30, r28
 bf6:	ec 01       	movw	r28, r24
 bf8:	f9 cf       	rjmp	.-14     	; 0xbec <free+0xd6>
 bfa:	ce 01       	movw	r24, r28
 bfc:	02 96       	adiw	r24, 0x02	; 2
 bfe:	28 81       	ld	r18, Y
 c00:	39 81       	ldd	r19, Y+1	; 0x01
 c02:	82 0f       	add	r24, r18
 c04:	93 1f       	adc	r25, r19
 c06:	20 91 1e 01 	lds	r18, 0x011E
 c0a:	30 91 1f 01 	lds	r19, 0x011F
 c0e:	28 17       	cp	r18, r24
 c10:	39 07       	cpc	r19, r25
 c12:	69 f4       	brne	.+26     	; 0xc2e <free+0x118>
 c14:	30 97       	sbiw	r30, 0x00	; 0
 c16:	29 f4       	brne	.+10     	; 0xc22 <free+0x10c>
 c18:	10 92 21 01 	sts	0x0121, r1
 c1c:	10 92 20 01 	sts	0x0120, r1
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <free+0x110>
 c22:	13 82       	std	Z+3, r1	; 0x03
 c24:	12 82       	std	Z+2, r1	; 0x02
 c26:	d0 93 1f 01 	sts	0x011F, r29
 c2a:	c0 93 1e 01 	sts	0x011E, r28
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	08 95       	ret

00000c34 <strnlen_P>:
 c34:	fc 01       	movw	r30, r24
 c36:	05 90       	lpm	r0, Z+
 c38:	61 50       	subi	r22, 0x01	; 1
 c3a:	70 40       	sbci	r23, 0x00	; 0
 c3c:	01 10       	cpse	r0, r1
 c3e:	d8 f7       	brcc	.-10     	; 0xc36 <strnlen_P+0x2>
 c40:	80 95       	com	r24
 c42:	90 95       	com	r25
 c44:	8e 0f       	add	r24, r30
 c46:	9f 1f       	adc	r25, r31
 c48:	08 95       	ret

00000c4a <memset>:
 c4a:	dc 01       	movw	r26, r24
 c4c:	01 c0       	rjmp	.+2      	; 0xc50 <memset+0x6>
 c4e:	6d 93       	st	X+, r22
 c50:	41 50       	subi	r20, 0x01	; 1
 c52:	50 40       	sbci	r21, 0x00	; 0
 c54:	e0 f7       	brcc	.-8      	; 0xc4e <memset+0x4>
 c56:	08 95       	ret

00000c58 <strnlen>:
 c58:	fc 01       	movw	r30, r24
 c5a:	61 50       	subi	r22, 0x01	; 1
 c5c:	70 40       	sbci	r23, 0x00	; 0
 c5e:	01 90       	ld	r0, Z+
 c60:	01 10       	cpse	r0, r1
 c62:	d8 f7       	brcc	.-10     	; 0xc5a <strnlen+0x2>
 c64:	80 95       	com	r24
 c66:	90 95       	com	r25
 c68:	8e 0f       	add	r24, r30
 c6a:	9f 1f       	adc	r25, r31
 c6c:	08 95       	ret

00000c6e <fputc>:
 c6e:	0f 93       	push	r16
 c70:	1f 93       	push	r17
 c72:	cf 93       	push	r28
 c74:	df 93       	push	r29
 c76:	18 2f       	mov	r17, r24
 c78:	09 2f       	mov	r16, r25
 c7a:	eb 01       	movw	r28, r22
 c7c:	8b 81       	ldd	r24, Y+3	; 0x03
 c7e:	81 fd       	sbrc	r24, 1
 c80:	03 c0       	rjmp	.+6      	; 0xc88 <fputc+0x1a>
 c82:	8f ef       	ldi	r24, 0xFF	; 255
 c84:	9f ef       	ldi	r25, 0xFF	; 255
 c86:	20 c0       	rjmp	.+64     	; 0xcc8 <fputc+0x5a>
 c88:	82 ff       	sbrs	r24, 2
 c8a:	10 c0       	rjmp	.+32     	; 0xcac <fputc+0x3e>
 c8c:	4e 81       	ldd	r20, Y+6	; 0x06
 c8e:	5f 81       	ldd	r21, Y+7	; 0x07
 c90:	2c 81       	ldd	r18, Y+4	; 0x04
 c92:	3d 81       	ldd	r19, Y+5	; 0x05
 c94:	42 17       	cp	r20, r18
 c96:	53 07       	cpc	r21, r19
 c98:	7c f4       	brge	.+30     	; 0xcb8 <fputc+0x4a>
 c9a:	e8 81       	ld	r30, Y
 c9c:	f9 81       	ldd	r31, Y+1	; 0x01
 c9e:	9f 01       	movw	r18, r30
 ca0:	2f 5f       	subi	r18, 0xFF	; 255
 ca2:	3f 4f       	sbci	r19, 0xFF	; 255
 ca4:	39 83       	std	Y+1, r19	; 0x01
 ca6:	28 83       	st	Y, r18
 ca8:	10 83       	st	Z, r17
 caa:	06 c0       	rjmp	.+12     	; 0xcb8 <fputc+0x4a>
 cac:	e8 85       	ldd	r30, Y+8	; 0x08
 cae:	f9 85       	ldd	r31, Y+9	; 0x09
 cb0:	81 2f       	mov	r24, r17
 cb2:	09 95       	icall
 cb4:	89 2b       	or	r24, r25
 cb6:	29 f7       	brne	.-54     	; 0xc82 <fputc+0x14>
 cb8:	2e 81       	ldd	r18, Y+6	; 0x06
 cba:	3f 81       	ldd	r19, Y+7	; 0x07
 cbc:	2f 5f       	subi	r18, 0xFF	; 255
 cbe:	3f 4f       	sbci	r19, 0xFF	; 255
 cc0:	3f 83       	std	Y+7, r19	; 0x07
 cc2:	2e 83       	std	Y+6, r18	; 0x06
 cc4:	81 2f       	mov	r24, r17
 cc6:	90 2f       	mov	r25, r16
 cc8:	df 91       	pop	r29
 cca:	cf 91       	pop	r28
 ccc:	1f 91       	pop	r17
 cce:	0f 91       	pop	r16
 cd0:	08 95       	ret

00000cd2 <__ultoa_invert>:
 cd2:	fa 01       	movw	r30, r20
 cd4:	aa 27       	eor	r26, r26
 cd6:	28 30       	cpi	r18, 0x08	; 8
 cd8:	51 f1       	breq	.+84     	; 0xd2e <__ultoa_invert+0x5c>
 cda:	20 31       	cpi	r18, 0x10	; 16
 cdc:	81 f1       	breq	.+96     	; 0xd3e <__ultoa_invert+0x6c>
 cde:	e8 94       	clt
 ce0:	6f 93       	push	r22
 ce2:	6e 7f       	andi	r22, 0xFE	; 254
 ce4:	6e 5f       	subi	r22, 0xFE	; 254
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	af 4f       	sbci	r26, 0xFF	; 255
 cee:	b1 e0       	ldi	r27, 0x01	; 1
 cf0:	3e d0       	rcall	.+124    	; 0xd6e <__ultoa_invert+0x9c>
 cf2:	b4 e0       	ldi	r27, 0x04	; 4
 cf4:	3c d0       	rcall	.+120    	; 0xd6e <__ultoa_invert+0x9c>
 cf6:	67 0f       	add	r22, r23
 cf8:	78 1f       	adc	r23, r24
 cfa:	89 1f       	adc	r24, r25
 cfc:	9a 1f       	adc	r25, r26
 cfe:	a1 1d       	adc	r26, r1
 d00:	68 0f       	add	r22, r24
 d02:	79 1f       	adc	r23, r25
 d04:	8a 1f       	adc	r24, r26
 d06:	91 1d       	adc	r25, r1
 d08:	a1 1d       	adc	r26, r1
 d0a:	6a 0f       	add	r22, r26
 d0c:	71 1d       	adc	r23, r1
 d0e:	81 1d       	adc	r24, r1
 d10:	91 1d       	adc	r25, r1
 d12:	a1 1d       	adc	r26, r1
 d14:	20 d0       	rcall	.+64     	; 0xd56 <__ultoa_invert+0x84>
 d16:	09 f4       	brne	.+2      	; 0xd1a <__ultoa_invert+0x48>
 d18:	68 94       	set
 d1a:	3f 91       	pop	r19
 d1c:	2a e0       	ldi	r18, 0x0A	; 10
 d1e:	26 9f       	mul	r18, r22
 d20:	11 24       	eor	r1, r1
 d22:	30 19       	sub	r19, r0
 d24:	30 5d       	subi	r19, 0xD0	; 208
 d26:	31 93       	st	Z+, r19
 d28:	de f6       	brtc	.-74     	; 0xce0 <__ultoa_invert+0xe>
 d2a:	cf 01       	movw	r24, r30
 d2c:	08 95       	ret
 d2e:	46 2f       	mov	r20, r22
 d30:	47 70       	andi	r20, 0x07	; 7
 d32:	40 5d       	subi	r20, 0xD0	; 208
 d34:	41 93       	st	Z+, r20
 d36:	b3 e0       	ldi	r27, 0x03	; 3
 d38:	0f d0       	rcall	.+30     	; 0xd58 <__ultoa_invert+0x86>
 d3a:	c9 f7       	brne	.-14     	; 0xd2e <__ultoa_invert+0x5c>
 d3c:	f6 cf       	rjmp	.-20     	; 0xd2a <__ultoa_invert+0x58>
 d3e:	46 2f       	mov	r20, r22
 d40:	4f 70       	andi	r20, 0x0F	; 15
 d42:	40 5d       	subi	r20, 0xD0	; 208
 d44:	4a 33       	cpi	r20, 0x3A	; 58
 d46:	18 f0       	brcs	.+6      	; 0xd4e <__ultoa_invert+0x7c>
 d48:	49 5d       	subi	r20, 0xD9	; 217
 d4a:	31 fd       	sbrc	r19, 1
 d4c:	40 52       	subi	r20, 0x20	; 32
 d4e:	41 93       	st	Z+, r20
 d50:	02 d0       	rcall	.+4      	; 0xd56 <__ultoa_invert+0x84>
 d52:	a9 f7       	brne	.-22     	; 0xd3e <__ultoa_invert+0x6c>
 d54:	ea cf       	rjmp	.-44     	; 0xd2a <__ultoa_invert+0x58>
 d56:	b4 e0       	ldi	r27, 0x04	; 4
 d58:	a6 95       	lsr	r26
 d5a:	97 95       	ror	r25
 d5c:	87 95       	ror	r24
 d5e:	77 95       	ror	r23
 d60:	67 95       	ror	r22
 d62:	ba 95       	dec	r27
 d64:	c9 f7       	brne	.-14     	; 0xd58 <__ultoa_invert+0x86>
 d66:	00 97       	sbiw	r24, 0x00	; 0
 d68:	61 05       	cpc	r22, r1
 d6a:	71 05       	cpc	r23, r1
 d6c:	08 95       	ret
 d6e:	9b 01       	movw	r18, r22
 d70:	ac 01       	movw	r20, r24
 d72:	0a 2e       	mov	r0, r26
 d74:	06 94       	lsr	r0
 d76:	57 95       	ror	r21
 d78:	47 95       	ror	r20
 d7a:	37 95       	ror	r19
 d7c:	27 95       	ror	r18
 d7e:	ba 95       	dec	r27
 d80:	c9 f7       	brne	.-14     	; 0xd74 <__ultoa_invert+0xa2>
 d82:	62 0f       	add	r22, r18
 d84:	73 1f       	adc	r23, r19
 d86:	84 1f       	adc	r24, r20
 d88:	95 1f       	adc	r25, r21
 d8a:	a0 1d       	adc	r26, r0
 d8c:	08 95       	ret

00000d8e <__prologue_saves__>:
 d8e:	2f 92       	push	r2
 d90:	3f 92       	push	r3
 d92:	4f 92       	push	r4
 d94:	5f 92       	push	r5
 d96:	6f 92       	push	r6
 d98:	7f 92       	push	r7
 d9a:	8f 92       	push	r8
 d9c:	9f 92       	push	r9
 d9e:	af 92       	push	r10
 da0:	bf 92       	push	r11
 da2:	cf 92       	push	r12
 da4:	df 92       	push	r13
 da6:	ef 92       	push	r14
 da8:	ff 92       	push	r15
 daa:	0f 93       	push	r16
 dac:	1f 93       	push	r17
 dae:	cf 93       	push	r28
 db0:	df 93       	push	r29
 db2:	cd b7       	in	r28, 0x3d	; 61
 db4:	de b7       	in	r29, 0x3e	; 62
 db6:	ca 1b       	sub	r28, r26
 db8:	db 0b       	sbc	r29, r27
 dba:	0f b6       	in	r0, 0x3f	; 63
 dbc:	f8 94       	cli
 dbe:	de bf       	out	0x3e, r29	; 62
 dc0:	0f be       	out	0x3f, r0	; 63
 dc2:	cd bf       	out	0x3d, r28	; 61
 dc4:	09 94       	ijmp

00000dc6 <__epilogue_restores__>:
 dc6:	2a 88       	ldd	r2, Y+18	; 0x12
 dc8:	39 88       	ldd	r3, Y+17	; 0x11
 dca:	48 88       	ldd	r4, Y+16	; 0x10
 dcc:	5f 84       	ldd	r5, Y+15	; 0x0f
 dce:	6e 84       	ldd	r6, Y+14	; 0x0e
 dd0:	7d 84       	ldd	r7, Y+13	; 0x0d
 dd2:	8c 84       	ldd	r8, Y+12	; 0x0c
 dd4:	9b 84       	ldd	r9, Y+11	; 0x0b
 dd6:	aa 84       	ldd	r10, Y+10	; 0x0a
 dd8:	b9 84       	ldd	r11, Y+9	; 0x09
 dda:	c8 84       	ldd	r12, Y+8	; 0x08
 ddc:	df 80       	ldd	r13, Y+7	; 0x07
 dde:	ee 80       	ldd	r14, Y+6	; 0x06
 de0:	fd 80       	ldd	r15, Y+5	; 0x05
 de2:	0c 81       	ldd	r16, Y+4	; 0x04
 de4:	1b 81       	ldd	r17, Y+3	; 0x03
 de6:	aa 81       	ldd	r26, Y+2	; 0x02
 de8:	b9 81       	ldd	r27, Y+1	; 0x01
 dea:	ce 0f       	add	r28, r30
 dec:	d1 1d       	adc	r29, r1
 dee:	0f b6       	in	r0, 0x3f	; 63
 df0:	f8 94       	cli
 df2:	de bf       	out	0x3e, r29	; 62
 df4:	0f be       	out	0x3f, r0	; 63
 df6:	cd bf       	out	0x3d, r28	; 61
 df8:	ed 01       	movw	r28, r26
 dfa:	08 95       	ret

00000dfc <_exit>:
 dfc:	f8 94       	cli

00000dfe <__stop_program>:
 dfe:	ff cf       	rjmp	.-2      	; 0xdfe <__stop_program>
