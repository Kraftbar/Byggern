
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000606  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  000006a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001567  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000836  00000000  00000000  00001da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000899  00000000  00000000  000025d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000034c  00000000  00000000  00002e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000463  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d5e  00000000  00000000  00003623  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00004381  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e0       	ldi	r30, 0x06	; 6
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 30       	cpi	r26, 0x0A	; 10
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e0       	ldi	r26, 0x0A	; 10
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 31       	cpi	r26, 0x14	; 20
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 80 00 	call	0x100	; 0x100 <main>
  a6:	0c 94 01 03 	jmp	0x602	; 0x602 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <delayus>:
}


void delayus(unsigned int time)
{
	while(time > 0)
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	31 f0       	breq	.+12     	; 0xcc <delayus+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <delayus+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <delayus+0x8>
  c4:	00 00       	nop
	{
		_delay_us(1);
		time--;
  c6:	01 97       	sbiw	r24, 0x01	; 1
}


void delayus(unsigned int time)
{
	while(time > 0)
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	d1 f7       	brne	.-12     	; 0xc0 <delayus+0x4>
  cc:	08 95       	ret

000000ce <buzz>:
#define LED_PORT    PORTD
#define LED_PIN     5
#define LED_off()  LED_PORT&=~_BV(LED_PIN)
#define LED_on() LED_PORT|=_BV(LED_PIN)
void buzz(unsigned int freq, int time)
{
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	8c 01       	movw	r16, r24
  d8:	eb 01       	movw	r28, r22
	while (time>0)
  da:	1c 16       	cp	r1, r28
  dc:	1d 06       	cpc	r1, r29
  de:	5c f4       	brge	.+22     	; 0xf6 <buzz+0x28>
	{
	LED_on();
  e0:	95 9a       	sbi	0x12, 5	; 18
	delayus(freq);
  e2:	c8 01       	movw	r24, r16
  e4:	0e 94 5e 00 	call	0xbc	; 0xbc <delayus>
	LED_off();
  e8:	95 98       	cbi	0x12, 5	; 18
	delayus(freq);
  ea:	c8 01       	movw	r24, r16
  ec:	0e 94 5e 00 	call	0xbc	; 0xbc <delayus>
	time--;
  f0:	21 97       	sbiw	r28, 0x01	; 1
#define LED_PIN     5
#define LED_off()  LED_PORT&=~_BV(LED_PIN)
#define LED_on() LED_PORT|=_BV(LED_PIN)
void buzz(unsigned int freq, int time)
{
	while (time>0)
  f2:	20 97       	sbiw	r28, 0x00	; 0
  f4:	a9 f7       	brne	.-22     	; 0xe0 <buzz+0x12>
	delayus(freq);
	LED_off();
	delayus(freq);
	time--;
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <main>:
unsigned char TestChar = 'm';


int main(void)
{
	DDRD  = 0xFF;
 100:	cf ef       	ldi	r28, 0xFF	; 255
 102:	c1 bb       	out	0x11, r28	; 17
	
	UartInit();
 104:	0e 94 5e 01 	call	0x2bc	; 0x2bc <UartInit>
	
	SRAM_init();
 108:	0e 94 4f 01 	call	0x29e	; 0x29e <SRAM_init>
	ADC_init();
 10c:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	init_OLED();
 110:	0e 94 9b 00 	call	0x136	; 0x136 <init_OLED>
	
	DDRB = 0x00;	//input
 114:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;	//pull-up
 116:	c8 bb       	out	0x18, r28	; 24
	
	char name[100];

	//calibrate();
	OLED_Reset();
 118:	0e 94 37 01 	call	0x26e	; 0x26e <OLED_Reset>
		
		
		//OLED_Reset();
		
		
		if (PINB & (1<<PINB0))
 11c:	b0 9b       	sbis	0x16, 0	; 22
 11e:	06 c0       	rjmp	.+12     	; 0x12c <main+0x2c>
		{	
			buzz(C4, 800);
 120:	60 e2       	ldi	r22, 0x20	; 32
 122:	73 e0       	ldi	r23, 0x03	; 3
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 67 00 	call	0xce	; 0xce <buzz>
			//OLED_gotoline(1);
			//OLED_print(streng2,5);
			//OLED_gotoline(2);
			//OLED_print(streng3,8);
		}
		if (PINB & (1<<PINB1))
 12c:	b1 9b       	sbis	0x16, 1	; 22
 12e:	f6 cf       	rjmp	.-20     	; 0x11c <main+0x1c>
		{
			OLED_Reset();
 130:	0e 94 37 01 	call	0x26e	; 0x26e <OLED_Reset>
 134:	f3 cf       	rjmp	.-26     	; 0x11c <main+0x1c>

00000136 <init_OLED>:
		{
			OLED_goto(4, p);
		}
		if (read_knappRight() == 1 & minne == 2)
		{
			OLED_goto(4, p);
 136:	85 b7       	in	r24, 0x35	; 53
		OLED_print("Name:", 8);
		int minne = 0;
		char Name[3];
		OLED_goto(4, 40);
		int p = 40;
		while (minne <=2)
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	85 bf       	out	0x35, r24	; 53
 13c:	80 b7       	in	r24, 0x30	; 48
 13e:	80 62       	ori	r24, 0x20	; 32

		}
		
	}
return Name;
}
 140:	80 bf       	out	0x30, r24	; 48
 142:	e0 91 08 01 	lds	r30, 0x0108
 146:	f0 91 09 01 	lds	r31, 0x0109
 14a:	8e ea       	ldi	r24, 0xAE	; 174
 14c:	80 83       	st	Z, r24
 14e:	e0 91 08 01 	lds	r30, 0x0108
 152:	f0 91 09 01 	lds	r31, 0x0109
 156:	81 ea       	ldi	r24, 0xA1	; 161
 158:	80 83       	st	Z, r24
 15a:	e0 91 08 01 	lds	r30, 0x0108
{
	MCUCR |= (1<<SRE);
	SFIOR |= (1<<XMM2);
	*write_c = (0xae);        //  display  off
	*write_c = (0xa1);        //segment  remap
	*write_c = (0xda);        //common  pads  hardware:  alternative
 15e:	f0 91 09 01 	lds	r31, 0x0109
 162:	8a ed       	ldi	r24, 0xDA	; 218
 164:	80 83       	st	Z, r24
	*write_c = (0x12);
 166:	e0 91 08 01 	lds	r30, 0x0108
 16a:	f0 91 09 01 	lds	r31, 0x0109
 16e:	82 e1       	ldi	r24, 0x12	; 18
 170:	80 83       	st	Z, r24
	*write_c = (0xc8);        //common output scan direction:com63~com0
 172:	e0 91 08 01 	lds	r30, 0x0108
 176:	f0 91 09 01 	lds	r31, 0x0109
 17a:	88 ec       	ldi	r24, 0xC8	; 200
 17c:	80 83       	st	Z, r24
	*write_c = (0xa8);        //multiplex  ration  mode:63
 17e:	e0 91 08 01 	lds	r30, 0x0108
 182:	f0 91 09 01 	lds	r31, 0x0109
 186:	88 ea       	ldi	r24, 0xA8	; 168
 188:	80 83       	st	Z, r24
	*write_c = (0x3f);
 18a:	e0 91 08 01 	lds	r30, 0x0108
 18e:	f0 91 09 01 	lds	r31, 0x0109
 192:	8f e3       	ldi	r24, 0x3F	; 63
 194:	80 83       	st	Z, r24
	*write_c = (0xd5);        //display divide ratio/osc. freq. mode
 196:	e0 91 08 01 	lds	r30, 0x0108
 19a:	f0 91 09 01 	lds	r31, 0x0109
 19e:	85 ed       	ldi	r24, 0xD5	; 213
 1a0:	80 83       	st	Z, r24
	*write_c = (0x80);
 1a2:	e0 91 08 01 	lds	r30, 0x0108
 1a6:	f0 91 09 01 	lds	r31, 0x0109
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	80 83       	st	Z, r24
	*write_c = (0x81);        //contrast  control
 1ae:	e0 91 08 01 	lds	r30, 0x0108
 1b2:	f0 91 09 01 	lds	r31, 0x0109
 1b6:	81 e8       	ldi	r24, 0x81	; 129
 1b8:	80 83       	st	Z, r24
	*write_c = (0x50);
 1ba:	e0 91 08 01 	lds	r30, 0x0108
 1be:	f0 91 09 01 	lds	r31, 0x0109
 1c2:	80 e5       	ldi	r24, 0x50	; 80
 1c4:	80 83       	st	Z, r24
	*write_c = (0xd9);        //set  pre-charge  period
 1c6:	e0 91 08 01 	lds	r30, 0x0108
 1ca:	f0 91 09 01 	lds	r31, 0x0109
 1ce:	89 ed       	ldi	r24, 0xD9	; 217
 1d0:	80 83       	st	Z, r24
	*write_c = (0x21);
 1d2:	e0 91 08 01 	lds	r30, 0x0108
 1d6:	f0 91 09 01 	lds	r31, 0x0109
 1da:	81 e2       	ldi	r24, 0x21	; 33
 1dc:	80 83       	st	Z, r24
	*write_c = (0x20);        //Set  Memory  Addressing  Mode
 1de:	e0 91 08 01 	lds	r30, 0x0108
 1e2:	f0 91 09 01 	lds	r31, 0x0109
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	80 83       	st	Z, r24
	*write_c = (0x02);
 1ea:	e0 91 08 01 	lds	r30, 0x0108
 1ee:	f0 91 09 01 	lds	r31, 0x0109
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 83       	st	Z, r24
	*write_c = (0xdb);        //VCOM  deselect  level  mode
 1f6:	e0 91 08 01 	lds	r30, 0x0108
 1fa:	f0 91 09 01 	lds	r31, 0x0109
 1fe:	8b ed       	ldi	r24, 0xDB	; 219
 200:	80 83       	st	Z, r24
	*write_c = (0x30);
 202:	e0 91 08 01 	lds	r30, 0x0108
 206:	f0 91 09 01 	lds	r31, 0x0109
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	80 83       	st	Z, r24
	*write_c = (0xad);        //master  configuration
 20e:	e0 91 08 01 	lds	r30, 0x0108
 212:	f0 91 09 01 	lds	r31, 0x0109
 216:	8d ea       	ldi	r24, 0xAD	; 173
 218:	80 83       	st	Z, r24
	*write_c = (0x00);
 21a:	e0 91 08 01 	lds	r30, 0x0108
 21e:	f0 91 09 01 	lds	r31, 0x0109
 222:	10 82       	st	Z, r1
	*write_c = (0xa4);        //out  follows  RAM  content
 224:	e0 91 08 01 	lds	r30, 0x0108
 228:	f0 91 09 01 	lds	r31, 0x0109
 22c:	84 ea       	ldi	r24, 0xA4	; 164
 22e:	80 83       	st	Z, r24
	*write_c = (0xa6);        //set  normal  display
 230:	e0 91 08 01 	lds	r30, 0x0108
 234:	f0 91 09 01 	lds	r31, 0x0109
 238:	86 ea       	ldi	r24, 0xA6	; 166
 23a:	80 83       	st	Z, r24
	*write_c = (0xaf);        //  display  on
 23c:	e0 91 08 01 	lds	r30, 0x0108
 240:	f0 91 09 01 	lds	r31, 0x0109
 244:	8f ea       	ldi	r24, 0xAF	; 175
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <OLED_Home>:
	OLED_Home();
}

void OLED_Home(void)
{
	*write_c = (0xB0);
 24a:	e0 91 08 01 	lds	r30, 0x0108
 24e:	f0 91 09 01 	lds	r31, 0x0109
 252:	80 eb       	ldi	r24, 0xB0	; 176
 254:	80 83       	st	Z, r24
	*write_c = (0x00);
 256:	e0 91 08 01 	lds	r30, 0x0108
 25a:	f0 91 09 01 	lds	r31, 0x0109
 25e:	10 82       	st	Z, r1
	*write_c = (0x10);
 260:	e0 91 08 01 	lds	r30, 0x0108
 264:	f0 91 09 01 	lds	r31, 0x0109
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <OLED_Reset>:
	*write_c = (0xa6);        //set  normal  display
	*write_c = (0xaf);        //  display  on
}

void OLED_Reset(void)
{
 26e:	20 eb       	ldi	r18, 0xB0	; 176
	for (int i = 0; i<8; i++){
		*write_c = (0xB0+i);
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	e0 91 08 01 	lds	r30, 0x0108
 278:	f0 91 09 01 	lds	r31, 0x0109
 27c:	20 83       	st	Z, r18
 27e:	84 2f       	mov	r24, r20
 280:	93 2f       	mov	r25, r19
		for (int j = 0; j<128; j++){
			*write_d = (0x00);
 282:	e0 91 06 01 	lds	r30, 0x0106
 286:	f0 91 07 01 	lds	r31, 0x0107
 28a:	10 82       	st	Z, r1
 28c:	01 97       	sbiw	r24, 0x01	; 1

void OLED_Reset(void)
{
	for (int i = 0; i<8; i++){
		*write_c = (0xB0+i);
		for (int j = 0; j<128; j++){
 28e:	00 97       	sbiw	r24, 0x00	; 0
 290:	c1 f7       	brne	.-16     	; 0x282 <OLED_Reset+0x14>
 292:	2f 5f       	subi	r18, 0xFF	; 255
	*write_c = (0xaf);        //  display  on
}

void OLED_Reset(void)
{
	for (int i = 0; i<8; i++){
 294:	28 3b       	cpi	r18, 0xB8	; 184
 296:	71 f7       	brne	.-36     	; 0x274 <OLED_Reset+0x6>
		*write_c = (0xB0+i);
		for (int j = 0; j<128; j++){
			*write_d = (0x00);
		}
	}
	OLED_Home();
 298:	0e 94 25 01 	call	0x24a	; 0x24a <OLED_Home>
 29c:	08 95       	ret

0000029e <SRAM_init>:
 29e:	85 b7       	in	r24, 0x35	; 53
 2a0:	80 68       	ori	r24, 0x80	; 128
 2a2:	85 bf       	out	0x35, r24	; 53
 2a4:	80 b7       	in	r24, 0x30	; 48
 2a6:	80 62       	ori	r24, 0x20	; 32
 2a8:	80 bf       	out	0x30, r24	; 48
 2aa:	08 95       	ret

000002ac <USART_Receive>:
 2ac:	5f 9b       	sbis	0x0b, 7	; 11
 2ae:	fe cf       	rjmp	.-4      	; 0x2ac <USART_Receive>
 2b0:	8c b1       	in	r24, 0x0c	; 12
 2b2:	08 95       	ret

000002b4 <USART_Transmit>:
 2b4:	5d 9b       	sbis	0x0b, 5	; 11
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <USART_Transmit>
 2b8:	8c b9       	out	0x0c, r24	; 12
 2ba:	08 95       	ret

000002bc <UartInit>:
 2bc:	10 bc       	out	0x20, r1	; 32
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	89 b9       	out	0x09, r24	; 9
 2c2:	88 e1       	ldi	r24, 0x18	; 24
 2c4:	8a b9       	out	0x0a, r24	; 10
 2c6:	8e e8       	ldi	r24, 0x8E	; 142
 2c8:	80 bd       	out	0x20, r24	; 32
 2ca:	66 e5       	ldi	r22, 0x56	; 86
 2cc:	71 e0       	ldi	r23, 0x01	; 1
 2ce:	8a e5       	ldi	r24, 0x5A	; 90
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <fdevopen>
 2d6:	08 95       	ret

000002d8 <fdevopen>:
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ec 01       	movw	r28, r24
 2e2:	8b 01       	movw	r16, r22
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	31 f4       	brne	.+12     	; 0x2f4 <fdevopen+0x1c>
 2e8:	61 15       	cp	r22, r1
 2ea:	71 05       	cpc	r23, r1
 2ec:	19 f4       	brne	.+6      	; 0x2f4 <fdevopen+0x1c>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	38 c0       	rjmp	.+112    	; 0x364 <fdevopen+0x8c>
 2f4:	6e e0       	ldi	r22, 0x0E	; 14
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 b7 01 	call	0x36e	; 0x36e <calloc>
 300:	fc 01       	movw	r30, r24
 302:	00 97       	sbiw	r24, 0x00	; 0
 304:	a1 f3       	breq	.-24     	; 0x2ee <fdevopen+0x16>
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	83 83       	std	Z+3, r24	; 0x03
 30a:	01 15       	cp	r16, r1
 30c:	11 05       	cpc	r17, r1
 30e:	71 f0       	breq	.+28     	; 0x32c <fdevopen+0x54>
 310:	13 87       	std	Z+11, r17	; 0x0b
 312:	02 87       	std	Z+10, r16	; 0x0a
 314:	81 e8       	ldi	r24, 0x81	; 129
 316:	83 83       	std	Z+3, r24	; 0x03
 318:	80 91 0a 01 	lds	r24, 0x010A
 31c:	90 91 0b 01 	lds	r25, 0x010B
 320:	89 2b       	or	r24, r25
 322:	21 f4       	brne	.+8      	; 0x32c <fdevopen+0x54>
 324:	f0 93 0b 01 	sts	0x010B, r31
 328:	e0 93 0a 01 	sts	0x010A, r30
 32c:	20 97       	sbiw	r28, 0x00	; 0
 32e:	c9 f0       	breq	.+50     	; 0x362 <fdevopen+0x8a>
 330:	d1 87       	std	Z+9, r29	; 0x09
 332:	c0 87       	std	Z+8, r28	; 0x08
 334:	83 81       	ldd	r24, Z+3	; 0x03
 336:	82 60       	ori	r24, 0x02	; 2
 338:	83 83       	std	Z+3, r24	; 0x03
 33a:	80 91 0c 01 	lds	r24, 0x010C
 33e:	90 91 0d 01 	lds	r25, 0x010D
 342:	89 2b       	or	r24, r25
 344:	71 f4       	brne	.+28     	; 0x362 <fdevopen+0x8a>
 346:	f0 93 0d 01 	sts	0x010D, r31
 34a:	e0 93 0c 01 	sts	0x010C, r30
 34e:	80 91 0e 01 	lds	r24, 0x010E
 352:	90 91 0f 01 	lds	r25, 0x010F
 356:	89 2b       	or	r24, r25
 358:	21 f4       	brne	.+8      	; 0x362 <fdevopen+0x8a>
 35a:	f0 93 0f 01 	sts	0x010F, r31
 35e:	e0 93 0e 01 	sts	0x010E, r30
 362:	cf 01       	movw	r24, r30
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <calloc>:
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	86 9f       	mul	r24, r22
 378:	80 01       	movw	r16, r0
 37a:	87 9f       	mul	r24, r23
 37c:	10 0d       	add	r17, r0
 37e:	96 9f       	mul	r25, r22
 380:	10 0d       	add	r17, r0
 382:	11 24       	eor	r1, r1
 384:	c8 01       	movw	r24, r16
 386:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <malloc>
 38a:	ec 01       	movw	r28, r24
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	29 f0       	breq	.+10     	; 0x39a <calloc+0x2c>
 390:	a8 01       	movw	r20, r16
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <memset>
 39a:	ce 01       	movw	r24, r28
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <malloc>:
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	91 05       	cpc	r25, r1
 3ae:	10 f4       	brcc	.+4      	; 0x3b4 <malloc+0xe>
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	e0 91 12 01 	lds	r30, 0x0112
 3b8:	f0 91 13 01 	lds	r31, 0x0113
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	a0 e0       	ldi	r26, 0x00	; 0
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	30 97       	sbiw	r30, 0x00	; 0
 3c6:	39 f1       	breq	.+78     	; 0x416 <malloc+0x70>
 3c8:	40 81       	ld	r20, Z
 3ca:	51 81       	ldd	r21, Z+1	; 0x01
 3cc:	48 17       	cp	r20, r24
 3ce:	59 07       	cpc	r21, r25
 3d0:	b8 f0       	brcs	.+46     	; 0x400 <malloc+0x5a>
 3d2:	48 17       	cp	r20, r24
 3d4:	59 07       	cpc	r21, r25
 3d6:	71 f4       	brne	.+28     	; 0x3f4 <malloc+0x4e>
 3d8:	82 81       	ldd	r24, Z+2	; 0x02
 3da:	93 81       	ldd	r25, Z+3	; 0x03
 3dc:	10 97       	sbiw	r26, 0x00	; 0
 3de:	29 f0       	breq	.+10     	; 0x3ea <malloc+0x44>
 3e0:	13 96       	adiw	r26, 0x03	; 3
 3e2:	9c 93       	st	X, r25
 3e4:	8e 93       	st	-X, r24
 3e6:	12 97       	sbiw	r26, 0x02	; 2
 3e8:	2c c0       	rjmp	.+88     	; 0x442 <malloc+0x9c>
 3ea:	90 93 13 01 	sts	0x0113, r25
 3ee:	80 93 12 01 	sts	0x0112, r24
 3f2:	27 c0       	rjmp	.+78     	; 0x442 <malloc+0x9c>
 3f4:	21 15       	cp	r18, r1
 3f6:	31 05       	cpc	r19, r1
 3f8:	31 f0       	breq	.+12     	; 0x406 <malloc+0x60>
 3fa:	42 17       	cp	r20, r18
 3fc:	53 07       	cpc	r21, r19
 3fe:	18 f0       	brcs	.+6      	; 0x406 <malloc+0x60>
 400:	a9 01       	movw	r20, r18
 402:	db 01       	movw	r26, r22
 404:	01 c0       	rjmp	.+2      	; 0x408 <malloc+0x62>
 406:	ef 01       	movw	r28, r30
 408:	9a 01       	movw	r18, r20
 40a:	bd 01       	movw	r22, r26
 40c:	df 01       	movw	r26, r30
 40e:	02 80       	ldd	r0, Z+2	; 0x02
 410:	f3 81       	ldd	r31, Z+3	; 0x03
 412:	e0 2d       	mov	r30, r0
 414:	d7 cf       	rjmp	.-82     	; 0x3c4 <malloc+0x1e>
 416:	21 15       	cp	r18, r1
 418:	31 05       	cpc	r19, r1
 41a:	f9 f0       	breq	.+62     	; 0x45a <malloc+0xb4>
 41c:	28 1b       	sub	r18, r24
 41e:	39 0b       	sbc	r19, r25
 420:	24 30       	cpi	r18, 0x04	; 4
 422:	31 05       	cpc	r19, r1
 424:	80 f4       	brcc	.+32     	; 0x446 <malloc+0xa0>
 426:	8a 81       	ldd	r24, Y+2	; 0x02
 428:	9b 81       	ldd	r25, Y+3	; 0x03
 42a:	61 15       	cp	r22, r1
 42c:	71 05       	cpc	r23, r1
 42e:	21 f0       	breq	.+8      	; 0x438 <malloc+0x92>
 430:	fb 01       	movw	r30, r22
 432:	93 83       	std	Z+3, r25	; 0x03
 434:	82 83       	std	Z+2, r24	; 0x02
 436:	04 c0       	rjmp	.+8      	; 0x440 <malloc+0x9a>
 438:	90 93 13 01 	sts	0x0113, r25
 43c:	80 93 12 01 	sts	0x0112, r24
 440:	fe 01       	movw	r30, r28
 442:	32 96       	adiw	r30, 0x02	; 2
 444:	44 c0       	rjmp	.+136    	; 0x4ce <malloc+0x128>
 446:	fe 01       	movw	r30, r28
 448:	e2 0f       	add	r30, r18
 44a:	f3 1f       	adc	r31, r19
 44c:	81 93       	st	Z+, r24
 44e:	91 93       	st	Z+, r25
 450:	22 50       	subi	r18, 0x02	; 2
 452:	31 09       	sbc	r19, r1
 454:	39 83       	std	Y+1, r19	; 0x01
 456:	28 83       	st	Y, r18
 458:	3a c0       	rjmp	.+116    	; 0x4ce <malloc+0x128>
 45a:	20 91 10 01 	lds	r18, 0x0110
 45e:	30 91 11 01 	lds	r19, 0x0111
 462:	23 2b       	or	r18, r19
 464:	41 f4       	brne	.+16     	; 0x476 <malloc+0xd0>
 466:	20 91 02 01 	lds	r18, 0x0102
 46a:	30 91 03 01 	lds	r19, 0x0103
 46e:	30 93 11 01 	sts	0x0111, r19
 472:	20 93 10 01 	sts	0x0110, r18
 476:	20 91 00 01 	lds	r18, 0x0100
 47a:	30 91 01 01 	lds	r19, 0x0101
 47e:	21 15       	cp	r18, r1
 480:	31 05       	cpc	r19, r1
 482:	41 f4       	brne	.+16     	; 0x494 <malloc+0xee>
 484:	2d b7       	in	r18, 0x3d	; 61
 486:	3e b7       	in	r19, 0x3e	; 62
 488:	40 91 04 01 	lds	r20, 0x0104
 48c:	50 91 05 01 	lds	r21, 0x0105
 490:	24 1b       	sub	r18, r20
 492:	35 0b       	sbc	r19, r21
 494:	e0 91 10 01 	lds	r30, 0x0110
 498:	f0 91 11 01 	lds	r31, 0x0111
 49c:	e2 17       	cp	r30, r18
 49e:	f3 07       	cpc	r31, r19
 4a0:	a0 f4       	brcc	.+40     	; 0x4ca <malloc+0x124>
 4a2:	2e 1b       	sub	r18, r30
 4a4:	3f 0b       	sbc	r19, r31
 4a6:	28 17       	cp	r18, r24
 4a8:	39 07       	cpc	r19, r25
 4aa:	78 f0       	brcs	.+30     	; 0x4ca <malloc+0x124>
 4ac:	ac 01       	movw	r20, r24
 4ae:	4e 5f       	subi	r20, 0xFE	; 254
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	24 17       	cp	r18, r20
 4b4:	35 07       	cpc	r19, r21
 4b6:	48 f0       	brcs	.+18     	; 0x4ca <malloc+0x124>
 4b8:	4e 0f       	add	r20, r30
 4ba:	5f 1f       	adc	r21, r31
 4bc:	50 93 11 01 	sts	0x0111, r21
 4c0:	40 93 10 01 	sts	0x0110, r20
 4c4:	81 93       	st	Z+, r24
 4c6:	91 93       	st	Z+, r25
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <malloc+0x128>
 4ca:	e0 e0       	ldi	r30, 0x00	; 0
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	cf 01       	movw	r24, r30
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <free>:
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	00 97       	sbiw	r24, 0x00	; 0
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <free+0xa>
 4de:	87 c0       	rjmp	.+270    	; 0x5ee <__stack+0xef>
 4e0:	fc 01       	movw	r30, r24
 4e2:	32 97       	sbiw	r30, 0x02	; 2
 4e4:	13 82       	std	Z+3, r1	; 0x03
 4e6:	12 82       	std	Z+2, r1	; 0x02
 4e8:	c0 91 12 01 	lds	r28, 0x0112
 4ec:	d0 91 13 01 	lds	r29, 0x0113
 4f0:	20 97       	sbiw	r28, 0x00	; 0
 4f2:	81 f4       	brne	.+32     	; 0x514 <__stack+0x15>
 4f4:	20 81       	ld	r18, Z
 4f6:	31 81       	ldd	r19, Z+1	; 0x01
 4f8:	28 0f       	add	r18, r24
 4fa:	39 1f       	adc	r19, r25
 4fc:	80 91 10 01 	lds	r24, 0x0110
 500:	90 91 11 01 	lds	r25, 0x0111
 504:	82 17       	cp	r24, r18
 506:	93 07       	cpc	r25, r19
 508:	79 f5       	brne	.+94     	; 0x568 <__stack+0x69>
 50a:	f0 93 11 01 	sts	0x0111, r31
 50e:	e0 93 10 01 	sts	0x0110, r30
 512:	6d c0       	rjmp	.+218    	; 0x5ee <__stack+0xef>
 514:	de 01       	movw	r26, r28
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	ae 17       	cp	r26, r30
 51c:	bf 07       	cpc	r27, r31
 51e:	50 f4       	brcc	.+20     	; 0x534 <__stack+0x35>
 520:	12 96       	adiw	r26, 0x02	; 2
 522:	4d 91       	ld	r20, X+
 524:	5c 91       	ld	r21, X
 526:	13 97       	sbiw	r26, 0x03	; 3
 528:	9d 01       	movw	r18, r26
 52a:	41 15       	cp	r20, r1
 52c:	51 05       	cpc	r21, r1
 52e:	09 f1       	breq	.+66     	; 0x572 <__stack+0x73>
 530:	da 01       	movw	r26, r20
 532:	f3 cf       	rjmp	.-26     	; 0x51a <__stack+0x1b>
 534:	b3 83       	std	Z+3, r27	; 0x03
 536:	a2 83       	std	Z+2, r26	; 0x02
 538:	40 81       	ld	r20, Z
 53a:	51 81       	ldd	r21, Z+1	; 0x01
 53c:	84 0f       	add	r24, r20
 53e:	95 1f       	adc	r25, r21
 540:	8a 17       	cp	r24, r26
 542:	9b 07       	cpc	r25, r27
 544:	71 f4       	brne	.+28     	; 0x562 <__stack+0x63>
 546:	8d 91       	ld	r24, X+
 548:	9c 91       	ld	r25, X
 54a:	11 97       	sbiw	r26, 0x01	; 1
 54c:	84 0f       	add	r24, r20
 54e:	95 1f       	adc	r25, r21
 550:	02 96       	adiw	r24, 0x02	; 2
 552:	91 83       	std	Z+1, r25	; 0x01
 554:	80 83       	st	Z, r24
 556:	12 96       	adiw	r26, 0x02	; 2
 558:	8d 91       	ld	r24, X+
 55a:	9c 91       	ld	r25, X
 55c:	13 97       	sbiw	r26, 0x03	; 3
 55e:	93 83       	std	Z+3, r25	; 0x03
 560:	82 83       	std	Z+2, r24	; 0x02
 562:	21 15       	cp	r18, r1
 564:	31 05       	cpc	r19, r1
 566:	29 f4       	brne	.+10     	; 0x572 <__stack+0x73>
 568:	f0 93 13 01 	sts	0x0113, r31
 56c:	e0 93 12 01 	sts	0x0112, r30
 570:	3e c0       	rjmp	.+124    	; 0x5ee <__stack+0xef>
 572:	d9 01       	movw	r26, r18
 574:	13 96       	adiw	r26, 0x03	; 3
 576:	fc 93       	st	X, r31
 578:	ee 93       	st	-X, r30
 57a:	12 97       	sbiw	r26, 0x02	; 2
 57c:	4d 91       	ld	r20, X+
 57e:	5d 91       	ld	r21, X+
 580:	a4 0f       	add	r26, r20
 582:	b5 1f       	adc	r27, r21
 584:	ea 17       	cp	r30, r26
 586:	fb 07       	cpc	r31, r27
 588:	79 f4       	brne	.+30     	; 0x5a8 <__stack+0xa9>
 58a:	80 81       	ld	r24, Z
 58c:	91 81       	ldd	r25, Z+1	; 0x01
 58e:	84 0f       	add	r24, r20
 590:	95 1f       	adc	r25, r21
 592:	02 96       	adiw	r24, 0x02	; 2
 594:	d9 01       	movw	r26, r18
 596:	11 96       	adiw	r26, 0x01	; 1
 598:	9c 93       	st	X, r25
 59a:	8e 93       	st	-X, r24
 59c:	82 81       	ldd	r24, Z+2	; 0x02
 59e:	93 81       	ldd	r25, Z+3	; 0x03
 5a0:	13 96       	adiw	r26, 0x03	; 3
 5a2:	9c 93       	st	X, r25
 5a4:	8e 93       	st	-X, r24
 5a6:	12 97       	sbiw	r26, 0x02	; 2
 5a8:	e0 e0       	ldi	r30, 0x00	; 0
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	8a 81       	ldd	r24, Y+2	; 0x02
 5ae:	9b 81       	ldd	r25, Y+3	; 0x03
 5b0:	00 97       	sbiw	r24, 0x00	; 0
 5b2:	19 f0       	breq	.+6      	; 0x5ba <__stack+0xbb>
 5b4:	fe 01       	movw	r30, r28
 5b6:	ec 01       	movw	r28, r24
 5b8:	f9 cf       	rjmp	.-14     	; 0x5ac <__stack+0xad>
 5ba:	ce 01       	movw	r24, r28
 5bc:	02 96       	adiw	r24, 0x02	; 2
 5be:	28 81       	ld	r18, Y
 5c0:	39 81       	ldd	r19, Y+1	; 0x01
 5c2:	82 0f       	add	r24, r18
 5c4:	93 1f       	adc	r25, r19
 5c6:	20 91 10 01 	lds	r18, 0x0110
 5ca:	30 91 11 01 	lds	r19, 0x0111
 5ce:	28 17       	cp	r18, r24
 5d0:	39 07       	cpc	r19, r25
 5d2:	69 f4       	brne	.+26     	; 0x5ee <__stack+0xef>
 5d4:	30 97       	sbiw	r30, 0x00	; 0
 5d6:	29 f4       	brne	.+10     	; 0x5e2 <__stack+0xe3>
 5d8:	10 92 13 01 	sts	0x0113, r1
 5dc:	10 92 12 01 	sts	0x0112, r1
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__stack+0xe7>
 5e2:	13 82       	std	Z+3, r1	; 0x03
 5e4:	12 82       	std	Z+2, r1	; 0x02
 5e6:	d0 93 11 01 	sts	0x0111, r29
 5ea:	c0 93 10 01 	sts	0x0110, r28
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <memset>:
 5f4:	dc 01       	movw	r26, r24
 5f6:	01 c0       	rjmp	.+2      	; 0x5fa <memset+0x6>
 5f8:	6d 93       	st	X+, r22
 5fa:	41 50       	subi	r20, 0x01	; 1
 5fc:	50 40       	sbci	r21, 0x00	; 0
 5fe:	e0 f7       	brcc	.-8      	; 0x5f8 <memset+0x4>
 600:	08 95       	ret

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
