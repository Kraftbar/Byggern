
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000e50  00000ee4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800192  00800192  00000f76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000217f  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cff  00000000  00000000  00003341  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cba  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004ec  00000000  00000000  00004cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000502  00000000  00000000  000051e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000126e  00000000  00000000  000056ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e5       	ldi	r30, 0x50	; 80
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 39       	cpi	r26, 0x92	; 146
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e9       	ldi	r26, 0x92	; 146
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 39       	cpi	r26, 0x9C	; 156
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:



void ADC_init()
{	
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <main>:
#include "MCP2515.h"
#include "CAN.h"


int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	64 97       	sbiw	r28, 0x14	; 20
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
	DDRD  = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	
	UartInit();
  d4:	0e 94 93 02 	call	0x526	; 0x526 <UartInit>
	SRAM_init();
  d8:	0e 94 84 02 	call	0x508	; 0x508 <SRAM_init>
	ADC_init();
  dc:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	init_OLED();
  e0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <init_OLED>
	CAN_init();
  e4:	0e 94 ad 00 	call	0x15a	; 0x15a <CAN_init>

	calibrate();
	OLED_Reset();*/
	
	// Enable Global Interrupts
	sei();
  e8:	78 94       	sei
	// CAN test

			
			CAN_message myMessage;				//test message
			int ident = 55;
			myMessage.id = ident;
  ea:	87 e3       	ldi	r24, 0x37	; 55
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
			myMessage.length = 8;
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9c 83       	std	Y+4, r25	; 0x04
  f8:	8b 83       	std	Y+3, r24	; 0x03
			int n = 5;
			for (int i = 0; i < 8; i++) 
			{
				myMessage.data[i] = n;
  fa:	25 e0       	ldi	r18, 0x05	; 5
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	3e 83       	std	Y+6, r19	; 0x06
 100:	2d 83       	std	Y+5, r18	; 0x05
 102:	26 e0       	ldi	r18, 0x06	; 6
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	38 87       	std	Y+8, r19	; 0x08
 108:	2f 83       	std	Y+7, r18	; 0x07
 10a:	27 e0       	ldi	r18, 0x07	; 7
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	3a 87       	std	Y+10, r19	; 0x0a
 110:	29 87       	std	Y+9, r18	; 0x09
 112:	9c 87       	std	Y+12, r25	; 0x0c
 114:	8b 87       	std	Y+11, r24	; 0x0b
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	9e 87       	std	Y+14, r25	; 0x0e
 11c:	8d 87       	std	Y+13, r24	; 0x0d
 11e:	8a e0       	ldi	r24, 0x0A	; 10
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	98 8b       	std	Y+16, r25	; 0x10
 124:	8f 87       	std	Y+15, r24	; 0x0f
 126:	8b e0       	ldi	r24, 0x0B	; 11
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	9a 8b       	std	Y+18, r25	; 0x12
 12c:	89 8b       	std	Y+17, r24	; 0x11
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9c 8b       	std	Y+20, r25	; 0x14
 134:	8b 8b       	std	Y+19, r24	; 0x13
				n++;
			}
	printf("Start på program\n");
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 00 03 	call	0x600	; 0x600 <puts>
		OLED_menu();
					 chip de-select*/



			CAN_send(&myMessage);
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <CAN_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	8f e7       	ldi	r24, 0x7F	; 127
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x90>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x9a>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x9c>
 158:	f2 cf       	rjmp	.-28     	; 0x13e <main+0x82>

0000015a <CAN_init>:
unsigned char rxflag = 0;									// Interrupt flag variable


void CAN_init()
{
	MCP_init();
 15a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <MCP_init>
	MCP_bitmod(MCP_CANINTE, 0x0F, 0x01);					// Sets interrupt receive-register 
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	6f e0       	ldi	r22, 0x0F	; 15
 162:	8b e2       	ldi	r24, 0x2B	; 43
 164:	0e 94 70 01 	call	0x2e0	; 0x2e0 <MCP_bitmod>
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);		// Setting MCP to loop-back mode MODE_MASK
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	60 ee       	ldi	r22, 0xE0	; 224
 16c:	8f e0       	ldi	r24, 0x0F	; 15
 16e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <MCP_bitmod>
 172:	08 95       	ret

00000174 <Can_trans_compl>:
}


int Can_trans_compl()							// sjekker om TX buffer er ferdig med transmission (TXREQ = 0)
{
	uint8_t status = MCP_status();				// Saves MCP status in status
 174:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MCP_status>
	printf("Status flag: %x\n", MCP_read(MCP_TXB0CTRL));
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 97 01 	call	0x32e	; 0x32e <MCP_read>
 180:	9f 93       	push	r25
 182:	8f 93       	push	r24
 184:	89 e1       	ldi	r24, 0x19	; 25
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
	if (test_bit(MCP_read(MCP_TXB0CTRL),3))						// Check status-register value against bit 3
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 97 01 	call	0x32e	; 0x32e <MCP_read>
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	83 ff       	sbrs	r24, 3
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <Can_trans_compl+0x3e>
	{
		printf("Espen\n");
 1a4:	8a e2       	ldi	r24, 0x2A	; 42
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 00 03 	call	0x600	; 0x600 <puts>
		return 0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	08 95       	ret
	}	
	else
	{	
		printf("Gaute\n");
 1b2:	80 e3       	ldi	r24, 0x30	; 48
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 00 03 	call	0x600	; 0x600 <puts>
		return 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 1be:	08 95       	ret

000001c0 <CAN_send>:
	MCP_bitmod(MCP_CANINTE, 0x0F, 0x01);					// Sets interrupt receive-register 
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);		// Setting MCP to loop-back mode MODE_MASK
}

void CAN_send(CAN_message * msg)
{
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24


	if (Can_trans_compl())									// Check registers are available 
 1ca:	0e 94 ba 00 	call	0x174	; 0x174 <Can_trans_compl>
 1ce:	89 2b       	or	r24, r25
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <CAN_send+0x14>
 1d2:	7d c0       	rjmp	.+250    	; 0x2ce <CAN_send+0x10e>
	{
		printf("Status flag: %x\n", MCP_read(MCP_TXB0CTRL));
 1d4:	80 e3       	ldi	r24, 0x30	; 48
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 97 01 	call	0x32e	; 0x32e <MCP_read>
 1dc:	9f 93       	push	r25
 1de:	8f 93       	push	r24
 1e0:	89 e1       	ldi	r24, 0x19	; 25
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	9f 93       	push	r25
 1e6:	8f 93       	push	r24
 1e8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
		uint8_t status = MCP_read(MCP_CANCTRL);
 1ec:	8f e0       	ldi	r24, 0x0F	; 15
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 97 01 	call	0x32e	; 0x32e <MCP_read>
 1f4:	99 27       	eor	r25, r25
		printf("STATUS: 0x%02X\n",status);
 1f6:	9f 93       	push	r25
 1f8:	8f 93       	push	r24
 1fa:	86 e3       	ldi	r24, 0x36	; 54
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	9f 93       	push	r25
 200:	8f 93       	push	r24
 202:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
		uint8_t status2 = MCP_read(MCP_EFLG);
 206:	8d e2       	ldi	r24, 0x2D	; 45
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 97 01 	call	0x32e	; 0x32e <MCP_read>
 20e:	99 27       	eor	r25, r25
		printf("STATUS2: 0x%02X\n",status2);
 210:	9f 93       	push	r25
 212:	8f 93       	push	r24
 214:	86 e4       	ldi	r24, 0x46	; 70
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	9f 93       	push	r25
 21a:	8f 93       	push	r24
 21c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
		MCP_write(MCP_TXB0SIDH, msg->id >> 3);				// Write id to id handlig regiseter (standard identifier High)
 220:	68 81       	ld	r22, Y
 222:	79 81       	ldd	r23, Y+1	; 0x01
 224:	76 95       	lsr	r23
 226:	67 95       	ror	r22
 228:	76 95       	lsr	r23
 22a:	67 95       	ror	r22
 22c:	76 95       	lsr	r23
 22e:	67 95       	ror	r22
 230:	81 e3       	ldi	r24, 0x31	; 49
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 b3 01 	call	0x366	; 0x366 <MCP_write>
		MCP_write(MCP_TXB0SIDL, msg->id << 5);				// Write id to Id handling register (3-3, standard identifier Low)
 238:	68 81       	ld	r22, Y
 23a:	79 81       	ldd	r23, Y+1	; 0x01
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	62 95       	swap	r22
 242:	72 95       	swap	r23
 244:	70 7f       	andi	r23, 0xF0	; 240
 246:	76 27       	eor	r23, r22
 248:	60 7f       	andi	r22, 0xF0	; 240
 24a:	76 27       	eor	r23, r22
 24c:	82 e3       	ldi	r24, 0x32	; 50
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 b3 01 	call	0x366	; 0x366 <MCP_write>
		printf("%i \n",msg->id);
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	8f 93       	push	r24
 258:	88 81       	ld	r24, Y
 25a:	8f 93       	push	r24
 25c:	07 e5       	ldi	r16, 0x57	; 87
 25e:	11 e0       	ldi	r17, 0x01	; 1
 260:	1f 93       	push	r17
 262:	0f 93       	push	r16
 264:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
		MCP_write(TXB0DLC, (msg->length));
 268:	6a 81       	ldd	r22, Y+2	; 0x02
 26a:	7b 81       	ldd	r23, Y+3	; 0x03
 26c:	85 e3       	ldi	r24, 0x35	; 53
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 b3 01 	call	0x366	; 0x366 <MCP_write>
		printf("%i \n",msg->length);					// Write length to length handling register (3-7)
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	8f 93       	push	r24
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	8f 93       	push	r24
 27c:	1f 93       	push	r17
 27e:	0f 93       	push	r16
 280:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
		for(unsigned char i=0; i<msg->length;i++)
 284:	8d b7       	in	r24, 0x3d	; 61
 286:	9e b7       	in	r25, 0x3e	; 62
 288:	44 96       	adiw	r24, 0x14	; 20
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	9e bf       	out	0x3e, r25	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	8d bf       	out	0x3d, r24	; 61
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	9b 81       	ldd	r25, Y+3	; 0x03
 298:	89 2b       	or	r24, r25
 29a:	b1 f0       	breq	.+44     	; 0x2c8 <CAN_send+0x108>
 29c:	10 e0       	ldi	r17, 0x00	; 0
		{
			MCP_write(TXB0D0+i,msg->data[i]);				// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
 29e:	81 2f       	mov	r24, r17
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	32 96       	adiw	r30, 0x02	; 2
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	ec 0f       	add	r30, r28
 2ac:	fd 1f       	adc	r31, r29
 2ae:	60 81       	ld	r22, Z
 2b0:	71 81       	ldd	r23, Z+1	; 0x01
 2b2:	c6 96       	adiw	r24, 0x36	; 54
 2b4:	0e 94 b3 01 	call	0x366	; 0x366 <MCP_write>
		MCP_write(MCP_TXB0SIDH, msg->id >> 3);				// Write id to id handlig regiseter (standard identifier High)
		MCP_write(MCP_TXB0SIDL, msg->id << 5);				// Write id to Id handling register (3-3, standard identifier Low)
		printf("%i \n",msg->id);
		MCP_write(TXB0DLC, (msg->length));
		printf("%i \n",msg->length);					// Write length to length handling register (3-7)
		for(unsigned char i=0; i<msg->length;i++)
 2b8:	1f 5f       	subi	r17, 0xFF	; 255
 2ba:	21 2f       	mov	r18, r17
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	9b 81       	ldd	r25, Y+3	; 0x03
 2c2:	28 17       	cp	r18, r24
 2c4:	39 07       	cpc	r19, r25
 2c6:	58 f3       	brcs	.-42     	; 0x29e <CAN_send+0xde>
		{
			MCP_write(TXB0D0+i,msg->data[i]);				// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
		}


		MCP_request();										// Request to send written message MCP_RTS_ALL
 2c8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <MCP_request>
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <CAN_send+0x116>
	}
	else													// If message is not sent
	{
		printf("Sendte ikke\n");							// Print this
 2ce:	8c e5       	ldi	r24, 0x5C	; 92
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 00 03 	call	0x600	; 0x600 <puts>
	}
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <MCP_bitmod>:
}



void MCP_bitmod(unsigned char reg, unsigned char mask, unsigned char data)
{
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	18 2f       	mov	r17, r24
 2e8:	d6 2f       	mov	r29, r22
 2ea:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);					// Chip select
 2ec:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <MCP_bitmod+0x10>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <MCP_bitmod+0x12>
 2f2:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(MCP_BITMOD);			// send command "I want to modify bit"
 2f4:	85 e0       	ldi	r24, 0x05	; 5
 2f6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <MCP_bitmod+0x1c>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <MCP_bitmod+0x1e>
 2fe:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(reg);				// In what register do you want to operate
 300:	81 2f       	mov	r24, r17
 302:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 306:	00 c0       	rjmp	.+0      	; 0x308 <MCP_bitmod+0x28>
 308:	00 c0       	rjmp	.+0      	; 0x30a <MCP_bitmod+0x2a>
 30a:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(mask);				// What bit mask do you want to change
 30c:	8d 2f       	mov	r24, r29
 30e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 312:	00 c0       	rjmp	.+0      	; 0x314 <MCP_bitmod+0x34>
 314:	00 c0       	rjmp	.+0      	; 0x316 <MCP_bitmod+0x36>
 316:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(data);				// What to you want to change to
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <MCP_bitmod+0x40>
 320:	00 c0       	rjmp	.+0      	; 0x322 <MCP_bitmod+0x42>
 322:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);						// chip de-select
 324:	c4 9a       	sbi	0x18, 4	; 24
	
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	08 95       	ret

0000032e <MCP_read>:
// Note that bitmod will change multiple bits unless one specifies which bit address to change. f.ex: bit = DLC3 & DLC2
// This will only change these two, but to use the function this way DLC3 and DCL2 must be defined first

unsigned int MCP_read(unsigned int address)
{
 32e:	cf 93       	push	r28
 330:	c8 2f       	mov	r28, r24
	unsigned int result;
	PORTB &= ~(1<<PB4);				// Selects can controller
 332:	c4 98       	cbi	0x18, 4	; 24
 334:	00 c0       	rjmp	.+0      	; 0x336 <MCP_read+0x8>
 336:	00 c0       	rjmp	.+0      	; 0x338 <MCP_read+0xa>
 338:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(MCP_READ);		// Send command "I want to read MCP
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 340:	00 c0       	rjmp	.+0      	; 0x342 <MCP_read+0x14>
 342:	00 c0       	rjmp	.+0      	; 0x344 <MCP_read+0x16>
 344:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(address);		// Address we want to read
 346:	8c 2f       	mov	r24, r28
 348:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <MCP_read+0x20>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <MCP_read+0x22>
 350:	00 00       	nop
	_delay_us(1);
	result = SPI_tranciever(0xFF);	// Save What we read in result
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 358:	00 c0       	rjmp	.+0      	; 0x35a <MCP_read+0x2c>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <MCP_read+0x2e>
 35c:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);					// De-selects can controller
 35e:	c4 9a       	sbi	0x18, 4	; 24
	return result;					// Return what we read
}
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <MCP_write>:

void MCP_write(unsigned int address, unsigned int data)
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	d8 2f       	mov	r29, r24
 36c:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);	
 36e:	c4 98       	cbi	0x18, 4	; 24
 370:	00 c0       	rjmp	.+0      	; 0x372 <MCP_write+0xc>
 372:	00 c0       	rjmp	.+0      	; 0x374 <MCP_write+0xe>
 374:	00 00       	nop
	_delay_us(1);				
	SPI_tranciever(MCP_WRITE);		// Send command "I want to write"
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <MCP_write+0x18>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <MCP_write+0x1a>
 380:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(address);		// Where we want to write to
 382:	8d 2f       	mov	r24, r29
 384:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 388:	00 c0       	rjmp	.+0      	; 0x38a <MCP_write+0x24>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <MCP_write+0x26>
 38c:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(data);			// What we want to write
 38e:	8c 2f       	mov	r24, r28
 390:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
 394:	00 c0       	rjmp	.+0      	; 0x396 <MCP_write+0x30>
 396:	00 c0       	rjmp	.+0      	; 0x398 <MCP_write+0x32>
 398:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);
 39a:	c4 9a       	sbi	0x18, 4	; 24
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <MCP_reset>:

void MCP_reset()
{
	PORTB &= ~(1<<PB4);	
 3a2:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RESET);		// Send command "I want to reset MCP"
 3a4:	80 ec       	ldi	r24, 0xC0	; 192
 3a6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
	PORTB |=(1<<PB4);
 3aa:	c4 9a       	sbi	0x18, 4	; 24
 3ac:	08 95       	ret

000003ae <MCP_init>:
#include <avr/io.h>
#include <avr/delay.h>
void MCP_init()
{
	// Makes sure registers are clean and MCP in control mode
	SPI_MasterInit();
 3ae:	0e 94 76 02 	call	0x4ec	; 0x4ec <SPI_MasterInit>
	MCP_reset();
 3b2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <MCP_reset>
 3b6:	08 95       	ret

000003b8 <MCP_request>:
	PORTB |=(1<<PB4);
}

void MCP_request()
{
	PORTB &= ~(1<<PB4);
 3b8:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RTS_ALL);	// Send command "Request to send for all ports" (TX0, TX1 and TX2)
 3ba:	87 e8       	ldi	r24, 0x87	; 135
 3bc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
	PORTB |=(1<<PB4);
 3c0:	c4 9a       	sbi	0x18, 4	; 24
 3c2:	08 95       	ret

000003c4 <MCP_status>:
}

unsigned int MCP_status()
{
	PORTB &= ~(1<<PB4);
 3c4:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_READ_STATUS);									// Send command "I want to read status"
 3c6:	80 ea       	ldi	r24, 0xA0	; 160
 3c8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
	unsigned char value  = 	SPI_tranciever(0xFF);						// Save returned value for SPI_ tranciever
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	0e 94 7f 02 	call	0x4fe	; 0x4fe <SPI_tranciever>
	PORTB |=(1<<PB4);	
 3d2:	c4 9a       	sbi	0x18, 4	; 24
	return value;														// Return saved variabel 
}
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	08 95       	ret

000003d8 <init_OLED>:
volatile char *write_d = (char *) 0x1200; 
char Name[3];

void init_OLED()
{
	MCUCR |= (1<<SRE);
 3d8:	85 b7       	in	r24, 0x35	; 53
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 3de:	80 b7       	in	r24, 0x30	; 48
 3e0:	80 62       	ori	r24, 0x20	; 32
 3e2:	80 bf       	out	0x30, r24	; 48
	*write_c = (0xae);        //  display  off
 3e4:	e0 91 06 01 	lds	r30, 0x0106
 3e8:	f0 91 07 01 	lds	r31, 0x0107
 3ec:	8e ea       	ldi	r24, 0xAE	; 174
 3ee:	80 83       	st	Z, r24
	*write_c = (0xa1);        //segment  remap
 3f0:	e0 91 06 01 	lds	r30, 0x0106
 3f4:	f0 91 07 01 	lds	r31, 0x0107
 3f8:	81 ea       	ldi	r24, 0xA1	; 161
 3fa:	80 83       	st	Z, r24
	*write_c = (0xda);        //common  pads  hardware:  alternative
 3fc:	e0 91 06 01 	lds	r30, 0x0106
 400:	f0 91 07 01 	lds	r31, 0x0107
 404:	8a ed       	ldi	r24, 0xDA	; 218
 406:	80 83       	st	Z, r24
	*write_c = (0x12);
 408:	e0 91 06 01 	lds	r30, 0x0106
 40c:	f0 91 07 01 	lds	r31, 0x0107
 410:	82 e1       	ldi	r24, 0x12	; 18
 412:	80 83       	st	Z, r24
	*write_c = (0xc8);        //common output scan direction:com63~com0
 414:	e0 91 06 01 	lds	r30, 0x0106
 418:	f0 91 07 01 	lds	r31, 0x0107
 41c:	88 ec       	ldi	r24, 0xC8	; 200
 41e:	80 83       	st	Z, r24
	*write_c = (0xa8);        //multiplex  ration  mode:63
 420:	e0 91 06 01 	lds	r30, 0x0106
 424:	f0 91 07 01 	lds	r31, 0x0107
 428:	88 ea       	ldi	r24, 0xA8	; 168
 42a:	80 83       	st	Z, r24
	*write_c = (0x3f);
 42c:	e0 91 06 01 	lds	r30, 0x0106
 430:	f0 91 07 01 	lds	r31, 0x0107
 434:	8f e3       	ldi	r24, 0x3F	; 63
 436:	80 83       	st	Z, r24
	*write_c = (0xd5);        //display divide ratio/osc. freq. mode
 438:	e0 91 06 01 	lds	r30, 0x0106
 43c:	f0 91 07 01 	lds	r31, 0x0107
 440:	85 ed       	ldi	r24, 0xD5	; 213
 442:	80 83       	st	Z, r24
	*write_c = (0x80);
 444:	e0 91 06 01 	lds	r30, 0x0106
 448:	f0 91 07 01 	lds	r31, 0x0107
 44c:	80 e8       	ldi	r24, 0x80	; 128
 44e:	80 83       	st	Z, r24
	*write_c = (0x81);        //contrast  control
 450:	e0 91 06 01 	lds	r30, 0x0106
 454:	f0 91 07 01 	lds	r31, 0x0107
 458:	81 e8       	ldi	r24, 0x81	; 129
 45a:	80 83       	st	Z, r24
	*write_c = (0x50);
 45c:	e0 91 06 01 	lds	r30, 0x0106
 460:	f0 91 07 01 	lds	r31, 0x0107
 464:	80 e5       	ldi	r24, 0x50	; 80
 466:	80 83       	st	Z, r24
	*write_c = (0xd9);        //set  pre-charge  period
 468:	e0 91 06 01 	lds	r30, 0x0106
 46c:	f0 91 07 01 	lds	r31, 0x0107
 470:	89 ed       	ldi	r24, 0xD9	; 217
 472:	80 83       	st	Z, r24
	*write_c = (0x21);
 474:	e0 91 06 01 	lds	r30, 0x0106
 478:	f0 91 07 01 	lds	r31, 0x0107
 47c:	81 e2       	ldi	r24, 0x21	; 33
 47e:	80 83       	st	Z, r24
	*write_c = (0x20);        //Set  Memory  Addressing  Mode
 480:	e0 91 06 01 	lds	r30, 0x0106
 484:	f0 91 07 01 	lds	r31, 0x0107
 488:	80 e2       	ldi	r24, 0x20	; 32
 48a:	80 83       	st	Z, r24
	*write_c = (0x02);
 48c:	e0 91 06 01 	lds	r30, 0x0106
 490:	f0 91 07 01 	lds	r31, 0x0107
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	80 83       	st	Z, r24
	*write_c = (0xdb);        //VCOM  deselect  level  mode
 498:	e0 91 06 01 	lds	r30, 0x0106
 49c:	f0 91 07 01 	lds	r31, 0x0107
 4a0:	8b ed       	ldi	r24, 0xDB	; 219
 4a2:	80 83       	st	Z, r24
	*write_c = (0x30);
 4a4:	e0 91 06 01 	lds	r30, 0x0106
 4a8:	f0 91 07 01 	lds	r31, 0x0107
 4ac:	80 e3       	ldi	r24, 0x30	; 48
 4ae:	80 83       	st	Z, r24
	*write_c = (0xad);        //master  configuration
 4b0:	e0 91 06 01 	lds	r30, 0x0106
 4b4:	f0 91 07 01 	lds	r31, 0x0107
 4b8:	8d ea       	ldi	r24, 0xAD	; 173
 4ba:	80 83       	st	Z, r24
	*write_c = (0x00);
 4bc:	e0 91 06 01 	lds	r30, 0x0106
 4c0:	f0 91 07 01 	lds	r31, 0x0107
 4c4:	10 82       	st	Z, r1
	*write_c = (0xa4);        //out  follows  RAM  content
 4c6:	e0 91 06 01 	lds	r30, 0x0106
 4ca:	f0 91 07 01 	lds	r31, 0x0107
 4ce:	84 ea       	ldi	r24, 0xA4	; 164
 4d0:	80 83       	st	Z, r24
	*write_c = (0xa6);        //set  normal  display
 4d2:	e0 91 06 01 	lds	r30, 0x0106
 4d6:	f0 91 07 01 	lds	r31, 0x0107
 4da:	86 ea       	ldi	r24, 0xA6	; 166
 4dc:	80 83       	st	Z, r24
	*write_c = (0xaf);        //  display  on
 4de:	e0 91 06 01 	lds	r30, 0x0106
 4e2:	f0 91 07 01 	lds	r31, 0x0107
 4e6:	8f ea       	ldi	r24, 0xAF	; 175
 4e8:	80 83       	st	Z, r24
 4ea:	08 95       	ret

000004ec <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	/* Set MOSI, SS and SCK output, all others input */
	DDRB &= ~(1<<PB6);
 4ec:	be 98       	cbi	0x17, 6	; 23
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
 4ee:	87 b3       	in	r24, 0x17	; 23
 4f0:	80 6b       	ori	r24, 0xB0	; 176
 4f2:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB4);
 4f4:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//&~(1<<DORD);
 4f6:	8d b1       	in	r24, 0x0d	; 13
 4f8:	81 65       	ori	r24, 0x51	; 81
 4fa:	8d b9       	out	0x0d, r24	; 13
 4fc:	08 95       	ret

000004fe <SPI_tranciever>:
unsigned char SPI_tranciever(unsigned char data)
{

	/* Start transmission */

	SPDR = data;
 4fe:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
 500:	77 9b       	sbis	0x0e, 7	; 14
 502:	fe cf       	rjmp	.-4      	; 0x500 <__stack+0x1>

	//Return received data
	return SPDR;
 504:	8f b1       	in	r24, 0x0f	; 15
}
 506:	08 95       	ret

00000508 <SRAM_init>:



void SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
 508:	85 b7       	in	r24, 0x35	; 53
 50a:	80 68       	ori	r24, 0x80	; 128
 50c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 50e:	80 b7       	in	r24, 0x30	; 48
 510:	80 62       	ori	r24, 0x20	; 32
 512:	80 bf       	out	0x30, r24	; 48
 514:	08 95       	ret

00000516 <USART_Receive>:


unsigned char USART_Receive(void)
	{
	//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 516:	5f 9b       	sbis	0x0b, 7	; 11
 518:	fe cf       	rjmp	.-4      	; 0x516 <USART_Receive>
	
	//Get and return received data from buffer
	return UDR0;
 51a:	8c b1       	in	r24, 0x0c	; 12
	}
 51c:	08 95       	ret

0000051e <USART_Transmit>:

void USART_Transmit( unsigned char data )
	{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
 51e:	5d 9b       	sbis	0x0b, 5	; 11
 520:	fe cf       	rjmp	.-4      	; 0x51e <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 522:	8c b9       	out	0x0c, r24	; 12
 524:	08 95       	ret

00000526 <UartInit>:

	
//}
void UartInit(){
	//Set Baud rate 9600
	UBRR0H = (unsigned char)(MYUBRR>>8);	// Setter de 8 mest signifikante bitene
 526:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBRR);	// Setter de 8 minst signifikante bitene
 528:	8f e1       	ldi	r24, 0x1F	; 31
 52a:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 52c:	88 e1       	ldi	r24, 0x18	; 24
 52e:	8a b9       	out	0x0a, r24	; 10
	// 8N2
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 530:	8e e8       	ldi	r24, 0x8E	; 142
 532:	80 bd       	out	0x20, r24	; 32
	fdevopen(&USART_Transmit, &USART_Receive);
 534:	6b e8       	ldi	r22, 0x8B	; 139
 536:	72 e0       	ldi	r23, 0x02	; 2
 538:	8f e8       	ldi	r24, 0x8F	; 143
 53a:	92 e0       	ldi	r25, 0x02	; 2
 53c:	0e 94 a1 02 	call	0x542	; 0x542 <fdevopen>
 540:	08 95       	ret

00000542 <fdevopen>:
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ec 01       	movw	r28, r24
 54c:	8b 01       	movw	r16, r22
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	31 f4       	brne	.+12     	; 0x55e <fdevopen+0x1c>
 552:	61 15       	cp	r22, r1
 554:	71 05       	cpc	r23, r1
 556:	19 f4       	brne	.+6      	; 0x55e <fdevopen+0x1c>
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	38 c0       	rjmp	.+112    	; 0x5ce <fdevopen+0x8c>
 55e:	6e e0       	ldi	r22, 0x0E	; 14
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 ff 04 	call	0x9fe	; 0x9fe <calloc>
 56a:	fc 01       	movw	r30, r24
 56c:	00 97       	sbiw	r24, 0x00	; 0
 56e:	a1 f3       	breq	.-24     	; 0x558 <fdevopen+0x16>
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	83 83       	std	Z+3, r24	; 0x03
 574:	01 15       	cp	r16, r1
 576:	11 05       	cpc	r17, r1
 578:	71 f0       	breq	.+28     	; 0x596 <fdevopen+0x54>
 57a:	13 87       	std	Z+11, r17	; 0x0b
 57c:	02 87       	std	Z+10, r16	; 0x0a
 57e:	81 e8       	ldi	r24, 0x81	; 129
 580:	83 83       	std	Z+3, r24	; 0x03
 582:	80 91 92 01 	lds	r24, 0x0192
 586:	90 91 93 01 	lds	r25, 0x0193
 58a:	89 2b       	or	r24, r25
 58c:	21 f4       	brne	.+8      	; 0x596 <fdevopen+0x54>
 58e:	f0 93 93 01 	sts	0x0193, r31
 592:	e0 93 92 01 	sts	0x0192, r30
 596:	20 97       	sbiw	r28, 0x00	; 0
 598:	c9 f0       	breq	.+50     	; 0x5cc <fdevopen+0x8a>
 59a:	d1 87       	std	Z+9, r29	; 0x09
 59c:	c0 87       	std	Z+8, r28	; 0x08
 59e:	83 81       	ldd	r24, Z+3	; 0x03
 5a0:	82 60       	ori	r24, 0x02	; 2
 5a2:	83 83       	std	Z+3, r24	; 0x03
 5a4:	80 91 94 01 	lds	r24, 0x0194
 5a8:	90 91 95 01 	lds	r25, 0x0195
 5ac:	89 2b       	or	r24, r25
 5ae:	71 f4       	brne	.+28     	; 0x5cc <fdevopen+0x8a>
 5b0:	f0 93 95 01 	sts	0x0195, r31
 5b4:	e0 93 94 01 	sts	0x0194, r30
 5b8:	80 91 96 01 	lds	r24, 0x0196
 5bc:	90 91 97 01 	lds	r25, 0x0197
 5c0:	89 2b       	or	r24, r25
 5c2:	21 f4       	brne	.+8      	; 0x5cc <fdevopen+0x8a>
 5c4:	f0 93 97 01 	sts	0x0197, r31
 5c8:	e0 93 96 01 	sts	0x0196, r30
 5cc:	cf 01       	movw	r24, r30
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	08 95       	ret

000005d8 <printf>:
 5d8:	a0 e0       	ldi	r26, 0x00	; 0
 5da:	b0 e0       	ldi	r27, 0x00	; 0
 5dc:	e2 ef       	ldi	r30, 0xF2	; 242
 5de:	f2 e0       	ldi	r31, 0x02	; 2
 5e0:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__prologue_saves__+0x20>
 5e4:	fe 01       	movw	r30, r28
 5e6:	35 96       	adiw	r30, 0x05	; 5
 5e8:	61 91       	ld	r22, Z+
 5ea:	71 91       	ld	r23, Z+
 5ec:	af 01       	movw	r20, r30
 5ee:	80 91 94 01 	lds	r24, 0x0194
 5f2:	90 91 95 01 	lds	r25, 0x0195
 5f6:	0e 94 2d 03 	call	0x65a	; 0x65a <vfprintf>
 5fa:	e2 e0       	ldi	r30, 0x02	; 2
 5fc:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__epilogue_restores__+0x20>

00000600 <puts>:
 600:	0f 93       	push	r16
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	e0 91 94 01 	lds	r30, 0x0194
 60c:	f0 91 95 01 	lds	r31, 0x0195
 610:	23 81       	ldd	r18, Z+3	; 0x03
 612:	21 ff       	sbrs	r18, 1
 614:	1b c0       	rjmp	.+54     	; 0x64c <puts+0x4c>
 616:	ec 01       	movw	r28, r24
 618:	00 e0       	ldi	r16, 0x00	; 0
 61a:	10 e0       	ldi	r17, 0x00	; 0
 61c:	89 91       	ld	r24, Y+
 61e:	60 91 94 01 	lds	r22, 0x0194
 622:	70 91 95 01 	lds	r23, 0x0195
 626:	db 01       	movw	r26, r22
 628:	18 96       	adiw	r26, 0x08	; 8
 62a:	ed 91       	ld	r30, X+
 62c:	fc 91       	ld	r31, X
 62e:	19 97       	sbiw	r26, 0x09	; 9
 630:	88 23       	and	r24, r24
 632:	31 f0       	breq	.+12     	; 0x640 <puts+0x40>
 634:	09 95       	icall
 636:	89 2b       	or	r24, r25
 638:	89 f3       	breq	.-30     	; 0x61c <puts+0x1c>
 63a:	0f ef       	ldi	r16, 0xFF	; 255
 63c:	1f ef       	ldi	r17, 0xFF	; 255
 63e:	ee cf       	rjmp	.-36     	; 0x61c <puts+0x1c>
 640:	8a e0       	ldi	r24, 0x0A	; 10
 642:	09 95       	icall
 644:	89 2b       	or	r24, r25
 646:	11 f4       	brne	.+4      	; 0x64c <puts+0x4c>
 648:	c8 01       	movw	r24, r16
 64a:	02 c0       	rjmp	.+4      	; 0x650 <puts+0x50>
 64c:	8f ef       	ldi	r24, 0xFF	; 255
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	0f 91       	pop	r16
 658:	08 95       	ret

0000065a <vfprintf>:
 65a:	ac e0       	ldi	r26, 0x0C	; 12
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e3 e3       	ldi	r30, 0x33	; 51
 660:	f3 e0       	ldi	r31, 0x03	; 3
 662:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__prologue_saves__>
 666:	7c 01       	movw	r14, r24
 668:	6b 01       	movw	r12, r22
 66a:	8a 01       	movw	r16, r20
 66c:	fc 01       	movw	r30, r24
 66e:	17 82       	std	Z+7, r1	; 0x07
 670:	16 82       	std	Z+6, r1	; 0x06
 672:	83 81       	ldd	r24, Z+3	; 0x03
 674:	81 ff       	sbrs	r24, 1
 676:	bd c1       	rjmp	.+890    	; 0x9f2 <vfprintf+0x398>
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	4c 01       	movw	r8, r24
 67e:	f7 01       	movw	r30, r14
 680:	93 81       	ldd	r25, Z+3	; 0x03
 682:	f6 01       	movw	r30, r12
 684:	93 fd       	sbrc	r25, 3
 686:	85 91       	lpm	r24, Z+
 688:	93 ff       	sbrs	r25, 3
 68a:	81 91       	ld	r24, Z+
 68c:	6f 01       	movw	r12, r30
 68e:	88 23       	and	r24, r24
 690:	09 f4       	brne	.+2      	; 0x694 <vfprintf+0x3a>
 692:	ab c1       	rjmp	.+854    	; 0x9ea <vfprintf+0x390>
 694:	85 32       	cpi	r24, 0x25	; 37
 696:	39 f4       	brne	.+14     	; 0x6a6 <vfprintf+0x4c>
 698:	93 fd       	sbrc	r25, 3
 69a:	85 91       	lpm	r24, Z+
 69c:	93 ff       	sbrs	r25, 3
 69e:	81 91       	ld	r24, Z+
 6a0:	6f 01       	movw	r12, r30
 6a2:	85 32       	cpi	r24, 0x25	; 37
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <vfprintf+0x56>
 6a6:	b7 01       	movw	r22, r14
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 6ae:	e7 cf       	rjmp	.-50     	; 0x67e <vfprintf+0x24>
 6b0:	51 2c       	mov	r5, r1
 6b2:	31 2c       	mov	r3, r1
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	20 32       	cpi	r18, 0x20	; 32
 6b8:	a0 f4       	brcc	.+40     	; 0x6e2 <vfprintf+0x88>
 6ba:	8b 32       	cpi	r24, 0x2B	; 43
 6bc:	69 f0       	breq	.+26     	; 0x6d8 <vfprintf+0x7e>
 6be:	30 f4       	brcc	.+12     	; 0x6cc <vfprintf+0x72>
 6c0:	80 32       	cpi	r24, 0x20	; 32
 6c2:	59 f0       	breq	.+22     	; 0x6da <vfprintf+0x80>
 6c4:	83 32       	cpi	r24, 0x23	; 35
 6c6:	69 f4       	brne	.+26     	; 0x6e2 <vfprintf+0x88>
 6c8:	20 61       	ori	r18, 0x10	; 16
 6ca:	2c c0       	rjmp	.+88     	; 0x724 <vfprintf+0xca>
 6cc:	8d 32       	cpi	r24, 0x2D	; 45
 6ce:	39 f0       	breq	.+14     	; 0x6de <vfprintf+0x84>
 6d0:	80 33       	cpi	r24, 0x30	; 48
 6d2:	39 f4       	brne	.+14     	; 0x6e2 <vfprintf+0x88>
 6d4:	21 60       	ori	r18, 0x01	; 1
 6d6:	26 c0       	rjmp	.+76     	; 0x724 <vfprintf+0xca>
 6d8:	22 60       	ori	r18, 0x02	; 2
 6da:	24 60       	ori	r18, 0x04	; 4
 6dc:	23 c0       	rjmp	.+70     	; 0x724 <vfprintf+0xca>
 6de:	28 60       	ori	r18, 0x08	; 8
 6e0:	21 c0       	rjmp	.+66     	; 0x724 <vfprintf+0xca>
 6e2:	27 fd       	sbrc	r18, 7
 6e4:	27 c0       	rjmp	.+78     	; 0x734 <vfprintf+0xda>
 6e6:	30 ed       	ldi	r19, 0xD0	; 208
 6e8:	38 0f       	add	r19, r24
 6ea:	3a 30       	cpi	r19, 0x0A	; 10
 6ec:	78 f4       	brcc	.+30     	; 0x70c <vfprintf+0xb2>
 6ee:	26 ff       	sbrs	r18, 6
 6f0:	06 c0       	rjmp	.+12     	; 0x6fe <vfprintf+0xa4>
 6f2:	fa e0       	ldi	r31, 0x0A	; 10
 6f4:	5f 9e       	mul	r5, r31
 6f6:	30 0d       	add	r19, r0
 6f8:	11 24       	eor	r1, r1
 6fa:	53 2e       	mov	r5, r19
 6fc:	13 c0       	rjmp	.+38     	; 0x724 <vfprintf+0xca>
 6fe:	8a e0       	ldi	r24, 0x0A	; 10
 700:	38 9e       	mul	r3, r24
 702:	30 0d       	add	r19, r0
 704:	11 24       	eor	r1, r1
 706:	33 2e       	mov	r3, r19
 708:	20 62       	ori	r18, 0x20	; 32
 70a:	0c c0       	rjmp	.+24     	; 0x724 <vfprintf+0xca>
 70c:	8e 32       	cpi	r24, 0x2E	; 46
 70e:	21 f4       	brne	.+8      	; 0x718 <vfprintf+0xbe>
 710:	26 fd       	sbrc	r18, 6
 712:	6b c1       	rjmp	.+726    	; 0x9ea <vfprintf+0x390>
 714:	20 64       	ori	r18, 0x40	; 64
 716:	06 c0       	rjmp	.+12     	; 0x724 <vfprintf+0xca>
 718:	8c 36       	cpi	r24, 0x6C	; 108
 71a:	11 f4       	brne	.+4      	; 0x720 <vfprintf+0xc6>
 71c:	20 68       	ori	r18, 0x80	; 128
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0xca>
 720:	88 36       	cpi	r24, 0x68	; 104
 722:	41 f4       	brne	.+16     	; 0x734 <vfprintf+0xda>
 724:	f6 01       	movw	r30, r12
 726:	93 fd       	sbrc	r25, 3
 728:	85 91       	lpm	r24, Z+
 72a:	93 ff       	sbrs	r25, 3
 72c:	81 91       	ld	r24, Z+
 72e:	6f 01       	movw	r12, r30
 730:	81 11       	cpse	r24, r1
 732:	c1 cf       	rjmp	.-126    	; 0x6b6 <vfprintf+0x5c>
 734:	98 2f       	mov	r25, r24
 736:	9f 7d       	andi	r25, 0xDF	; 223
 738:	95 54       	subi	r25, 0x45	; 69
 73a:	93 30       	cpi	r25, 0x03	; 3
 73c:	28 f4       	brcc	.+10     	; 0x748 <vfprintf+0xee>
 73e:	0c 5f       	subi	r16, 0xFC	; 252
 740:	1f 4f       	sbci	r17, 0xFF	; 255
 742:	ff e3       	ldi	r31, 0x3F	; 63
 744:	f9 83       	std	Y+1, r31	; 0x01
 746:	0d c0       	rjmp	.+26     	; 0x762 <vfprintf+0x108>
 748:	83 36       	cpi	r24, 0x63	; 99
 74a:	31 f0       	breq	.+12     	; 0x758 <vfprintf+0xfe>
 74c:	83 37       	cpi	r24, 0x73	; 115
 74e:	71 f0       	breq	.+28     	; 0x76c <vfprintf+0x112>
 750:	83 35       	cpi	r24, 0x53	; 83
 752:	09 f0       	breq	.+2      	; 0x756 <vfprintf+0xfc>
 754:	5b c0       	rjmp	.+182    	; 0x80c <vfprintf+0x1b2>
 756:	22 c0       	rjmp	.+68     	; 0x79c <vfprintf+0x142>
 758:	f8 01       	movw	r30, r16
 75a:	80 81       	ld	r24, Z
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	0e 5f       	subi	r16, 0xFE	; 254
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	44 24       	eor	r4, r4
 764:	43 94       	inc	r4
 766:	51 2c       	mov	r5, r1
 768:	54 01       	movw	r10, r8
 76a:	15 c0       	rjmp	.+42     	; 0x796 <vfprintf+0x13c>
 76c:	38 01       	movw	r6, r16
 76e:	f2 e0       	ldi	r31, 0x02	; 2
 770:	6f 0e       	add	r6, r31
 772:	71 1c       	adc	r7, r1
 774:	f8 01       	movw	r30, r16
 776:	a0 80       	ld	r10, Z
 778:	b1 80       	ldd	r11, Z+1	; 0x01
 77a:	26 ff       	sbrs	r18, 6
 77c:	03 c0       	rjmp	.+6      	; 0x784 <vfprintf+0x12a>
 77e:	65 2d       	mov	r22, r5
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <vfprintf+0x12e>
 784:	6f ef       	ldi	r22, 0xFF	; 255
 786:	7f ef       	ldi	r23, 0xFF	; 255
 788:	c5 01       	movw	r24, r10
 78a:	2c 87       	std	Y+12, r18	; 0x0c
 78c:	0e 94 54 06 	call	0xca8	; 0xca8 <strnlen>
 790:	2c 01       	movw	r4, r24
 792:	83 01       	movw	r16, r6
 794:	2c 85       	ldd	r18, Y+12	; 0x0c
 796:	2f 77       	andi	r18, 0x7F	; 127
 798:	22 2e       	mov	r2, r18
 79a:	17 c0       	rjmp	.+46     	; 0x7ca <vfprintf+0x170>
 79c:	38 01       	movw	r6, r16
 79e:	f2 e0       	ldi	r31, 0x02	; 2
 7a0:	6f 0e       	add	r6, r31
 7a2:	71 1c       	adc	r7, r1
 7a4:	f8 01       	movw	r30, r16
 7a6:	a0 80       	ld	r10, Z
 7a8:	b1 80       	ldd	r11, Z+1	; 0x01
 7aa:	26 ff       	sbrs	r18, 6
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <vfprintf+0x15a>
 7ae:	65 2d       	mov	r22, r5
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <vfprintf+0x15e>
 7b4:	6f ef       	ldi	r22, 0xFF	; 255
 7b6:	7f ef       	ldi	r23, 0xFF	; 255
 7b8:	c5 01       	movw	r24, r10
 7ba:	2c 87       	std	Y+12, r18	; 0x0c
 7bc:	0e 94 42 06 	call	0xc84	; 0xc84 <strnlen_P>
 7c0:	2c 01       	movw	r4, r24
 7c2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c4:	20 68       	ori	r18, 0x80	; 128
 7c6:	22 2e       	mov	r2, r18
 7c8:	83 01       	movw	r16, r6
 7ca:	23 fc       	sbrc	r2, 3
 7cc:	1b c0       	rjmp	.+54     	; 0x804 <vfprintf+0x1aa>
 7ce:	83 2d       	mov	r24, r3
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	48 16       	cp	r4, r24
 7d4:	59 06       	cpc	r5, r25
 7d6:	b0 f4       	brcc	.+44     	; 0x804 <vfprintf+0x1aa>
 7d8:	b7 01       	movw	r22, r14
 7da:	80 e2       	ldi	r24, 0x20	; 32
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 7e2:	3a 94       	dec	r3
 7e4:	f4 cf       	rjmp	.-24     	; 0x7ce <vfprintf+0x174>
 7e6:	f5 01       	movw	r30, r10
 7e8:	27 fc       	sbrc	r2, 7
 7ea:	85 91       	lpm	r24, Z+
 7ec:	27 fe       	sbrs	r2, 7
 7ee:	81 91       	ld	r24, Z+
 7f0:	5f 01       	movw	r10, r30
 7f2:	b7 01       	movw	r22, r14
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 7fa:	31 10       	cpse	r3, r1
 7fc:	3a 94       	dec	r3
 7fe:	f1 e0       	ldi	r31, 0x01	; 1
 800:	4f 1a       	sub	r4, r31
 802:	51 08       	sbc	r5, r1
 804:	41 14       	cp	r4, r1
 806:	51 04       	cpc	r5, r1
 808:	71 f7       	brne	.-36     	; 0x7e6 <vfprintf+0x18c>
 80a:	e5 c0       	rjmp	.+458    	; 0x9d6 <vfprintf+0x37c>
 80c:	84 36       	cpi	r24, 0x64	; 100
 80e:	11 f0       	breq	.+4      	; 0x814 <vfprintf+0x1ba>
 810:	89 36       	cpi	r24, 0x69	; 105
 812:	39 f5       	brne	.+78     	; 0x862 <vfprintf+0x208>
 814:	f8 01       	movw	r30, r16
 816:	27 ff       	sbrs	r18, 7
 818:	07 c0       	rjmp	.+14     	; 0x828 <vfprintf+0x1ce>
 81a:	60 81       	ld	r22, Z
 81c:	71 81       	ldd	r23, Z+1	; 0x01
 81e:	82 81       	ldd	r24, Z+2	; 0x02
 820:	93 81       	ldd	r25, Z+3	; 0x03
 822:	0c 5f       	subi	r16, 0xFC	; 252
 824:	1f 4f       	sbci	r17, 0xFF	; 255
 826:	08 c0       	rjmp	.+16     	; 0x838 <vfprintf+0x1de>
 828:	60 81       	ld	r22, Z
 82a:	71 81       	ldd	r23, Z+1	; 0x01
 82c:	88 27       	eor	r24, r24
 82e:	77 fd       	sbrc	r23, 7
 830:	80 95       	com	r24
 832:	98 2f       	mov	r25, r24
 834:	0e 5f       	subi	r16, 0xFE	; 254
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	2f 76       	andi	r18, 0x6F	; 111
 83a:	b2 2e       	mov	r11, r18
 83c:	97 ff       	sbrs	r25, 7
 83e:	09 c0       	rjmp	.+18     	; 0x852 <vfprintf+0x1f8>
 840:	90 95       	com	r25
 842:	80 95       	com	r24
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	20 68       	ori	r18, 0x80	; 128
 850:	b2 2e       	mov	r11, r18
 852:	2a e0       	ldi	r18, 0x0A	; 10
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	a4 01       	movw	r20, r8
 858:	0e 94 91 06 	call	0xd22	; 0xd22 <__ultoa_invert>
 85c:	a8 2e       	mov	r10, r24
 85e:	a8 18       	sub	r10, r8
 860:	44 c0       	rjmp	.+136    	; 0x8ea <vfprintf+0x290>
 862:	85 37       	cpi	r24, 0x75	; 117
 864:	29 f4       	brne	.+10     	; 0x870 <vfprintf+0x216>
 866:	2f 7e       	andi	r18, 0xEF	; 239
 868:	b2 2e       	mov	r11, r18
 86a:	2a e0       	ldi	r18, 0x0A	; 10
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	25 c0       	rjmp	.+74     	; 0x8ba <vfprintf+0x260>
 870:	f2 2f       	mov	r31, r18
 872:	f9 7f       	andi	r31, 0xF9	; 249
 874:	bf 2e       	mov	r11, r31
 876:	8f 36       	cpi	r24, 0x6F	; 111
 878:	c1 f0       	breq	.+48     	; 0x8aa <vfprintf+0x250>
 87a:	18 f4       	brcc	.+6      	; 0x882 <vfprintf+0x228>
 87c:	88 35       	cpi	r24, 0x58	; 88
 87e:	79 f0       	breq	.+30     	; 0x89e <vfprintf+0x244>
 880:	b4 c0       	rjmp	.+360    	; 0x9ea <vfprintf+0x390>
 882:	80 37       	cpi	r24, 0x70	; 112
 884:	19 f0       	breq	.+6      	; 0x88c <vfprintf+0x232>
 886:	88 37       	cpi	r24, 0x78	; 120
 888:	21 f0       	breq	.+8      	; 0x892 <vfprintf+0x238>
 88a:	af c0       	rjmp	.+350    	; 0x9ea <vfprintf+0x390>
 88c:	2f 2f       	mov	r18, r31
 88e:	20 61       	ori	r18, 0x10	; 16
 890:	b2 2e       	mov	r11, r18
 892:	b4 fe       	sbrs	r11, 4
 894:	0d c0       	rjmp	.+26     	; 0x8b0 <vfprintf+0x256>
 896:	8b 2d       	mov	r24, r11
 898:	84 60       	ori	r24, 0x04	; 4
 89a:	b8 2e       	mov	r11, r24
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <vfprintf+0x256>
 89e:	24 ff       	sbrs	r18, 4
 8a0:	0a c0       	rjmp	.+20     	; 0x8b6 <vfprintf+0x25c>
 8a2:	9f 2f       	mov	r25, r31
 8a4:	96 60       	ori	r25, 0x06	; 6
 8a6:	b9 2e       	mov	r11, r25
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <vfprintf+0x25c>
 8aa:	28 e0       	ldi	r18, 0x08	; 8
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	05 c0       	rjmp	.+10     	; 0x8ba <vfprintf+0x260>
 8b0:	20 e1       	ldi	r18, 0x10	; 16
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <vfprintf+0x260>
 8b6:	20 e1       	ldi	r18, 0x10	; 16
 8b8:	32 e0       	ldi	r19, 0x02	; 2
 8ba:	f8 01       	movw	r30, r16
 8bc:	b7 fe       	sbrs	r11, 7
 8be:	07 c0       	rjmp	.+14     	; 0x8ce <vfprintf+0x274>
 8c0:	60 81       	ld	r22, Z
 8c2:	71 81       	ldd	r23, Z+1	; 0x01
 8c4:	82 81       	ldd	r24, Z+2	; 0x02
 8c6:	93 81       	ldd	r25, Z+3	; 0x03
 8c8:	0c 5f       	subi	r16, 0xFC	; 252
 8ca:	1f 4f       	sbci	r17, 0xFF	; 255
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <vfprintf+0x280>
 8ce:	60 81       	ld	r22, Z
 8d0:	71 81       	ldd	r23, Z+1	; 0x01
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 5f       	subi	r16, 0xFE	; 254
 8d8:	1f 4f       	sbci	r17, 0xFF	; 255
 8da:	a4 01       	movw	r20, r8
 8dc:	0e 94 91 06 	call	0xd22	; 0xd22 <__ultoa_invert>
 8e0:	a8 2e       	mov	r10, r24
 8e2:	a8 18       	sub	r10, r8
 8e4:	fb 2d       	mov	r31, r11
 8e6:	ff 77       	andi	r31, 0x7F	; 127
 8e8:	bf 2e       	mov	r11, r31
 8ea:	b6 fe       	sbrs	r11, 6
 8ec:	0b c0       	rjmp	.+22     	; 0x904 <vfprintf+0x2aa>
 8ee:	2b 2d       	mov	r18, r11
 8f0:	2e 7f       	andi	r18, 0xFE	; 254
 8f2:	a5 14       	cp	r10, r5
 8f4:	50 f4       	brcc	.+20     	; 0x90a <vfprintf+0x2b0>
 8f6:	b4 fe       	sbrs	r11, 4
 8f8:	0a c0       	rjmp	.+20     	; 0x90e <vfprintf+0x2b4>
 8fa:	b2 fc       	sbrc	r11, 2
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <vfprintf+0x2b4>
 8fe:	2b 2d       	mov	r18, r11
 900:	2e 7e       	andi	r18, 0xEE	; 238
 902:	05 c0       	rjmp	.+10     	; 0x90e <vfprintf+0x2b4>
 904:	7a 2c       	mov	r7, r10
 906:	2b 2d       	mov	r18, r11
 908:	03 c0       	rjmp	.+6      	; 0x910 <vfprintf+0x2b6>
 90a:	7a 2c       	mov	r7, r10
 90c:	01 c0       	rjmp	.+2      	; 0x910 <vfprintf+0x2b6>
 90e:	75 2c       	mov	r7, r5
 910:	24 ff       	sbrs	r18, 4
 912:	0d c0       	rjmp	.+26     	; 0x92e <vfprintf+0x2d4>
 914:	fe 01       	movw	r30, r28
 916:	ea 0d       	add	r30, r10
 918:	f1 1d       	adc	r31, r1
 91a:	80 81       	ld	r24, Z
 91c:	80 33       	cpi	r24, 0x30	; 48
 91e:	11 f4       	brne	.+4      	; 0x924 <vfprintf+0x2ca>
 920:	29 7e       	andi	r18, 0xE9	; 233
 922:	09 c0       	rjmp	.+18     	; 0x936 <vfprintf+0x2dc>
 924:	22 ff       	sbrs	r18, 2
 926:	06 c0       	rjmp	.+12     	; 0x934 <vfprintf+0x2da>
 928:	73 94       	inc	r7
 92a:	73 94       	inc	r7
 92c:	04 c0       	rjmp	.+8      	; 0x936 <vfprintf+0x2dc>
 92e:	82 2f       	mov	r24, r18
 930:	86 78       	andi	r24, 0x86	; 134
 932:	09 f0       	breq	.+2      	; 0x936 <vfprintf+0x2dc>
 934:	73 94       	inc	r7
 936:	23 fd       	sbrc	r18, 3
 938:	13 c0       	rjmp	.+38     	; 0x960 <vfprintf+0x306>
 93a:	20 ff       	sbrs	r18, 0
 93c:	06 c0       	rjmp	.+12     	; 0x94a <vfprintf+0x2f0>
 93e:	5a 2c       	mov	r5, r10
 940:	73 14       	cp	r7, r3
 942:	18 f4       	brcc	.+6      	; 0x94a <vfprintf+0x2f0>
 944:	53 0c       	add	r5, r3
 946:	57 18       	sub	r5, r7
 948:	73 2c       	mov	r7, r3
 94a:	73 14       	cp	r7, r3
 94c:	68 f4       	brcc	.+26     	; 0x968 <vfprintf+0x30e>
 94e:	b7 01       	movw	r22, r14
 950:	80 e2       	ldi	r24, 0x20	; 32
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	2c 87       	std	Y+12, r18	; 0x0c
 956:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 95a:	73 94       	inc	r7
 95c:	2c 85       	ldd	r18, Y+12	; 0x0c
 95e:	f5 cf       	rjmp	.-22     	; 0x94a <vfprintf+0x2f0>
 960:	73 14       	cp	r7, r3
 962:	10 f4       	brcc	.+4      	; 0x968 <vfprintf+0x30e>
 964:	37 18       	sub	r3, r7
 966:	01 c0       	rjmp	.+2      	; 0x96a <vfprintf+0x310>
 968:	31 2c       	mov	r3, r1
 96a:	24 ff       	sbrs	r18, 4
 96c:	12 c0       	rjmp	.+36     	; 0x992 <vfprintf+0x338>
 96e:	b7 01       	movw	r22, r14
 970:	80 e3       	ldi	r24, 0x30	; 48
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	2c 87       	std	Y+12, r18	; 0x0c
 976:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 97a:	2c 85       	ldd	r18, Y+12	; 0x0c
 97c:	22 ff       	sbrs	r18, 2
 97e:	17 c0       	rjmp	.+46     	; 0x9ae <vfprintf+0x354>
 980:	21 ff       	sbrs	r18, 1
 982:	03 c0       	rjmp	.+6      	; 0x98a <vfprintf+0x330>
 984:	88 e5       	ldi	r24, 0x58	; 88
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0x334>
 98a:	88 e7       	ldi	r24, 0x78	; 120
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	b7 01       	movw	r22, r14
 990:	0c c0       	rjmp	.+24     	; 0x9aa <vfprintf+0x350>
 992:	82 2f       	mov	r24, r18
 994:	86 78       	andi	r24, 0x86	; 134
 996:	59 f0       	breq	.+22     	; 0x9ae <vfprintf+0x354>
 998:	21 fd       	sbrc	r18, 1
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <vfprintf+0x346>
 99c:	80 e2       	ldi	r24, 0x20	; 32
 99e:	01 c0       	rjmp	.+2      	; 0x9a2 <vfprintf+0x348>
 9a0:	8b e2       	ldi	r24, 0x2B	; 43
 9a2:	27 fd       	sbrc	r18, 7
 9a4:	8d e2       	ldi	r24, 0x2D	; 45
 9a6:	b7 01       	movw	r22, r14
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 9ae:	a5 14       	cp	r10, r5
 9b0:	38 f4       	brcc	.+14     	; 0x9c0 <vfprintf+0x366>
 9b2:	b7 01       	movw	r22, r14
 9b4:	80 e3       	ldi	r24, 0x30	; 48
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 9bc:	5a 94       	dec	r5
 9be:	f7 cf       	rjmp	.-18     	; 0x9ae <vfprintf+0x354>
 9c0:	aa 94       	dec	r10
 9c2:	f4 01       	movw	r30, r8
 9c4:	ea 0d       	add	r30, r10
 9c6:	f1 1d       	adc	r31, r1
 9c8:	80 81       	ld	r24, Z
 9ca:	b7 01       	movw	r22, r14
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 9d2:	a1 10       	cpse	r10, r1
 9d4:	f5 cf       	rjmp	.-22     	; 0x9c0 <vfprintf+0x366>
 9d6:	33 20       	and	r3, r3
 9d8:	09 f4       	brne	.+2      	; 0x9dc <vfprintf+0x382>
 9da:	51 ce       	rjmp	.-862    	; 0x67e <vfprintf+0x24>
 9dc:	b7 01       	movw	r22, r14
 9de:	80 e2       	ldi	r24, 0x20	; 32
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <fputc>
 9e6:	3a 94       	dec	r3
 9e8:	f6 cf       	rjmp	.-20     	; 0x9d6 <vfprintf+0x37c>
 9ea:	f7 01       	movw	r30, r14
 9ec:	86 81       	ldd	r24, Z+6	; 0x06
 9ee:	97 81       	ldd	r25, Z+7	; 0x07
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <vfprintf+0x39c>
 9f2:	8f ef       	ldi	r24, 0xFF	; 255
 9f4:	9f ef       	ldi	r25, 0xFF	; 255
 9f6:	2c 96       	adiw	r28, 0x0c	; 12
 9f8:	e2 e1       	ldi	r30, 0x12	; 18
 9fa:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__epilogue_restores__>

000009fe <calloc>:
 9fe:	0f 93       	push	r16
 a00:	1f 93       	push	r17
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	86 9f       	mul	r24, r22
 a08:	80 01       	movw	r16, r0
 a0a:	87 9f       	mul	r24, r23
 a0c:	10 0d       	add	r17, r0
 a0e:	96 9f       	mul	r25, r22
 a10:	10 0d       	add	r17, r0
 a12:	11 24       	eor	r1, r1
 a14:	c8 01       	movw	r24, r16
 a16:	0e 94 1b 05 	call	0xa36	; 0xa36 <malloc>
 a1a:	ec 01       	movw	r28, r24
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	29 f0       	breq	.+10     	; 0xa2a <calloc+0x2c>
 a20:	a8 01       	movw	r20, r16
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	0e 94 4d 06 	call	0xc9a	; 0xc9a <memset>
 a2a:	ce 01       	movw	r24, r28
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	08 95       	ret

00000a36 <malloc>:
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	82 30       	cpi	r24, 0x02	; 2
 a3c:	91 05       	cpc	r25, r1
 a3e:	10 f4       	brcc	.+4      	; 0xa44 <malloc+0xe>
 a40:	82 e0       	ldi	r24, 0x02	; 2
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	e0 91 9a 01 	lds	r30, 0x019A
 a48:	f0 91 9b 01 	lds	r31, 0x019B
 a4c:	20 e0       	ldi	r18, 0x00	; 0
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	a0 e0       	ldi	r26, 0x00	; 0
 a52:	b0 e0       	ldi	r27, 0x00	; 0
 a54:	30 97       	sbiw	r30, 0x00	; 0
 a56:	39 f1       	breq	.+78     	; 0xaa6 <malloc+0x70>
 a58:	40 81       	ld	r20, Z
 a5a:	51 81       	ldd	r21, Z+1	; 0x01
 a5c:	48 17       	cp	r20, r24
 a5e:	59 07       	cpc	r21, r25
 a60:	b8 f0       	brcs	.+46     	; 0xa90 <malloc+0x5a>
 a62:	48 17       	cp	r20, r24
 a64:	59 07       	cpc	r21, r25
 a66:	71 f4       	brne	.+28     	; 0xa84 <malloc+0x4e>
 a68:	82 81       	ldd	r24, Z+2	; 0x02
 a6a:	93 81       	ldd	r25, Z+3	; 0x03
 a6c:	10 97       	sbiw	r26, 0x00	; 0
 a6e:	29 f0       	breq	.+10     	; 0xa7a <malloc+0x44>
 a70:	13 96       	adiw	r26, 0x03	; 3
 a72:	9c 93       	st	X, r25
 a74:	8e 93       	st	-X, r24
 a76:	12 97       	sbiw	r26, 0x02	; 2
 a78:	2c c0       	rjmp	.+88     	; 0xad2 <malloc+0x9c>
 a7a:	90 93 9b 01 	sts	0x019B, r25
 a7e:	80 93 9a 01 	sts	0x019A, r24
 a82:	27 c0       	rjmp	.+78     	; 0xad2 <malloc+0x9c>
 a84:	21 15       	cp	r18, r1
 a86:	31 05       	cpc	r19, r1
 a88:	31 f0       	breq	.+12     	; 0xa96 <malloc+0x60>
 a8a:	42 17       	cp	r20, r18
 a8c:	53 07       	cpc	r21, r19
 a8e:	18 f0       	brcs	.+6      	; 0xa96 <malloc+0x60>
 a90:	a9 01       	movw	r20, r18
 a92:	db 01       	movw	r26, r22
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <malloc+0x62>
 a96:	ef 01       	movw	r28, r30
 a98:	9a 01       	movw	r18, r20
 a9a:	bd 01       	movw	r22, r26
 a9c:	df 01       	movw	r26, r30
 a9e:	02 80       	ldd	r0, Z+2	; 0x02
 aa0:	f3 81       	ldd	r31, Z+3	; 0x03
 aa2:	e0 2d       	mov	r30, r0
 aa4:	d7 cf       	rjmp	.-82     	; 0xa54 <malloc+0x1e>
 aa6:	21 15       	cp	r18, r1
 aa8:	31 05       	cpc	r19, r1
 aaa:	f9 f0       	breq	.+62     	; 0xaea <malloc+0xb4>
 aac:	28 1b       	sub	r18, r24
 aae:	39 0b       	sbc	r19, r25
 ab0:	24 30       	cpi	r18, 0x04	; 4
 ab2:	31 05       	cpc	r19, r1
 ab4:	80 f4       	brcc	.+32     	; 0xad6 <malloc+0xa0>
 ab6:	8a 81       	ldd	r24, Y+2	; 0x02
 ab8:	9b 81       	ldd	r25, Y+3	; 0x03
 aba:	61 15       	cp	r22, r1
 abc:	71 05       	cpc	r23, r1
 abe:	21 f0       	breq	.+8      	; 0xac8 <malloc+0x92>
 ac0:	fb 01       	movw	r30, r22
 ac2:	93 83       	std	Z+3, r25	; 0x03
 ac4:	82 83       	std	Z+2, r24	; 0x02
 ac6:	04 c0       	rjmp	.+8      	; 0xad0 <malloc+0x9a>
 ac8:	90 93 9b 01 	sts	0x019B, r25
 acc:	80 93 9a 01 	sts	0x019A, r24
 ad0:	fe 01       	movw	r30, r28
 ad2:	32 96       	adiw	r30, 0x02	; 2
 ad4:	44 c0       	rjmp	.+136    	; 0xb5e <malloc+0x128>
 ad6:	fe 01       	movw	r30, r28
 ad8:	e2 0f       	add	r30, r18
 ada:	f3 1f       	adc	r31, r19
 adc:	81 93       	st	Z+, r24
 ade:	91 93       	st	Z+, r25
 ae0:	22 50       	subi	r18, 0x02	; 2
 ae2:	31 09       	sbc	r19, r1
 ae4:	39 83       	std	Y+1, r19	; 0x01
 ae6:	28 83       	st	Y, r18
 ae8:	3a c0       	rjmp	.+116    	; 0xb5e <malloc+0x128>
 aea:	20 91 98 01 	lds	r18, 0x0198
 aee:	30 91 99 01 	lds	r19, 0x0199
 af2:	23 2b       	or	r18, r19
 af4:	41 f4       	brne	.+16     	; 0xb06 <malloc+0xd0>
 af6:	20 91 02 01 	lds	r18, 0x0102
 afa:	30 91 03 01 	lds	r19, 0x0103
 afe:	30 93 99 01 	sts	0x0199, r19
 b02:	20 93 98 01 	sts	0x0198, r18
 b06:	20 91 00 01 	lds	r18, 0x0100
 b0a:	30 91 01 01 	lds	r19, 0x0101
 b0e:	21 15       	cp	r18, r1
 b10:	31 05       	cpc	r19, r1
 b12:	41 f4       	brne	.+16     	; 0xb24 <malloc+0xee>
 b14:	2d b7       	in	r18, 0x3d	; 61
 b16:	3e b7       	in	r19, 0x3e	; 62
 b18:	40 91 04 01 	lds	r20, 0x0104
 b1c:	50 91 05 01 	lds	r21, 0x0105
 b20:	24 1b       	sub	r18, r20
 b22:	35 0b       	sbc	r19, r21
 b24:	e0 91 98 01 	lds	r30, 0x0198
 b28:	f0 91 99 01 	lds	r31, 0x0199
 b2c:	e2 17       	cp	r30, r18
 b2e:	f3 07       	cpc	r31, r19
 b30:	a0 f4       	brcc	.+40     	; 0xb5a <malloc+0x124>
 b32:	2e 1b       	sub	r18, r30
 b34:	3f 0b       	sbc	r19, r31
 b36:	28 17       	cp	r18, r24
 b38:	39 07       	cpc	r19, r25
 b3a:	78 f0       	brcs	.+30     	; 0xb5a <malloc+0x124>
 b3c:	ac 01       	movw	r20, r24
 b3e:	4e 5f       	subi	r20, 0xFE	; 254
 b40:	5f 4f       	sbci	r21, 0xFF	; 255
 b42:	24 17       	cp	r18, r20
 b44:	35 07       	cpc	r19, r21
 b46:	48 f0       	brcs	.+18     	; 0xb5a <malloc+0x124>
 b48:	4e 0f       	add	r20, r30
 b4a:	5f 1f       	adc	r21, r31
 b4c:	50 93 99 01 	sts	0x0199, r21
 b50:	40 93 98 01 	sts	0x0198, r20
 b54:	81 93       	st	Z+, r24
 b56:	91 93       	st	Z+, r25
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <malloc+0x128>
 b5a:	e0 e0       	ldi	r30, 0x00	; 0
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	cf 01       	movw	r24, r30
 b60:	df 91       	pop	r29
 b62:	cf 91       	pop	r28
 b64:	08 95       	ret

00000b66 <free>:
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	00 97       	sbiw	r24, 0x00	; 0
 b6c:	09 f4       	brne	.+2      	; 0xb70 <free+0xa>
 b6e:	87 c0       	rjmp	.+270    	; 0xc7e <free+0x118>
 b70:	fc 01       	movw	r30, r24
 b72:	32 97       	sbiw	r30, 0x02	; 2
 b74:	13 82       	std	Z+3, r1	; 0x03
 b76:	12 82       	std	Z+2, r1	; 0x02
 b78:	c0 91 9a 01 	lds	r28, 0x019A
 b7c:	d0 91 9b 01 	lds	r29, 0x019B
 b80:	20 97       	sbiw	r28, 0x00	; 0
 b82:	81 f4       	brne	.+32     	; 0xba4 <free+0x3e>
 b84:	20 81       	ld	r18, Z
 b86:	31 81       	ldd	r19, Z+1	; 0x01
 b88:	28 0f       	add	r18, r24
 b8a:	39 1f       	adc	r19, r25
 b8c:	80 91 98 01 	lds	r24, 0x0198
 b90:	90 91 99 01 	lds	r25, 0x0199
 b94:	82 17       	cp	r24, r18
 b96:	93 07       	cpc	r25, r19
 b98:	79 f5       	brne	.+94     	; 0xbf8 <free+0x92>
 b9a:	f0 93 99 01 	sts	0x0199, r31
 b9e:	e0 93 98 01 	sts	0x0198, r30
 ba2:	6d c0       	rjmp	.+218    	; 0xc7e <free+0x118>
 ba4:	de 01       	movw	r26, r28
 ba6:	20 e0       	ldi	r18, 0x00	; 0
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	ae 17       	cp	r26, r30
 bac:	bf 07       	cpc	r27, r31
 bae:	50 f4       	brcc	.+20     	; 0xbc4 <free+0x5e>
 bb0:	12 96       	adiw	r26, 0x02	; 2
 bb2:	4d 91       	ld	r20, X+
 bb4:	5c 91       	ld	r21, X
 bb6:	13 97       	sbiw	r26, 0x03	; 3
 bb8:	9d 01       	movw	r18, r26
 bba:	41 15       	cp	r20, r1
 bbc:	51 05       	cpc	r21, r1
 bbe:	09 f1       	breq	.+66     	; 0xc02 <free+0x9c>
 bc0:	da 01       	movw	r26, r20
 bc2:	f3 cf       	rjmp	.-26     	; 0xbaa <free+0x44>
 bc4:	b3 83       	std	Z+3, r27	; 0x03
 bc6:	a2 83       	std	Z+2, r26	; 0x02
 bc8:	40 81       	ld	r20, Z
 bca:	51 81       	ldd	r21, Z+1	; 0x01
 bcc:	84 0f       	add	r24, r20
 bce:	95 1f       	adc	r25, r21
 bd0:	8a 17       	cp	r24, r26
 bd2:	9b 07       	cpc	r25, r27
 bd4:	71 f4       	brne	.+28     	; 0xbf2 <free+0x8c>
 bd6:	8d 91       	ld	r24, X+
 bd8:	9c 91       	ld	r25, X
 bda:	11 97       	sbiw	r26, 0x01	; 1
 bdc:	84 0f       	add	r24, r20
 bde:	95 1f       	adc	r25, r21
 be0:	02 96       	adiw	r24, 0x02	; 2
 be2:	91 83       	std	Z+1, r25	; 0x01
 be4:	80 83       	st	Z, r24
 be6:	12 96       	adiw	r26, 0x02	; 2
 be8:	8d 91       	ld	r24, X+
 bea:	9c 91       	ld	r25, X
 bec:	13 97       	sbiw	r26, 0x03	; 3
 bee:	93 83       	std	Z+3, r25	; 0x03
 bf0:	82 83       	std	Z+2, r24	; 0x02
 bf2:	21 15       	cp	r18, r1
 bf4:	31 05       	cpc	r19, r1
 bf6:	29 f4       	brne	.+10     	; 0xc02 <free+0x9c>
 bf8:	f0 93 9b 01 	sts	0x019B, r31
 bfc:	e0 93 9a 01 	sts	0x019A, r30
 c00:	3e c0       	rjmp	.+124    	; 0xc7e <free+0x118>
 c02:	d9 01       	movw	r26, r18
 c04:	13 96       	adiw	r26, 0x03	; 3
 c06:	fc 93       	st	X, r31
 c08:	ee 93       	st	-X, r30
 c0a:	12 97       	sbiw	r26, 0x02	; 2
 c0c:	4d 91       	ld	r20, X+
 c0e:	5d 91       	ld	r21, X+
 c10:	a4 0f       	add	r26, r20
 c12:	b5 1f       	adc	r27, r21
 c14:	ea 17       	cp	r30, r26
 c16:	fb 07       	cpc	r31, r27
 c18:	79 f4       	brne	.+30     	; 0xc38 <free+0xd2>
 c1a:	80 81       	ld	r24, Z
 c1c:	91 81       	ldd	r25, Z+1	; 0x01
 c1e:	84 0f       	add	r24, r20
 c20:	95 1f       	adc	r25, r21
 c22:	02 96       	adiw	r24, 0x02	; 2
 c24:	d9 01       	movw	r26, r18
 c26:	11 96       	adiw	r26, 0x01	; 1
 c28:	9c 93       	st	X, r25
 c2a:	8e 93       	st	-X, r24
 c2c:	82 81       	ldd	r24, Z+2	; 0x02
 c2e:	93 81       	ldd	r25, Z+3	; 0x03
 c30:	13 96       	adiw	r26, 0x03	; 3
 c32:	9c 93       	st	X, r25
 c34:	8e 93       	st	-X, r24
 c36:	12 97       	sbiw	r26, 0x02	; 2
 c38:	e0 e0       	ldi	r30, 0x00	; 0
 c3a:	f0 e0       	ldi	r31, 0x00	; 0
 c3c:	8a 81       	ldd	r24, Y+2	; 0x02
 c3e:	9b 81       	ldd	r25, Y+3	; 0x03
 c40:	00 97       	sbiw	r24, 0x00	; 0
 c42:	19 f0       	breq	.+6      	; 0xc4a <free+0xe4>
 c44:	fe 01       	movw	r30, r28
 c46:	ec 01       	movw	r28, r24
 c48:	f9 cf       	rjmp	.-14     	; 0xc3c <free+0xd6>
 c4a:	ce 01       	movw	r24, r28
 c4c:	02 96       	adiw	r24, 0x02	; 2
 c4e:	28 81       	ld	r18, Y
 c50:	39 81       	ldd	r19, Y+1	; 0x01
 c52:	82 0f       	add	r24, r18
 c54:	93 1f       	adc	r25, r19
 c56:	20 91 98 01 	lds	r18, 0x0198
 c5a:	30 91 99 01 	lds	r19, 0x0199
 c5e:	28 17       	cp	r18, r24
 c60:	39 07       	cpc	r19, r25
 c62:	69 f4       	brne	.+26     	; 0xc7e <free+0x118>
 c64:	30 97       	sbiw	r30, 0x00	; 0
 c66:	29 f4       	brne	.+10     	; 0xc72 <free+0x10c>
 c68:	10 92 9b 01 	sts	0x019B, r1
 c6c:	10 92 9a 01 	sts	0x019A, r1
 c70:	02 c0       	rjmp	.+4      	; 0xc76 <free+0x110>
 c72:	13 82       	std	Z+3, r1	; 0x03
 c74:	12 82       	std	Z+2, r1	; 0x02
 c76:	d0 93 99 01 	sts	0x0199, r29
 c7a:	c0 93 98 01 	sts	0x0198, r28
 c7e:	df 91       	pop	r29
 c80:	cf 91       	pop	r28
 c82:	08 95       	ret

00000c84 <strnlen_P>:
 c84:	fc 01       	movw	r30, r24
 c86:	05 90       	lpm	r0, Z+
 c88:	61 50       	subi	r22, 0x01	; 1
 c8a:	70 40       	sbci	r23, 0x00	; 0
 c8c:	01 10       	cpse	r0, r1
 c8e:	d8 f7       	brcc	.-10     	; 0xc86 <strnlen_P+0x2>
 c90:	80 95       	com	r24
 c92:	90 95       	com	r25
 c94:	8e 0f       	add	r24, r30
 c96:	9f 1f       	adc	r25, r31
 c98:	08 95       	ret

00000c9a <memset>:
 c9a:	dc 01       	movw	r26, r24
 c9c:	01 c0       	rjmp	.+2      	; 0xca0 <memset+0x6>
 c9e:	6d 93       	st	X+, r22
 ca0:	41 50       	subi	r20, 0x01	; 1
 ca2:	50 40       	sbci	r21, 0x00	; 0
 ca4:	e0 f7       	brcc	.-8      	; 0xc9e <memset+0x4>
 ca6:	08 95       	ret

00000ca8 <strnlen>:
 ca8:	fc 01       	movw	r30, r24
 caa:	61 50       	subi	r22, 0x01	; 1
 cac:	70 40       	sbci	r23, 0x00	; 0
 cae:	01 90       	ld	r0, Z+
 cb0:	01 10       	cpse	r0, r1
 cb2:	d8 f7       	brcc	.-10     	; 0xcaa <strnlen+0x2>
 cb4:	80 95       	com	r24
 cb6:	90 95       	com	r25
 cb8:	8e 0f       	add	r24, r30
 cba:	9f 1f       	adc	r25, r31
 cbc:	08 95       	ret

00000cbe <fputc>:
 cbe:	0f 93       	push	r16
 cc0:	1f 93       	push	r17
 cc2:	cf 93       	push	r28
 cc4:	df 93       	push	r29
 cc6:	18 2f       	mov	r17, r24
 cc8:	09 2f       	mov	r16, r25
 cca:	eb 01       	movw	r28, r22
 ccc:	8b 81       	ldd	r24, Y+3	; 0x03
 cce:	81 fd       	sbrc	r24, 1
 cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <fputc+0x1a>
 cd2:	8f ef       	ldi	r24, 0xFF	; 255
 cd4:	9f ef       	ldi	r25, 0xFF	; 255
 cd6:	20 c0       	rjmp	.+64     	; 0xd18 <fputc+0x5a>
 cd8:	82 ff       	sbrs	r24, 2
 cda:	10 c0       	rjmp	.+32     	; 0xcfc <fputc+0x3e>
 cdc:	4e 81       	ldd	r20, Y+6	; 0x06
 cde:	5f 81       	ldd	r21, Y+7	; 0x07
 ce0:	2c 81       	ldd	r18, Y+4	; 0x04
 ce2:	3d 81       	ldd	r19, Y+5	; 0x05
 ce4:	42 17       	cp	r20, r18
 ce6:	53 07       	cpc	r21, r19
 ce8:	7c f4       	brge	.+30     	; 0xd08 <fputc+0x4a>
 cea:	e8 81       	ld	r30, Y
 cec:	f9 81       	ldd	r31, Y+1	; 0x01
 cee:	9f 01       	movw	r18, r30
 cf0:	2f 5f       	subi	r18, 0xFF	; 255
 cf2:	3f 4f       	sbci	r19, 0xFF	; 255
 cf4:	39 83       	std	Y+1, r19	; 0x01
 cf6:	28 83       	st	Y, r18
 cf8:	10 83       	st	Z, r17
 cfa:	06 c0       	rjmp	.+12     	; 0xd08 <fputc+0x4a>
 cfc:	e8 85       	ldd	r30, Y+8	; 0x08
 cfe:	f9 85       	ldd	r31, Y+9	; 0x09
 d00:	81 2f       	mov	r24, r17
 d02:	09 95       	icall
 d04:	89 2b       	or	r24, r25
 d06:	29 f7       	brne	.-54     	; 0xcd2 <fputc+0x14>
 d08:	2e 81       	ldd	r18, Y+6	; 0x06
 d0a:	3f 81       	ldd	r19, Y+7	; 0x07
 d0c:	2f 5f       	subi	r18, 0xFF	; 255
 d0e:	3f 4f       	sbci	r19, 0xFF	; 255
 d10:	3f 83       	std	Y+7, r19	; 0x07
 d12:	2e 83       	std	Y+6, r18	; 0x06
 d14:	81 2f       	mov	r24, r17
 d16:	90 2f       	mov	r25, r16
 d18:	df 91       	pop	r29
 d1a:	cf 91       	pop	r28
 d1c:	1f 91       	pop	r17
 d1e:	0f 91       	pop	r16
 d20:	08 95       	ret

00000d22 <__ultoa_invert>:
 d22:	fa 01       	movw	r30, r20
 d24:	aa 27       	eor	r26, r26
 d26:	28 30       	cpi	r18, 0x08	; 8
 d28:	51 f1       	breq	.+84     	; 0xd7e <__ultoa_invert+0x5c>
 d2a:	20 31       	cpi	r18, 0x10	; 16
 d2c:	81 f1       	breq	.+96     	; 0xd8e <__ultoa_invert+0x6c>
 d2e:	e8 94       	clt
 d30:	6f 93       	push	r22
 d32:	6e 7f       	andi	r22, 0xFE	; 254
 d34:	6e 5f       	subi	r22, 0xFE	; 254
 d36:	7f 4f       	sbci	r23, 0xFF	; 255
 d38:	8f 4f       	sbci	r24, 0xFF	; 255
 d3a:	9f 4f       	sbci	r25, 0xFF	; 255
 d3c:	af 4f       	sbci	r26, 0xFF	; 255
 d3e:	b1 e0       	ldi	r27, 0x01	; 1
 d40:	3e d0       	rcall	.+124    	; 0xdbe <__ultoa_invert+0x9c>
 d42:	b4 e0       	ldi	r27, 0x04	; 4
 d44:	3c d0       	rcall	.+120    	; 0xdbe <__ultoa_invert+0x9c>
 d46:	67 0f       	add	r22, r23
 d48:	78 1f       	adc	r23, r24
 d4a:	89 1f       	adc	r24, r25
 d4c:	9a 1f       	adc	r25, r26
 d4e:	a1 1d       	adc	r26, r1
 d50:	68 0f       	add	r22, r24
 d52:	79 1f       	adc	r23, r25
 d54:	8a 1f       	adc	r24, r26
 d56:	91 1d       	adc	r25, r1
 d58:	a1 1d       	adc	r26, r1
 d5a:	6a 0f       	add	r22, r26
 d5c:	71 1d       	adc	r23, r1
 d5e:	81 1d       	adc	r24, r1
 d60:	91 1d       	adc	r25, r1
 d62:	a1 1d       	adc	r26, r1
 d64:	20 d0       	rcall	.+64     	; 0xda6 <__ultoa_invert+0x84>
 d66:	09 f4       	brne	.+2      	; 0xd6a <__ultoa_invert+0x48>
 d68:	68 94       	set
 d6a:	3f 91       	pop	r19
 d6c:	2a e0       	ldi	r18, 0x0A	; 10
 d6e:	26 9f       	mul	r18, r22
 d70:	11 24       	eor	r1, r1
 d72:	30 19       	sub	r19, r0
 d74:	30 5d       	subi	r19, 0xD0	; 208
 d76:	31 93       	st	Z+, r19
 d78:	de f6       	brtc	.-74     	; 0xd30 <__ultoa_invert+0xe>
 d7a:	cf 01       	movw	r24, r30
 d7c:	08 95       	ret
 d7e:	46 2f       	mov	r20, r22
 d80:	47 70       	andi	r20, 0x07	; 7
 d82:	40 5d       	subi	r20, 0xD0	; 208
 d84:	41 93       	st	Z+, r20
 d86:	b3 e0       	ldi	r27, 0x03	; 3
 d88:	0f d0       	rcall	.+30     	; 0xda8 <__ultoa_invert+0x86>
 d8a:	c9 f7       	brne	.-14     	; 0xd7e <__ultoa_invert+0x5c>
 d8c:	f6 cf       	rjmp	.-20     	; 0xd7a <__ultoa_invert+0x58>
 d8e:	46 2f       	mov	r20, r22
 d90:	4f 70       	andi	r20, 0x0F	; 15
 d92:	40 5d       	subi	r20, 0xD0	; 208
 d94:	4a 33       	cpi	r20, 0x3A	; 58
 d96:	18 f0       	brcs	.+6      	; 0xd9e <__ultoa_invert+0x7c>
 d98:	49 5d       	subi	r20, 0xD9	; 217
 d9a:	31 fd       	sbrc	r19, 1
 d9c:	40 52       	subi	r20, 0x20	; 32
 d9e:	41 93       	st	Z+, r20
 da0:	02 d0       	rcall	.+4      	; 0xda6 <__ultoa_invert+0x84>
 da2:	a9 f7       	brne	.-22     	; 0xd8e <__ultoa_invert+0x6c>
 da4:	ea cf       	rjmp	.-44     	; 0xd7a <__ultoa_invert+0x58>
 da6:	b4 e0       	ldi	r27, 0x04	; 4
 da8:	a6 95       	lsr	r26
 daa:	97 95       	ror	r25
 dac:	87 95       	ror	r24
 dae:	77 95       	ror	r23
 db0:	67 95       	ror	r22
 db2:	ba 95       	dec	r27
 db4:	c9 f7       	brne	.-14     	; 0xda8 <__ultoa_invert+0x86>
 db6:	00 97       	sbiw	r24, 0x00	; 0
 db8:	61 05       	cpc	r22, r1
 dba:	71 05       	cpc	r23, r1
 dbc:	08 95       	ret
 dbe:	9b 01       	movw	r18, r22
 dc0:	ac 01       	movw	r20, r24
 dc2:	0a 2e       	mov	r0, r26
 dc4:	06 94       	lsr	r0
 dc6:	57 95       	ror	r21
 dc8:	47 95       	ror	r20
 dca:	37 95       	ror	r19
 dcc:	27 95       	ror	r18
 dce:	ba 95       	dec	r27
 dd0:	c9 f7       	brne	.-14     	; 0xdc4 <__ultoa_invert+0xa2>
 dd2:	62 0f       	add	r22, r18
 dd4:	73 1f       	adc	r23, r19
 dd6:	84 1f       	adc	r24, r20
 dd8:	95 1f       	adc	r25, r21
 dda:	a0 1d       	adc	r26, r0
 ddc:	08 95       	ret

00000dde <__prologue_saves__>:
 dde:	2f 92       	push	r2
 de0:	3f 92       	push	r3
 de2:	4f 92       	push	r4
 de4:	5f 92       	push	r5
 de6:	6f 92       	push	r6
 de8:	7f 92       	push	r7
 dea:	8f 92       	push	r8
 dec:	9f 92       	push	r9
 dee:	af 92       	push	r10
 df0:	bf 92       	push	r11
 df2:	cf 92       	push	r12
 df4:	df 92       	push	r13
 df6:	ef 92       	push	r14
 df8:	ff 92       	push	r15
 dfa:	0f 93       	push	r16
 dfc:	1f 93       	push	r17
 dfe:	cf 93       	push	r28
 e00:	df 93       	push	r29
 e02:	cd b7       	in	r28, 0x3d	; 61
 e04:	de b7       	in	r29, 0x3e	; 62
 e06:	ca 1b       	sub	r28, r26
 e08:	db 0b       	sbc	r29, r27
 e0a:	0f b6       	in	r0, 0x3f	; 63
 e0c:	f8 94       	cli
 e0e:	de bf       	out	0x3e, r29	; 62
 e10:	0f be       	out	0x3f, r0	; 63
 e12:	cd bf       	out	0x3d, r28	; 61
 e14:	09 94       	ijmp

00000e16 <__epilogue_restores__>:
 e16:	2a 88       	ldd	r2, Y+18	; 0x12
 e18:	39 88       	ldd	r3, Y+17	; 0x11
 e1a:	48 88       	ldd	r4, Y+16	; 0x10
 e1c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e1e:	6e 84       	ldd	r6, Y+14	; 0x0e
 e20:	7d 84       	ldd	r7, Y+13	; 0x0d
 e22:	8c 84       	ldd	r8, Y+12	; 0x0c
 e24:	9b 84       	ldd	r9, Y+11	; 0x0b
 e26:	aa 84       	ldd	r10, Y+10	; 0x0a
 e28:	b9 84       	ldd	r11, Y+9	; 0x09
 e2a:	c8 84       	ldd	r12, Y+8	; 0x08
 e2c:	df 80       	ldd	r13, Y+7	; 0x07
 e2e:	ee 80       	ldd	r14, Y+6	; 0x06
 e30:	fd 80       	ldd	r15, Y+5	; 0x05
 e32:	0c 81       	ldd	r16, Y+4	; 0x04
 e34:	1b 81       	ldd	r17, Y+3	; 0x03
 e36:	aa 81       	ldd	r26, Y+2	; 0x02
 e38:	b9 81       	ldd	r27, Y+1	; 0x01
 e3a:	ce 0f       	add	r28, r30
 e3c:	d1 1d       	adc	r29, r1
 e3e:	0f b6       	in	r0, 0x3f	; 63
 e40:	f8 94       	cli
 e42:	de bf       	out	0x3e, r29	; 62
 e44:	0f be       	out	0x3f, r0	; 63
 e46:	cd bf       	out	0x3d, r28	; 61
 e48:	ed 01       	movw	r28, r26
 e4a:	08 95       	ret

00000e4c <_exit>:
 e4c:	f8 94       	cli

00000e4e <__stop_program>:
 e4e:	ff cf       	rjmp	.-2      	; 0xe4e <__stop_program>
