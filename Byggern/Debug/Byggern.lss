
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00000f40  00000fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800178  00800178  0000104c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000219f  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cb7  00000000  00000000  00003437  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c4d  00000000  00000000  000040ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a8  00000000  00000000  00004d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fa  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011a5  00000000  00000000  000056de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  00006883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e4       	ldi	r30, 0x40	; 64
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 37       	cpi	r26, 0x78	; 120
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e7       	ldi	r26, 0x78	; 120
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 38       	cpi	r26, 0x82	; 130
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:



void ADC_init()
{	
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <main>:
#include "MCP2515.h"
#include "CAN.h"


int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	a8 97       	sbiw	r28, 0x28	; 40
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
	DDRD  = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	
	UartInit();
  d4:	0e 94 04 03 	call	0x608	; 0x608 <UartInit>
	SRAM_init();
  d8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <SRAM_init>
	ADC_init();
  dc:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	init_OLED();
  e0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <init_OLED>
	CAN_init();
  e4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CAN_init>

	calibrate();
	OLED_Reset();*/
	
	// Enable Global Interrupts
	sei();
  e8:	78 94       	sei
	// CAN test

			
			CAN_message myMessage;				//test message
			int ident = 29;
			myMessage.id = ident;
  ea:	8d e1       	ldi	r24, 0x1D	; 29
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
			myMessage.length = 8;
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9c 83       	std	Y+4, r25	; 0x04
  f8:	8b 83       	std	Y+3, r24	; 0x03
			int n = 3;
			for (int i = 0; i < 8; i++) 
			{
				myMessage.data[i] = n;
  fa:	23 e0       	ldi	r18, 0x03	; 3
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	3e 83       	std	Y+6, r19	; 0x06
 100:	2d 83       	std	Y+5, r18	; 0x05
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	38 87       	std	Y+8, r19	; 0x08
 108:	2f 83       	std	Y+7, r18	; 0x07
 10a:	25 e0       	ldi	r18, 0x05	; 5
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	3a 87       	std	Y+10, r19	; 0x0a
 110:	29 87       	std	Y+9, r18	; 0x09
 112:	26 e0       	ldi	r18, 0x06	; 6
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	3c 87       	std	Y+12, r19	; 0x0c
 118:	2b 87       	std	Y+11, r18	; 0x0b
 11a:	27 e0       	ldi	r18, 0x07	; 7
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	3e 87       	std	Y+14, r19	; 0x0e
 120:	2d 87       	std	Y+13, r18	; 0x0d
 122:	98 8b       	std	Y+16, r25	; 0x10
 124:	8f 87       	std	Y+15, r24	; 0x0f
 126:	89 e0       	ldi	r24, 0x09	; 9
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	9a 8b       	std	Y+18, r25	; 0x12
 12c:	89 8b       	std	Y+17, r24	; 0x11
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9c 8b       	std	Y+20, r25	; 0x14
 134:	8b 8b       	std	Y+19, r24	; 0x13
				n++;
			}
	printf("Start på program\n");
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <puts>


			CAN_send(&myMessage);
			CAN_read2(&h);
				//h.id=h.data[0];
				printf("h id = %d "  ,h.id  );
 13e:	0f 2e       	mov	r0, r31
 140:	f9 e1       	ldi	r31, 0x19	; 25
 142:	af 2e       	mov	r10, r31
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	bf 2e       	mov	r11, r31
 148:	f0 2d       	mov	r31, r0
				printf("h length = %d "  , h.length  );
 14a:	0f 2e       	mov	r0, r31
 14c:	f4 e2       	ldi	r31, 0x24	; 36
 14e:	cf 2e       	mov	r12, r31
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	df 2e       	mov	r13, r31
 154:	f0 2d       	mov	r31, r0
				printf("h= ");
 156:	0f 2e       	mov	r0, r31
 158:	f3 e3       	ldi	r31, 0x33	; 51
 15a:	ef 2e       	mov	r14, r31
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	ff 2e       	mov	r15, r31
 160:	f0 2d       	mov	r31, r0
			if (h.id == ident)
			{
				for (int i =0; i<8; i++)
				{
					printf("%d, ",h.data[i]);
 162:	0f 2e       	mov	r0, r31
 164:	f7 e3       	ldi	r31, 0x37	; 55
 166:	6f 2e       	mov	r6, r31
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	7f 2e       	mov	r7, r31
 16c:	f0 2d       	mov	r31, r0
		OLED_menu();
					 chip de-select*/



			CAN_send(&myMessage);
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	0e 94 11 01 	call	0x222	; 0x222 <CAN_send>
			CAN_read2(&h);
 176:	ce 01       	movw	r24, r28
 178:	45 96       	adiw	r24, 0x15	; 21
 17a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CAN_read2>
				//h.id=h.data[0];
				printf("h id = %d "  ,h.id  );
 17e:	8e 89       	ldd	r24, Y+22	; 0x16
 180:	8f 93       	push	r24
 182:	8d 89       	ldd	r24, Y+21	; 0x15
 184:	8f 93       	push	r24
 186:	bf 92       	push	r11
 188:	af 92       	push	r10
 18a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <printf>
				printf("h length = %d "  , h.length  );
 18e:	88 8d       	ldd	r24, Y+24	; 0x18
 190:	8f 93       	push	r24
 192:	8f 89       	ldd	r24, Y+23	; 0x17
 194:	8f 93       	push	r24
 196:	df 92       	push	r13
 198:	cf 92       	push	r12
 19a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <printf>
				printf("h= ");
 19e:	ff 92       	push	r15
 1a0:	ef 92       	push	r14
 1a2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <printf>
			if (h.id == ident)
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	8d 89       	ldd	r24, Y+21	; 0x15
 1b2:	9e 89       	ldd	r25, Y+22	; 0x16
 1b4:	4d 97       	sbiw	r24, 0x1d	; 29
 1b6:	d9 f6       	brne	.-74     	; 0x16e <main+0xb2>
 1b8:	8e 01       	movw	r16, r28
 1ba:	07 5e       	subi	r16, 0xE7	; 231
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	4e 01       	movw	r8, r28
 1c0:	99 e2       	ldi	r25, 0x29	; 41
 1c2:	89 0e       	add	r8, r25
 1c4:	91 1c       	adc	r9, r1
			{
				for (int i =0; i<8; i++)
				{
					printf("%d, ",h.data[i]);
 1c6:	f8 01       	movw	r30, r16
 1c8:	80 81       	ld	r24, Z
 1ca:	91 81       	ldd	r25, Z+1	; 0x01
 1cc:	0e 5f       	subi	r16, 0xFE	; 254
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 1d0:	9f 93       	push	r25
 1d2:	8f 93       	push	r24
 1d4:	7f 92       	push	r7
 1d6:	6f 92       	push	r6
 1d8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <printf>
				printf("h id = %d "  ,h.id  );
				printf("h length = %d "  , h.length  );
				printf("h= ");
			if (h.id == ident)
			{
				for (int i =0; i<8; i++)
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	08 15       	cp	r16, r8
 1e6:	19 05       	cpc	r17, r9
 1e8:	71 f7       	brne	.-36     	; 0x1c6 <main+0x10a>
				{
					printf("%d, ",h.data[i]);
				}
				printf("\n");
 1ea:	8a e0       	ldi	r24, 0x0A	; 10
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <putchar>
 1f2:	bd cf       	rjmp	.-134    	; 0x16e <main+0xb2>

000001f4 <CAN_init>:
unsigned char rxflag = 0;									// Interrupt flag variable


void CAN_init()
{
	MCP_init();
 1f4:	0e 94 4c 02 	call	0x498	; 0x498 <MCP_init>
	MCP_bitmod(MCP_CANINTE, 0x0F, 0x01);					// Sets interrupt receive-register 
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	6f e0       	ldi	r22, 0x0F	; 15
 1fc:	8b e2       	ldi	r24, 0x2B	; 43
 1fe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <MCP_bitmod>
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);		// Setting MCP to loop-back mode MODE_MASK
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	60 ee       	ldi	r22, 0xE0	; 224
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	0e 94 e5 01 	call	0x3ca	; 0x3ca <MCP_bitmod>
 20c:	08 95       	ret

0000020e <Can_trans_compl>:
}


int Can_trans_compl()							// sjekker om TX buffer er ferdig med transmission (TXREQ = 0)
{
	uint8_t status = MCP_status();				// Saves MCP status in status
 20e:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCP_status>
	
	if (test_bit(status,3))						// Check status-register value against 3
 212:	86 95       	lsr	r24
 214:	86 95       	lsr	r24
 216:	86 95       	lsr	r24
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	89 27       	eor	r24, r25
	}	
	else
	{
		return 1;
	}
}
 21c:	81 70       	andi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	08 95       	ret

00000222 <CAN_send>:
	MCP_bitmod(MCP_CANINTE, 0x0F, 0x01);					// Sets interrupt receive-register 
	MCP_bitmod(MCP_CANCTRL,MODE_MASK,MODE_NORMAL);		// Setting MCP to loop-back mode MODE_MASK
}

void CAN_send(CAN_message * msg)
{
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24


	if (Can_trans_compl())									// Check registers are available 
 22a:	0e 94 07 01 	call	0x20e	; 0x20e <Can_trans_compl>
 22e:	89 2b       	or	r24, r25
 230:	09 f4       	brne	.+2      	; 0x234 <CAN_send+0x12>
 232:	51 c0       	rjmp	.+162    	; 0x2d6 <CAN_send+0xb4>
	{
		MCP_write(MCP_TXB0SIDH, msg->id >> 3);				// Write id to id handlig regiseter (standard identifier High)
 234:	68 81       	ld	r22, Y
 236:	79 81       	ldd	r23, Y+1	; 0x01
 238:	76 95       	lsr	r23
 23a:	67 95       	ror	r22
 23c:	76 95       	lsr	r23
 23e:	67 95       	ror	r22
 240:	76 95       	lsr	r23
 242:	67 95       	ror	r22
 244:	81 e3       	ldi	r24, 0x31	; 49
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 28 02 	call	0x450	; 0x450 <MCP_write>
		MCP_write(MCP_TXB0SIDL, msg->id << 5);				// Write id to Id handling register (3-3, standard identifier Low)
 24c:	68 81       	ld	r22, Y
 24e:	79 81       	ldd	r23, Y+1	; 0x01
 250:	66 0f       	add	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	62 95       	swap	r22
 256:	72 95       	swap	r23
 258:	70 7f       	andi	r23, 0xF0	; 240
 25a:	76 27       	eor	r23, r22
 25c:	60 7f       	andi	r22, 0xF0	; 240
 25e:	76 27       	eor	r23, r22
 260:	82 e3       	ldi	r24, 0x32	; 50
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 28 02 	call	0x450	; 0x450 <MCP_write>
		printf("%i \n",msg->id>>3);
 268:	88 81       	ld	r24, Y
 26a:	99 81       	ldd	r25, Y+1	; 0x01
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	9f 93       	push	r25
 27a:	8f 93       	push	r24
 27c:	8c e3       	ldi	r24, 0x3C	; 60
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	9f 93       	push	r25
 282:	8f 93       	push	r24
 284:	0e 94 5d 03 	call	0x6ba	; 0x6ba <printf>
		MCP_write(TXB0DLC, (msg->length));					// Write length to length handling register (3-7)
 288:	6a 81       	ldd	r22, Y+2	; 0x02
 28a:	7b 81       	ldd	r23, Y+3	; 0x03
 28c:	85 e3       	ldi	r24, 0x35	; 53
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 28 02 	call	0x450	; 0x450 <MCP_write>
		for(unsigned char i=0; i<msg->length;i++)
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	9b 81       	ldd	r25, Y+3	; 0x03
 2a0:	89 2b       	or	r24, r25
 2a2:	b1 f0       	breq	.+44     	; 0x2d0 <CAN_send+0xae>
 2a4:	10 e0       	ldi	r17, 0x00	; 0
		{
			MCP_write(TXB0D0+i,msg->data[i]);				// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
 2a6:	81 2f       	mov	r24, r17
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	32 96       	adiw	r30, 0x02	; 2
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	ec 0f       	add	r30, r28
 2b4:	fd 1f       	adc	r31, r29
 2b6:	60 81       	ld	r22, Z
 2b8:	71 81       	ldd	r23, Z+1	; 0x01
 2ba:	c6 96       	adiw	r24, 0x36	; 54
 2bc:	0e 94 28 02 	call	0x450	; 0x450 <MCP_write>
	{
		MCP_write(MCP_TXB0SIDH, msg->id >> 3);				// Write id to id handlig regiseter (standard identifier High)
		MCP_write(MCP_TXB0SIDL, msg->id << 5);				// Write id to Id handling register (3-3, standard identifier Low)
		printf("%i \n",msg->id>>3);
		MCP_write(TXB0DLC, (msg->length));					// Write length to length handling register (3-7)
		for(unsigned char i=0; i<msg->length;i++)
 2c0:	1f 5f       	subi	r17, 0xFF	; 255
 2c2:	21 2f       	mov	r18, r17
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	9b 81       	ldd	r25, Y+3	; 0x03
 2ca:	28 17       	cp	r18, r24
 2cc:	39 07       	cpc	r19, r25
 2ce:	58 f3       	brcs	.-42     	; 0x2a6 <CAN_send+0x84>
		{
			MCP_write(TXB0D0+i,msg->data[i]);				// Write data to the data handling register (3-8). iterate through TXBnDm (n.m =1,2,3...)
		}


		MCP_request();										// Request to send written message MCP_RTS_ALL
 2d0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <MCP_request>
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <CAN_send+0xbc>
	}
	else													// If message is not sent
	{
		printf("Sendte ikke\n");							// Print this
 2d6:	81 e4       	ldi	r24, 0x41	; 65
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 78 03 	call	0x6f0	; 0x6f0 <puts>
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <CAN_read2>:
	MCP_bitmod(MCP_CANINTF, 0x01, 0);		// Clearing flag
	rxflag = 1;
}

void CAN_read2(CAN_message * msg)														// Reads a CAN message
{
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	7c 01       	movw	r14, r24
	int i = 0;
	while (!(MCP_status() & 0x01))														// Wait if status not clear
 2f4:	0a c0       	rjmp	.+20     	; 0x30a <CAN_read2+0x24>
	{
		i++;
		printf("Venter på melding\n");
 2f6:	8d e4       	ldi	r24, 0x4D	; 77
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 78 03 	call	0x6f0	; 0x6f0 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	9f e2       	ldi	r25, 0x2F	; 47
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <CAN_read2+0x1c>
 306:	00 c0       	rjmp	.+0      	; 0x308 <CAN_read2+0x22>
 308:	00 00       	nop
}

void CAN_read2(CAN_message * msg)														// Reads a CAN message
{
	int i = 0;
	while (!(MCP_status() & 0x01))														// Wait if status not clear
 30a:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCP_status>
 30e:	80 ff       	sbrs	r24, 0
 310:	f2 cf       	rjmp	.-28     	; 0x2f6 <CAN_read2+0x10>
		printf("Venter på melding\n");
		_delay_ms(10);
	}
	if (1) // rxflag == 1
	{
		msg->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);		// Sets MSG ID = to what it reads on the registers 			
 312:	81 e6       	ldi	r24, 0x61	; 97
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 0c 02 	call	0x418	; 0x418 <MCP_read>
 31a:	ec 01       	movw	r28, r24
 31c:	82 e6       	ldi	r24, 0x62	; 98
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 0c 02 	call	0x418	; 0x418 <MCP_read>
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	92 95       	swap	r25
 32a:	82 95       	swap	r24
 32c:	8f 70       	andi	r24, 0x0F	; 15
 32e:	89 27       	eor	r24, r25
 330:	9f 70       	andi	r25, 0x0F	; 15
 332:	89 27       	eor	r24, r25
 334:	cc 0f       	add	r28, r28
 336:	dd 1f       	adc	r29, r29
 338:	cc 0f       	add	r28, r28
 33a:	dd 1f       	adc	r29, r29
 33c:	cc 0f       	add	r28, r28
 33e:	dd 1f       	adc	r29, r29
 340:	8c 2b       	or	r24, r28
 342:	9d 2b       	or	r25, r29
 344:	f7 01       	movw	r30, r14
 346:	91 83       	std	Z+1, r25	; 0x01
 348:	80 83       	st	Z, r24
		printf("s ID: %i\n",msg->id);													// Debug feature. Prints Recieved ID
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	8f e5       	ldi	r24, 0x5F	; 95
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
 356:	0e 94 5d 03 	call	0x6ba	; 0x6ba <printf>
		msg->length = MCP_read(MCP_RXB0DLC);											// Length is set to what is read on the register 
 35a:	85 e6       	ldi	r24, 0x65	; 101
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 0c 02 	call	0x418	; 0x418 <MCP_read>
 362:	f7 01       	movw	r30, r14
 364:	82 83       	std	Z+2, r24	; 0x02
 366:	93 83       	std	Z+3, r25	; 0x03
		printf("r length: %x\n",msg->length);											// Debug feature. Prints length 
 368:	9f 93       	push	r25
 36a:	8f 93       	push	r24
 36c:	89 e6       	ldi	r24, 0x69	; 105
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	9f 93       	push	r25
 372:	8f 93       	push	r24
 374:	0e 94 5d 03 	call	0x6ba	; 0x6ba <printf>
		for (int i = 0; i< msg->length; i++)
 378:	8d b7       	in	r24, 0x3d	; 61
 37a:	9e b7       	in	r25, 0x3e	; 62
 37c:	08 96       	adiw	r24, 0x08	; 8
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	9e bf       	out	0x3e, r25	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	8d bf       	out	0x3d, r24	; 61
 388:	f7 01       	movw	r30, r14
 38a:	82 81       	ldd	r24, Z+2	; 0x02
 38c:	93 81       	ldd	r25, Z+3	; 0x03
 38e:	89 2b       	or	r24, r25
 390:	a9 f0       	breq	.+42     	; 0x3bc <CAN_read2+0xd6>
 392:	87 01       	movw	r16, r14
 394:	0c 5f       	subi	r16, 0xFC	; 252
 396:	1f 4f       	sbci	r17, 0xFF	; 255
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			msg->data[i] = MCP_read(MCP_RXB0D0+i);										// Data is sett to what is read on registers
 39c:	ce 01       	movw	r24, r28
 39e:	8a 59       	subi	r24, 0x9A	; 154
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	0e 94 0c 02 	call	0x418	; 0x418 <MCP_read>
 3a6:	f8 01       	movw	r30, r16
 3a8:	81 93       	st	Z+, r24
 3aa:	91 93       	st	Z+, r25
 3ac:	8f 01       	movw	r16, r30
	{
		msg->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);		// Sets MSG ID = to what it reads on the registers 			
		printf("s ID: %i\n",msg->id);													// Debug feature. Prints Recieved ID
		msg->length = MCP_read(MCP_RXB0DLC);											// Length is set to what is read on the register 
		printf("r length: %x\n",msg->length);											// Debug feature. Prints length 
		for (int i = 0; i< msg->length; i++)
 3ae:	21 96       	adiw	r28, 0x01	; 1
 3b0:	f7 01       	movw	r30, r14
 3b2:	22 81       	ldd	r18, Z+2	; 0x02
 3b4:	33 81       	ldd	r19, Z+3	; 0x03
 3b6:	c2 17       	cp	r28, r18
 3b8:	d3 07       	cpc	r29, r19
 3ba:	80 f3       	brcs	.-32     	; 0x39c <CAN_read2+0xb6>
	else
	{
		msg->id = -1;																	// Error feature. Message not received
	}	

}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	08 95       	ret

000003ca <MCP_bitmod>:
}



void MCP_bitmod(unsigned char reg, unsigned char mask, unsigned char data)
{
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	18 2f       	mov	r17, r24
 3d2:	d6 2f       	mov	r29, r22
 3d4:	c4 2f       	mov	r28, r20
	PORTB &= ~(1<<PB4);					// Chip select
 3d6:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <MCP_bitmod+0x10>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <MCP_bitmod+0x12>
 3dc:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(MCP_BITMOD);			// send command "I want to modify bit"
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <MCP_bitmod+0x1c>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <MCP_bitmod+0x1e>
 3e8:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(reg);				// In what register do you want to operate
 3ea:	81 2f       	mov	r24, r17
 3ec:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <MCP_bitmod+0x28>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <MCP_bitmod+0x2a>
 3f4:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(mask);				// What bit mask do you want to change
 3f6:	8d 2f       	mov	r24, r29
 3f8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <MCP_bitmod+0x34>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <MCP_bitmod+0x36>
 400:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(data);				// What to you want to change to
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 408:	00 c0       	rjmp	.+0      	; 0x40a <MCP_bitmod+0x40>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <MCP_bitmod+0x42>
 40c:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);						// chip de-select
 40e:	c4 9a       	sbi	0x18, 4	; 24
	
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	08 95       	ret

00000418 <MCP_read>:
// Note that bitmod will change multiple bits unless one specifies which bit address to change. f.ex: bit = DLC3 & DLC2
// This will only change these two, but to use the function this way DLC3 and DCL2 must be defined first

unsigned int MCP_read(unsigned int address)
{
 418:	cf 93       	push	r28
 41a:	c8 2f       	mov	r28, r24
	unsigned int result;
	PORTB &= ~(1<<PB4);				// Selects can controller
 41c:	c4 98       	cbi	0x18, 4	; 24
 41e:	00 c0       	rjmp	.+0      	; 0x420 <MCP_read+0x8>
 420:	00 c0       	rjmp	.+0      	; 0x422 <MCP_read+0xa>
 422:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(MCP_READ);		// Send command "I want to read MCP
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <MCP_read+0x14>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <MCP_read+0x16>
 42e:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(address);		// Address we want to read
 430:	8c 2f       	mov	r24, r28
 432:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 436:	00 c0       	rjmp	.+0      	; 0x438 <MCP_read+0x20>
 438:	00 c0       	rjmp	.+0      	; 0x43a <MCP_read+0x22>
 43a:	00 00       	nop
	_delay_us(1);
	result = SPI_tranciever(0xFF);	// Save What we read in result
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 442:	00 c0       	rjmp	.+0      	; 0x444 <MCP_read+0x2c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <MCP_read+0x2e>
 446:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);					// De-selects can controller
 448:	c4 9a       	sbi	0x18, 4	; 24
	return result;					// Return what we read
}
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <MCP_write>:

void MCP_write(unsigned int address, unsigned int data)
{
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	d8 2f       	mov	r29, r24
 456:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PB4);	
 458:	c4 98       	cbi	0x18, 4	; 24
 45a:	00 c0       	rjmp	.+0      	; 0x45c <MCP_write+0xc>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <MCP_write+0xe>
 45e:	00 00       	nop
	_delay_us(1);				
	SPI_tranciever(MCP_WRITE);		// Send command "I want to write"
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 466:	00 c0       	rjmp	.+0      	; 0x468 <MCP_write+0x18>
 468:	00 c0       	rjmp	.+0      	; 0x46a <MCP_write+0x1a>
 46a:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(address);		// Where we want to write to
 46c:	8d 2f       	mov	r24, r29
 46e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 472:	00 c0       	rjmp	.+0      	; 0x474 <MCP_write+0x24>
 474:	00 c0       	rjmp	.+0      	; 0x476 <MCP_write+0x26>
 476:	00 00       	nop
	_delay_us(1);
	SPI_tranciever(data);			// What we want to write
 478:	8c 2f       	mov	r24, r28
 47a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <MCP_write+0x30>
 480:	00 c0       	rjmp	.+0      	; 0x482 <MCP_write+0x32>
 482:	00 00       	nop
	_delay_us(1);
	PORTB |=(1<<PB4);
 484:	c4 9a       	sbi	0x18, 4	; 24
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <MCP_reset>:

void MCP_reset()
{
	PORTB &= ~(1<<PB4);	
 48c:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RESET);		// Send command "I want to reset MCP"
 48e:	80 ec       	ldi	r24, 0xC0	; 192
 490:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
	PORTB |=(1<<PB4);
 494:	c4 9a       	sbi	0x18, 4	; 24
 496:	08 95       	ret

00000498 <MCP_init>:
#include <avr/io.h>
#include <avr/delay.h>
void MCP_init()
{
	// Makes sure registers are clean and MCP in control mode
	SPI_MasterInit();
 498:	0e 94 e7 02 	call	0x5ce	; 0x5ce <SPI_MasterInit>
	MCP_reset();
 49c:	0e 94 46 02 	call	0x48c	; 0x48c <MCP_reset>
 4a0:	08 95       	ret

000004a2 <MCP_request>:
	PORTB |=(1<<PB4);
}

void MCP_request()
{
	PORTB &= ~(1<<PB4);
 4a2:	c4 98       	cbi	0x18, 4	; 24
	SPI_tranciever(MCP_RTS_ALL);	// Send command "Request to send for all ports" (TX0, TX1 and TX2)
 4a4:	87 e8       	ldi	r24, 0x87	; 135
 4a6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
	PORTB |=(1<<PB4);
 4aa:	c4 9a       	sbi	0x18, 4	; 24
 4ac:	08 95       	ret

000004ae <MCP_status>:
}

unsigned char MCP_status()
{
	PORTB &= ~(1<<PB4);
 4ae:	c4 98       	cbi	0x18, 4	; 24
	unsigned char value  = SPI_tranciever(MCP_READ_STATUS);				// Send command "I want to read status"
 4b0:	80 ea       	ldi	r24, 0xA0	; 160
 4b2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <SPI_tranciever>
																		// Save returned value for SPI_ tranciever
	PORTB |=(1<<PB4);	
 4b6:	c4 9a       	sbi	0x18, 4	; 24
	return value;														// Return saved variabel 
}
 4b8:	08 95       	ret

000004ba <init_OLED>:
volatile char *write_d = (char *) 0x1200; 
char Name[3];

void init_OLED()
{
	MCUCR |= (1<<SRE);
 4ba:	85 b7       	in	r24, 0x35	; 53
 4bc:	80 68       	ori	r24, 0x80	; 128
 4be:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 4c0:	80 b7       	in	r24, 0x30	; 48
 4c2:	80 62       	ori	r24, 0x20	; 32
 4c4:	80 bf       	out	0x30, r24	; 48
	*write_c = (0xae);        //  display  off
 4c6:	e0 91 06 01 	lds	r30, 0x0106
 4ca:	f0 91 07 01 	lds	r31, 0x0107
 4ce:	8e ea       	ldi	r24, 0xAE	; 174
 4d0:	80 83       	st	Z, r24
	*write_c = (0xa1);        //segment  remap
 4d2:	e0 91 06 01 	lds	r30, 0x0106
 4d6:	f0 91 07 01 	lds	r31, 0x0107
 4da:	81 ea       	ldi	r24, 0xA1	; 161
 4dc:	80 83       	st	Z, r24
	*write_c = (0xda);        //common  pads  hardware:  alternative
 4de:	e0 91 06 01 	lds	r30, 0x0106
 4e2:	f0 91 07 01 	lds	r31, 0x0107
 4e6:	8a ed       	ldi	r24, 0xDA	; 218
 4e8:	80 83       	st	Z, r24
	*write_c = (0x12);
 4ea:	e0 91 06 01 	lds	r30, 0x0106
 4ee:	f0 91 07 01 	lds	r31, 0x0107
 4f2:	82 e1       	ldi	r24, 0x12	; 18
 4f4:	80 83       	st	Z, r24
	*write_c = (0xc8);        //common output scan direction:com63~com0
 4f6:	e0 91 06 01 	lds	r30, 0x0106
 4fa:	f0 91 07 01 	lds	r31, 0x0107
 4fe:	88 ec       	ldi	r24, 0xC8	; 200
 500:	80 83       	st	Z, r24
	*write_c = (0xa8);        //multiplex  ration  mode:63
 502:	e0 91 06 01 	lds	r30, 0x0106
 506:	f0 91 07 01 	lds	r31, 0x0107
 50a:	88 ea       	ldi	r24, 0xA8	; 168
 50c:	80 83       	st	Z, r24
	*write_c = (0x3f);
 50e:	e0 91 06 01 	lds	r30, 0x0106
 512:	f0 91 07 01 	lds	r31, 0x0107
 516:	8f e3       	ldi	r24, 0x3F	; 63
 518:	80 83       	st	Z, r24
	*write_c = (0xd5);        //display divide ratio/osc. freq. mode
 51a:	e0 91 06 01 	lds	r30, 0x0106
 51e:	f0 91 07 01 	lds	r31, 0x0107
 522:	85 ed       	ldi	r24, 0xD5	; 213
 524:	80 83       	st	Z, r24
	*write_c = (0x80);
 526:	e0 91 06 01 	lds	r30, 0x0106
 52a:	f0 91 07 01 	lds	r31, 0x0107
 52e:	80 e8       	ldi	r24, 0x80	; 128
 530:	80 83       	st	Z, r24
	*write_c = (0x81);        //contrast  control
 532:	e0 91 06 01 	lds	r30, 0x0106
 536:	f0 91 07 01 	lds	r31, 0x0107
 53a:	81 e8       	ldi	r24, 0x81	; 129
 53c:	80 83       	st	Z, r24
	*write_c = (0x50);
 53e:	e0 91 06 01 	lds	r30, 0x0106
 542:	f0 91 07 01 	lds	r31, 0x0107
 546:	80 e5       	ldi	r24, 0x50	; 80
 548:	80 83       	st	Z, r24
	*write_c = (0xd9);        //set  pre-charge  period
 54a:	e0 91 06 01 	lds	r30, 0x0106
 54e:	f0 91 07 01 	lds	r31, 0x0107
 552:	89 ed       	ldi	r24, 0xD9	; 217
 554:	80 83       	st	Z, r24
	*write_c = (0x21);
 556:	e0 91 06 01 	lds	r30, 0x0106
 55a:	f0 91 07 01 	lds	r31, 0x0107
 55e:	81 e2       	ldi	r24, 0x21	; 33
 560:	80 83       	st	Z, r24
	*write_c = (0x20);        //Set  Memory  Addressing  Mode
 562:	e0 91 06 01 	lds	r30, 0x0106
 566:	f0 91 07 01 	lds	r31, 0x0107
 56a:	80 e2       	ldi	r24, 0x20	; 32
 56c:	80 83       	st	Z, r24
	*write_c = (0x02);
 56e:	e0 91 06 01 	lds	r30, 0x0106
 572:	f0 91 07 01 	lds	r31, 0x0107
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	80 83       	st	Z, r24
	*write_c = (0xdb);        //VCOM  deselect  level  mode
 57a:	e0 91 06 01 	lds	r30, 0x0106
 57e:	f0 91 07 01 	lds	r31, 0x0107
 582:	8b ed       	ldi	r24, 0xDB	; 219
 584:	80 83       	st	Z, r24
	*write_c = (0x30);
 586:	e0 91 06 01 	lds	r30, 0x0106
 58a:	f0 91 07 01 	lds	r31, 0x0107
 58e:	80 e3       	ldi	r24, 0x30	; 48
 590:	80 83       	st	Z, r24
	*write_c = (0xad);        //master  configuration
 592:	e0 91 06 01 	lds	r30, 0x0106
 596:	f0 91 07 01 	lds	r31, 0x0107
 59a:	8d ea       	ldi	r24, 0xAD	; 173
 59c:	80 83       	st	Z, r24
	*write_c = (0x00);
 59e:	e0 91 06 01 	lds	r30, 0x0106
 5a2:	f0 91 07 01 	lds	r31, 0x0107
 5a6:	10 82       	st	Z, r1
	*write_c = (0xa4);        //out  follows  RAM  content
 5a8:	e0 91 06 01 	lds	r30, 0x0106
 5ac:	f0 91 07 01 	lds	r31, 0x0107
 5b0:	84 ea       	ldi	r24, 0xA4	; 164
 5b2:	80 83       	st	Z, r24
	*write_c = (0xa6);        //set  normal  display
 5b4:	e0 91 06 01 	lds	r30, 0x0106
 5b8:	f0 91 07 01 	lds	r31, 0x0107
 5bc:	86 ea       	ldi	r24, 0xA6	; 166
 5be:	80 83       	st	Z, r24
	*write_c = (0xaf);        //  display  on
 5c0:	e0 91 06 01 	lds	r30, 0x0106
 5c4:	f0 91 07 01 	lds	r31, 0x0107
 5c8:	8f ea       	ldi	r24, 0xAF	; 175
 5ca:	80 83       	st	Z, r24
 5cc:	08 95       	ret

000005ce <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	/* Set MOSI, SS and SCK output, all others input */
	DDRB &= ~(1<<PB6);
 5ce:	be 98       	cbi	0x17, 6	; 23
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
 5d0:	87 b3       	in	r24, 0x17	; 23
 5d2:	80 6b       	ori	r24, 0xB0	; 176
 5d4:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB4);
 5d6:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//&~(1<<DORD);
 5d8:	8d b1       	in	r24, 0x0d	; 13
 5da:	81 65       	ori	r24, 0x51	; 81
 5dc:	8d b9       	out	0x0d, r24	; 13
 5de:	08 95       	ret

000005e0 <SPI_tranciever>:
unsigned char SPI_tranciever(unsigned char data)
{

	/* Start transmission */

	SPDR = data;
 5e0:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
 5e2:	77 9b       	sbis	0x0e, 7	; 14
 5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <SPI_tranciever+0x2>

	//Return received data
	return SPDR;
 5e6:	8f b1       	in	r24, 0x0f	; 15
}
 5e8:	08 95       	ret

000005ea <SRAM_init>:



void SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
 5ea:	85 b7       	in	r24, 0x35	; 53
 5ec:	80 68       	ori	r24, 0x80	; 128
 5ee:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
 5f0:	80 b7       	in	r24, 0x30	; 48
 5f2:	80 62       	ori	r24, 0x20	; 32
 5f4:	80 bf       	out	0x30, r24	; 48
 5f6:	08 95       	ret

000005f8 <USART_Receive>:


unsigned char USART_Receive(void)
	{
	//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 5f8:	5f 9b       	sbis	0x0b, 7	; 11
 5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <USART_Receive>
	
	//Get and return received data from buffer
	return UDR0;
 5fc:	8c b1       	in	r24, 0x0c	; 12
	}
 5fe:	08 95       	ret

00000600 <USART_Transmit>:

void USART_Transmit( unsigned char data )
	{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
 600:	5d 9b       	sbis	0x0b, 5	; 11
 602:	fe cf       	rjmp	.-4      	; 0x600 <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 604:	8c b9       	out	0x0c, r24	; 12
 606:	08 95       	ret

00000608 <UartInit>:

	
//}
void UartInit(){
	//Set Baud rate 9600
	UBRR0H = (unsigned char)(MYUBRR>>8);	// Setter de 8 mest signifikante bitene
 608:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBRR);	// Setter de 8 minst signifikante bitene
 60a:	8f e1       	ldi	r24, 0x1F	; 31
 60c:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 60e:	88 e1       	ldi	r24, 0x18	; 24
 610:	8a b9       	out	0x0a, r24	; 10
	// 8N2
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 612:	8e e8       	ldi	r24, 0x8E	; 142
 614:	80 bd       	out	0x20, r24	; 32
	fdevopen(&USART_Transmit, &USART_Receive);
 616:	6c ef       	ldi	r22, 0xFC	; 252
 618:	72 e0       	ldi	r23, 0x02	; 2
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	93 e0       	ldi	r25, 0x03	; 3
 61e:	0e 94 12 03 	call	0x624	; 0x624 <fdevopen>
 622:	08 95       	ret

00000624 <fdevopen>:
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	ec 01       	movw	r28, r24
 62e:	8b 01       	movw	r16, r22
 630:	00 97       	sbiw	r24, 0x00	; 0
 632:	31 f4       	brne	.+12     	; 0x640 <fdevopen+0x1c>
 634:	61 15       	cp	r22, r1
 636:	71 05       	cpc	r23, r1
 638:	19 f4       	brne	.+6      	; 0x640 <fdevopen+0x1c>
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	38 c0       	rjmp	.+112    	; 0x6b0 <fdevopen+0x8c>
 640:	6e e0       	ldi	r22, 0x0E	; 14
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 77 05 	call	0xaee	; 0xaee <calloc>
 64c:	fc 01       	movw	r30, r24
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	a1 f3       	breq	.-24     	; 0x63a <fdevopen+0x16>
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	83 83       	std	Z+3, r24	; 0x03
 656:	01 15       	cp	r16, r1
 658:	11 05       	cpc	r17, r1
 65a:	71 f0       	breq	.+28     	; 0x678 <fdevopen+0x54>
 65c:	13 87       	std	Z+11, r17	; 0x0b
 65e:	02 87       	std	Z+10, r16	; 0x0a
 660:	81 e8       	ldi	r24, 0x81	; 129
 662:	83 83       	std	Z+3, r24	; 0x03
 664:	80 91 78 01 	lds	r24, 0x0178
 668:	90 91 79 01 	lds	r25, 0x0179
 66c:	89 2b       	or	r24, r25
 66e:	21 f4       	brne	.+8      	; 0x678 <fdevopen+0x54>
 670:	f0 93 79 01 	sts	0x0179, r31
 674:	e0 93 78 01 	sts	0x0178, r30
 678:	20 97       	sbiw	r28, 0x00	; 0
 67a:	c9 f0       	breq	.+50     	; 0x6ae <fdevopen+0x8a>
 67c:	d1 87       	std	Z+9, r29	; 0x09
 67e:	c0 87       	std	Z+8, r28	; 0x08
 680:	83 81       	ldd	r24, Z+3	; 0x03
 682:	82 60       	ori	r24, 0x02	; 2
 684:	83 83       	std	Z+3, r24	; 0x03
 686:	80 91 7a 01 	lds	r24, 0x017A
 68a:	90 91 7b 01 	lds	r25, 0x017B
 68e:	89 2b       	or	r24, r25
 690:	71 f4       	brne	.+28     	; 0x6ae <fdevopen+0x8a>
 692:	f0 93 7b 01 	sts	0x017B, r31
 696:	e0 93 7a 01 	sts	0x017A, r30
 69a:	80 91 7c 01 	lds	r24, 0x017C
 69e:	90 91 7d 01 	lds	r25, 0x017D
 6a2:	89 2b       	or	r24, r25
 6a4:	21 f4       	brne	.+8      	; 0x6ae <fdevopen+0x8a>
 6a6:	f0 93 7d 01 	sts	0x017D, r31
 6aa:	e0 93 7c 01 	sts	0x017C, r30
 6ae:	cf 01       	movw	r24, r30
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	08 95       	ret

000006ba <printf>:
 6ba:	a0 e0       	ldi	r26, 0x00	; 0
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	e3 e6       	ldi	r30, 0x63	; 99
 6c0:	f3 e0       	ldi	r31, 0x03	; 3
 6c2:	0c 94 77 07 	jmp	0xeee	; 0xeee <__prologue_saves__+0x20>
 6c6:	fe 01       	movw	r30, r28
 6c8:	35 96       	adiw	r30, 0x05	; 5
 6ca:	61 91       	ld	r22, Z+
 6cc:	71 91       	ld	r23, Z+
 6ce:	af 01       	movw	r20, r30
 6d0:	80 91 7a 01 	lds	r24, 0x017A
 6d4:	90 91 7b 01 	lds	r25, 0x017B
 6d8:	0e 94 a5 03 	call	0x74a	; 0x74a <vfprintf>
 6dc:	e2 e0       	ldi	r30, 0x02	; 2
 6de:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__epilogue_restores__+0x20>

000006e2 <putchar>:
 6e2:	60 91 7a 01 	lds	r22, 0x017A
 6e6:	70 91 7b 01 	lds	r23, 0x017B
 6ea:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 6ee:	08 95       	ret

000006f0 <puts>:
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	e0 91 7a 01 	lds	r30, 0x017A
 6fc:	f0 91 7b 01 	lds	r31, 0x017B
 700:	23 81       	ldd	r18, Z+3	; 0x03
 702:	21 ff       	sbrs	r18, 1
 704:	1b c0       	rjmp	.+54     	; 0x73c <puts+0x4c>
 706:	ec 01       	movw	r28, r24
 708:	00 e0       	ldi	r16, 0x00	; 0
 70a:	10 e0       	ldi	r17, 0x00	; 0
 70c:	89 91       	ld	r24, Y+
 70e:	60 91 7a 01 	lds	r22, 0x017A
 712:	70 91 7b 01 	lds	r23, 0x017B
 716:	db 01       	movw	r26, r22
 718:	18 96       	adiw	r26, 0x08	; 8
 71a:	ed 91       	ld	r30, X+
 71c:	fc 91       	ld	r31, X
 71e:	19 97       	sbiw	r26, 0x09	; 9
 720:	88 23       	and	r24, r24
 722:	31 f0       	breq	.+12     	; 0x730 <puts+0x40>
 724:	09 95       	icall
 726:	89 2b       	or	r24, r25
 728:	89 f3       	breq	.-30     	; 0x70c <puts+0x1c>
 72a:	0f ef       	ldi	r16, 0xFF	; 255
 72c:	1f ef       	ldi	r17, 0xFF	; 255
 72e:	ee cf       	rjmp	.-36     	; 0x70c <puts+0x1c>
 730:	8a e0       	ldi	r24, 0x0A	; 10
 732:	09 95       	icall
 734:	89 2b       	or	r24, r25
 736:	11 f4       	brne	.+4      	; 0x73c <puts+0x4c>
 738:	c8 01       	movw	r24, r16
 73a:	02 c0       	rjmp	.+4      	; 0x740 <puts+0x50>
 73c:	8f ef       	ldi	r24, 0xFF	; 255
 73e:	9f ef       	ldi	r25, 0xFF	; 255
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	08 95       	ret

0000074a <vfprintf>:
 74a:	ac e0       	ldi	r26, 0x0C	; 12
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	eb ea       	ldi	r30, 0xAB	; 171
 750:	f3 e0       	ldi	r31, 0x03	; 3
 752:	0c 94 67 07 	jmp	0xece	; 0xece <__prologue_saves__>
 756:	7c 01       	movw	r14, r24
 758:	6b 01       	movw	r12, r22
 75a:	8a 01       	movw	r16, r20
 75c:	fc 01       	movw	r30, r24
 75e:	17 82       	std	Z+7, r1	; 0x07
 760:	16 82       	std	Z+6, r1	; 0x06
 762:	83 81       	ldd	r24, Z+3	; 0x03
 764:	81 ff       	sbrs	r24, 1
 766:	bd c1       	rjmp	.+890    	; 0xae2 <vfprintf+0x398>
 768:	ce 01       	movw	r24, r28
 76a:	01 96       	adiw	r24, 0x01	; 1
 76c:	4c 01       	movw	r8, r24
 76e:	f7 01       	movw	r30, r14
 770:	93 81       	ldd	r25, Z+3	; 0x03
 772:	f6 01       	movw	r30, r12
 774:	93 fd       	sbrc	r25, 3
 776:	85 91       	lpm	r24, Z+
 778:	93 ff       	sbrs	r25, 3
 77a:	81 91       	ld	r24, Z+
 77c:	6f 01       	movw	r12, r30
 77e:	88 23       	and	r24, r24
 780:	09 f4       	brne	.+2      	; 0x784 <vfprintf+0x3a>
 782:	ab c1       	rjmp	.+854    	; 0xada <vfprintf+0x390>
 784:	85 32       	cpi	r24, 0x25	; 37
 786:	39 f4       	brne	.+14     	; 0x796 <vfprintf+0x4c>
 788:	93 fd       	sbrc	r25, 3
 78a:	85 91       	lpm	r24, Z+
 78c:	93 ff       	sbrs	r25, 3
 78e:	81 91       	ld	r24, Z+
 790:	6f 01       	movw	r12, r30
 792:	85 32       	cpi	r24, 0x25	; 37
 794:	29 f4       	brne	.+10     	; 0x7a0 <vfprintf+0x56>
 796:	b7 01       	movw	r22, r14
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 79e:	e7 cf       	rjmp	.-50     	; 0x76e <vfprintf+0x24>
 7a0:	51 2c       	mov	r5, r1
 7a2:	31 2c       	mov	r3, r1
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	20 32       	cpi	r18, 0x20	; 32
 7a8:	a0 f4       	brcc	.+40     	; 0x7d2 <vfprintf+0x88>
 7aa:	8b 32       	cpi	r24, 0x2B	; 43
 7ac:	69 f0       	breq	.+26     	; 0x7c8 <vfprintf+0x7e>
 7ae:	30 f4       	brcc	.+12     	; 0x7bc <vfprintf+0x72>
 7b0:	80 32       	cpi	r24, 0x20	; 32
 7b2:	59 f0       	breq	.+22     	; 0x7ca <vfprintf+0x80>
 7b4:	83 32       	cpi	r24, 0x23	; 35
 7b6:	69 f4       	brne	.+26     	; 0x7d2 <vfprintf+0x88>
 7b8:	20 61       	ori	r18, 0x10	; 16
 7ba:	2c c0       	rjmp	.+88     	; 0x814 <vfprintf+0xca>
 7bc:	8d 32       	cpi	r24, 0x2D	; 45
 7be:	39 f0       	breq	.+14     	; 0x7ce <vfprintf+0x84>
 7c0:	80 33       	cpi	r24, 0x30	; 48
 7c2:	39 f4       	brne	.+14     	; 0x7d2 <vfprintf+0x88>
 7c4:	21 60       	ori	r18, 0x01	; 1
 7c6:	26 c0       	rjmp	.+76     	; 0x814 <vfprintf+0xca>
 7c8:	22 60       	ori	r18, 0x02	; 2
 7ca:	24 60       	ori	r18, 0x04	; 4
 7cc:	23 c0       	rjmp	.+70     	; 0x814 <vfprintf+0xca>
 7ce:	28 60       	ori	r18, 0x08	; 8
 7d0:	21 c0       	rjmp	.+66     	; 0x814 <vfprintf+0xca>
 7d2:	27 fd       	sbrc	r18, 7
 7d4:	27 c0       	rjmp	.+78     	; 0x824 <vfprintf+0xda>
 7d6:	30 ed       	ldi	r19, 0xD0	; 208
 7d8:	38 0f       	add	r19, r24
 7da:	3a 30       	cpi	r19, 0x0A	; 10
 7dc:	78 f4       	brcc	.+30     	; 0x7fc <vfprintf+0xb2>
 7de:	26 ff       	sbrs	r18, 6
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <vfprintf+0xa4>
 7e2:	fa e0       	ldi	r31, 0x0A	; 10
 7e4:	5f 9e       	mul	r5, r31
 7e6:	30 0d       	add	r19, r0
 7e8:	11 24       	eor	r1, r1
 7ea:	53 2e       	mov	r5, r19
 7ec:	13 c0       	rjmp	.+38     	; 0x814 <vfprintf+0xca>
 7ee:	8a e0       	ldi	r24, 0x0A	; 10
 7f0:	38 9e       	mul	r3, r24
 7f2:	30 0d       	add	r19, r0
 7f4:	11 24       	eor	r1, r1
 7f6:	33 2e       	mov	r3, r19
 7f8:	20 62       	ori	r18, 0x20	; 32
 7fa:	0c c0       	rjmp	.+24     	; 0x814 <vfprintf+0xca>
 7fc:	8e 32       	cpi	r24, 0x2E	; 46
 7fe:	21 f4       	brne	.+8      	; 0x808 <vfprintf+0xbe>
 800:	26 fd       	sbrc	r18, 6
 802:	6b c1       	rjmp	.+726    	; 0xada <vfprintf+0x390>
 804:	20 64       	ori	r18, 0x40	; 64
 806:	06 c0       	rjmp	.+12     	; 0x814 <vfprintf+0xca>
 808:	8c 36       	cpi	r24, 0x6C	; 108
 80a:	11 f4       	brne	.+4      	; 0x810 <vfprintf+0xc6>
 80c:	20 68       	ori	r18, 0x80	; 128
 80e:	02 c0       	rjmp	.+4      	; 0x814 <vfprintf+0xca>
 810:	88 36       	cpi	r24, 0x68	; 104
 812:	41 f4       	brne	.+16     	; 0x824 <vfprintf+0xda>
 814:	f6 01       	movw	r30, r12
 816:	93 fd       	sbrc	r25, 3
 818:	85 91       	lpm	r24, Z+
 81a:	93 ff       	sbrs	r25, 3
 81c:	81 91       	ld	r24, Z+
 81e:	6f 01       	movw	r12, r30
 820:	81 11       	cpse	r24, r1
 822:	c1 cf       	rjmp	.-126    	; 0x7a6 <vfprintf+0x5c>
 824:	98 2f       	mov	r25, r24
 826:	9f 7d       	andi	r25, 0xDF	; 223
 828:	95 54       	subi	r25, 0x45	; 69
 82a:	93 30       	cpi	r25, 0x03	; 3
 82c:	28 f4       	brcc	.+10     	; 0x838 <vfprintf+0xee>
 82e:	0c 5f       	subi	r16, 0xFC	; 252
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	ff e3       	ldi	r31, 0x3F	; 63
 834:	f9 83       	std	Y+1, r31	; 0x01
 836:	0d c0       	rjmp	.+26     	; 0x852 <vfprintf+0x108>
 838:	83 36       	cpi	r24, 0x63	; 99
 83a:	31 f0       	breq	.+12     	; 0x848 <vfprintf+0xfe>
 83c:	83 37       	cpi	r24, 0x73	; 115
 83e:	71 f0       	breq	.+28     	; 0x85c <vfprintf+0x112>
 840:	83 35       	cpi	r24, 0x53	; 83
 842:	09 f0       	breq	.+2      	; 0x846 <vfprintf+0xfc>
 844:	5b c0       	rjmp	.+182    	; 0x8fc <vfprintf+0x1b2>
 846:	22 c0       	rjmp	.+68     	; 0x88c <vfprintf+0x142>
 848:	f8 01       	movw	r30, r16
 84a:	80 81       	ld	r24, Z
 84c:	89 83       	std	Y+1, r24	; 0x01
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	44 24       	eor	r4, r4
 854:	43 94       	inc	r4
 856:	51 2c       	mov	r5, r1
 858:	54 01       	movw	r10, r8
 85a:	15 c0       	rjmp	.+42     	; 0x886 <vfprintf+0x13c>
 85c:	38 01       	movw	r6, r16
 85e:	f2 e0       	ldi	r31, 0x02	; 2
 860:	6f 0e       	add	r6, r31
 862:	71 1c       	adc	r7, r1
 864:	f8 01       	movw	r30, r16
 866:	a0 80       	ld	r10, Z
 868:	b1 80       	ldd	r11, Z+1	; 0x01
 86a:	26 ff       	sbrs	r18, 6
 86c:	03 c0       	rjmp	.+6      	; 0x874 <vfprintf+0x12a>
 86e:	65 2d       	mov	r22, r5
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <vfprintf+0x12e>
 874:	6f ef       	ldi	r22, 0xFF	; 255
 876:	7f ef       	ldi	r23, 0xFF	; 255
 878:	c5 01       	movw	r24, r10
 87a:	2c 87       	std	Y+12, r18	; 0x0c
 87c:	0e 94 cc 06 	call	0xd98	; 0xd98 <strnlen>
 880:	2c 01       	movw	r4, r24
 882:	83 01       	movw	r16, r6
 884:	2c 85       	ldd	r18, Y+12	; 0x0c
 886:	2f 77       	andi	r18, 0x7F	; 127
 888:	22 2e       	mov	r2, r18
 88a:	17 c0       	rjmp	.+46     	; 0x8ba <vfprintf+0x170>
 88c:	38 01       	movw	r6, r16
 88e:	f2 e0       	ldi	r31, 0x02	; 2
 890:	6f 0e       	add	r6, r31
 892:	71 1c       	adc	r7, r1
 894:	f8 01       	movw	r30, r16
 896:	a0 80       	ld	r10, Z
 898:	b1 80       	ldd	r11, Z+1	; 0x01
 89a:	26 ff       	sbrs	r18, 6
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <vfprintf+0x15a>
 89e:	65 2d       	mov	r22, r5
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x15e>
 8a4:	6f ef       	ldi	r22, 0xFF	; 255
 8a6:	7f ef       	ldi	r23, 0xFF	; 255
 8a8:	c5 01       	movw	r24, r10
 8aa:	2c 87       	std	Y+12, r18	; 0x0c
 8ac:	0e 94 ba 06 	call	0xd74	; 0xd74 <strnlen_P>
 8b0:	2c 01       	movw	r4, r24
 8b2:	2c 85       	ldd	r18, Y+12	; 0x0c
 8b4:	20 68       	ori	r18, 0x80	; 128
 8b6:	22 2e       	mov	r2, r18
 8b8:	83 01       	movw	r16, r6
 8ba:	23 fc       	sbrc	r2, 3
 8bc:	1b c0       	rjmp	.+54     	; 0x8f4 <vfprintf+0x1aa>
 8be:	83 2d       	mov	r24, r3
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	48 16       	cp	r4, r24
 8c4:	59 06       	cpc	r5, r25
 8c6:	b0 f4       	brcc	.+44     	; 0x8f4 <vfprintf+0x1aa>
 8c8:	b7 01       	movw	r22, r14
 8ca:	80 e2       	ldi	r24, 0x20	; 32
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 8d2:	3a 94       	dec	r3
 8d4:	f4 cf       	rjmp	.-24     	; 0x8be <vfprintf+0x174>
 8d6:	f5 01       	movw	r30, r10
 8d8:	27 fc       	sbrc	r2, 7
 8da:	85 91       	lpm	r24, Z+
 8dc:	27 fe       	sbrs	r2, 7
 8de:	81 91       	ld	r24, Z+
 8e0:	5f 01       	movw	r10, r30
 8e2:	b7 01       	movw	r22, r14
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 8ea:	31 10       	cpse	r3, r1
 8ec:	3a 94       	dec	r3
 8ee:	f1 e0       	ldi	r31, 0x01	; 1
 8f0:	4f 1a       	sub	r4, r31
 8f2:	51 08       	sbc	r5, r1
 8f4:	41 14       	cp	r4, r1
 8f6:	51 04       	cpc	r5, r1
 8f8:	71 f7       	brne	.-36     	; 0x8d6 <vfprintf+0x18c>
 8fa:	e5 c0       	rjmp	.+458    	; 0xac6 <vfprintf+0x37c>
 8fc:	84 36       	cpi	r24, 0x64	; 100
 8fe:	11 f0       	breq	.+4      	; 0x904 <vfprintf+0x1ba>
 900:	89 36       	cpi	r24, 0x69	; 105
 902:	39 f5       	brne	.+78     	; 0x952 <vfprintf+0x208>
 904:	f8 01       	movw	r30, r16
 906:	27 ff       	sbrs	r18, 7
 908:	07 c0       	rjmp	.+14     	; 0x918 <vfprintf+0x1ce>
 90a:	60 81       	ld	r22, Z
 90c:	71 81       	ldd	r23, Z+1	; 0x01
 90e:	82 81       	ldd	r24, Z+2	; 0x02
 910:	93 81       	ldd	r25, Z+3	; 0x03
 912:	0c 5f       	subi	r16, 0xFC	; 252
 914:	1f 4f       	sbci	r17, 0xFF	; 255
 916:	08 c0       	rjmp	.+16     	; 0x928 <vfprintf+0x1de>
 918:	60 81       	ld	r22, Z
 91a:	71 81       	ldd	r23, Z+1	; 0x01
 91c:	88 27       	eor	r24, r24
 91e:	77 fd       	sbrc	r23, 7
 920:	80 95       	com	r24
 922:	98 2f       	mov	r25, r24
 924:	0e 5f       	subi	r16, 0xFE	; 254
 926:	1f 4f       	sbci	r17, 0xFF	; 255
 928:	2f 76       	andi	r18, 0x6F	; 111
 92a:	b2 2e       	mov	r11, r18
 92c:	97 ff       	sbrs	r25, 7
 92e:	09 c0       	rjmp	.+18     	; 0x942 <vfprintf+0x1f8>
 930:	90 95       	com	r25
 932:	80 95       	com	r24
 934:	70 95       	com	r23
 936:	61 95       	neg	r22
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	8f 4f       	sbci	r24, 0xFF	; 255
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	20 68       	ori	r18, 0x80	; 128
 940:	b2 2e       	mov	r11, r18
 942:	2a e0       	ldi	r18, 0x0A	; 10
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	a4 01       	movw	r20, r8
 948:	0e 94 09 07 	call	0xe12	; 0xe12 <__ultoa_invert>
 94c:	a8 2e       	mov	r10, r24
 94e:	a8 18       	sub	r10, r8
 950:	44 c0       	rjmp	.+136    	; 0x9da <vfprintf+0x290>
 952:	85 37       	cpi	r24, 0x75	; 117
 954:	29 f4       	brne	.+10     	; 0x960 <vfprintf+0x216>
 956:	2f 7e       	andi	r18, 0xEF	; 239
 958:	b2 2e       	mov	r11, r18
 95a:	2a e0       	ldi	r18, 0x0A	; 10
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	25 c0       	rjmp	.+74     	; 0x9aa <vfprintf+0x260>
 960:	f2 2f       	mov	r31, r18
 962:	f9 7f       	andi	r31, 0xF9	; 249
 964:	bf 2e       	mov	r11, r31
 966:	8f 36       	cpi	r24, 0x6F	; 111
 968:	c1 f0       	breq	.+48     	; 0x99a <vfprintf+0x250>
 96a:	18 f4       	brcc	.+6      	; 0x972 <vfprintf+0x228>
 96c:	88 35       	cpi	r24, 0x58	; 88
 96e:	79 f0       	breq	.+30     	; 0x98e <vfprintf+0x244>
 970:	b4 c0       	rjmp	.+360    	; 0xada <vfprintf+0x390>
 972:	80 37       	cpi	r24, 0x70	; 112
 974:	19 f0       	breq	.+6      	; 0x97c <vfprintf+0x232>
 976:	88 37       	cpi	r24, 0x78	; 120
 978:	21 f0       	breq	.+8      	; 0x982 <vfprintf+0x238>
 97a:	af c0       	rjmp	.+350    	; 0xada <vfprintf+0x390>
 97c:	2f 2f       	mov	r18, r31
 97e:	20 61       	ori	r18, 0x10	; 16
 980:	b2 2e       	mov	r11, r18
 982:	b4 fe       	sbrs	r11, 4
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <vfprintf+0x256>
 986:	8b 2d       	mov	r24, r11
 988:	84 60       	ori	r24, 0x04	; 4
 98a:	b8 2e       	mov	r11, r24
 98c:	09 c0       	rjmp	.+18     	; 0x9a0 <vfprintf+0x256>
 98e:	24 ff       	sbrs	r18, 4
 990:	0a c0       	rjmp	.+20     	; 0x9a6 <vfprintf+0x25c>
 992:	9f 2f       	mov	r25, r31
 994:	96 60       	ori	r25, 0x06	; 6
 996:	b9 2e       	mov	r11, r25
 998:	06 c0       	rjmp	.+12     	; 0x9a6 <vfprintf+0x25c>
 99a:	28 e0       	ldi	r18, 0x08	; 8
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <vfprintf+0x260>
 9a0:	20 e1       	ldi	r18, 0x10	; 16
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <vfprintf+0x260>
 9a6:	20 e1       	ldi	r18, 0x10	; 16
 9a8:	32 e0       	ldi	r19, 0x02	; 2
 9aa:	f8 01       	movw	r30, r16
 9ac:	b7 fe       	sbrs	r11, 7
 9ae:	07 c0       	rjmp	.+14     	; 0x9be <vfprintf+0x274>
 9b0:	60 81       	ld	r22, Z
 9b2:	71 81       	ldd	r23, Z+1	; 0x01
 9b4:	82 81       	ldd	r24, Z+2	; 0x02
 9b6:	93 81       	ldd	r25, Z+3	; 0x03
 9b8:	0c 5f       	subi	r16, 0xFC	; 252
 9ba:	1f 4f       	sbci	r17, 0xFF	; 255
 9bc:	06 c0       	rjmp	.+12     	; 0x9ca <vfprintf+0x280>
 9be:	60 81       	ld	r22, Z
 9c0:	71 81       	ldd	r23, Z+1	; 0x01
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e 5f       	subi	r16, 0xFE	; 254
 9c8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ca:	a4 01       	movw	r20, r8
 9cc:	0e 94 09 07 	call	0xe12	; 0xe12 <__ultoa_invert>
 9d0:	a8 2e       	mov	r10, r24
 9d2:	a8 18       	sub	r10, r8
 9d4:	fb 2d       	mov	r31, r11
 9d6:	ff 77       	andi	r31, 0x7F	; 127
 9d8:	bf 2e       	mov	r11, r31
 9da:	b6 fe       	sbrs	r11, 6
 9dc:	0b c0       	rjmp	.+22     	; 0x9f4 <vfprintf+0x2aa>
 9de:	2b 2d       	mov	r18, r11
 9e0:	2e 7f       	andi	r18, 0xFE	; 254
 9e2:	a5 14       	cp	r10, r5
 9e4:	50 f4       	brcc	.+20     	; 0x9fa <vfprintf+0x2b0>
 9e6:	b4 fe       	sbrs	r11, 4
 9e8:	0a c0       	rjmp	.+20     	; 0x9fe <vfprintf+0x2b4>
 9ea:	b2 fc       	sbrc	r11, 2
 9ec:	08 c0       	rjmp	.+16     	; 0x9fe <vfprintf+0x2b4>
 9ee:	2b 2d       	mov	r18, r11
 9f0:	2e 7e       	andi	r18, 0xEE	; 238
 9f2:	05 c0       	rjmp	.+10     	; 0x9fe <vfprintf+0x2b4>
 9f4:	7a 2c       	mov	r7, r10
 9f6:	2b 2d       	mov	r18, r11
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <vfprintf+0x2b6>
 9fa:	7a 2c       	mov	r7, r10
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <vfprintf+0x2b6>
 9fe:	75 2c       	mov	r7, r5
 a00:	24 ff       	sbrs	r18, 4
 a02:	0d c0       	rjmp	.+26     	; 0xa1e <vfprintf+0x2d4>
 a04:	fe 01       	movw	r30, r28
 a06:	ea 0d       	add	r30, r10
 a08:	f1 1d       	adc	r31, r1
 a0a:	80 81       	ld	r24, Z
 a0c:	80 33       	cpi	r24, 0x30	; 48
 a0e:	11 f4       	brne	.+4      	; 0xa14 <vfprintf+0x2ca>
 a10:	29 7e       	andi	r18, 0xE9	; 233
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <vfprintf+0x2dc>
 a14:	22 ff       	sbrs	r18, 2
 a16:	06 c0       	rjmp	.+12     	; 0xa24 <vfprintf+0x2da>
 a18:	73 94       	inc	r7
 a1a:	73 94       	inc	r7
 a1c:	04 c0       	rjmp	.+8      	; 0xa26 <vfprintf+0x2dc>
 a1e:	82 2f       	mov	r24, r18
 a20:	86 78       	andi	r24, 0x86	; 134
 a22:	09 f0       	breq	.+2      	; 0xa26 <vfprintf+0x2dc>
 a24:	73 94       	inc	r7
 a26:	23 fd       	sbrc	r18, 3
 a28:	13 c0       	rjmp	.+38     	; 0xa50 <vfprintf+0x306>
 a2a:	20 ff       	sbrs	r18, 0
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <vfprintf+0x2f0>
 a2e:	5a 2c       	mov	r5, r10
 a30:	73 14       	cp	r7, r3
 a32:	18 f4       	brcc	.+6      	; 0xa3a <vfprintf+0x2f0>
 a34:	53 0c       	add	r5, r3
 a36:	57 18       	sub	r5, r7
 a38:	73 2c       	mov	r7, r3
 a3a:	73 14       	cp	r7, r3
 a3c:	68 f4       	brcc	.+26     	; 0xa58 <vfprintf+0x30e>
 a3e:	b7 01       	movw	r22, r14
 a40:	80 e2       	ldi	r24, 0x20	; 32
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	2c 87       	std	Y+12, r18	; 0x0c
 a46:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 a4a:	73 94       	inc	r7
 a4c:	2c 85       	ldd	r18, Y+12	; 0x0c
 a4e:	f5 cf       	rjmp	.-22     	; 0xa3a <vfprintf+0x2f0>
 a50:	73 14       	cp	r7, r3
 a52:	10 f4       	brcc	.+4      	; 0xa58 <vfprintf+0x30e>
 a54:	37 18       	sub	r3, r7
 a56:	01 c0       	rjmp	.+2      	; 0xa5a <vfprintf+0x310>
 a58:	31 2c       	mov	r3, r1
 a5a:	24 ff       	sbrs	r18, 4
 a5c:	12 c0       	rjmp	.+36     	; 0xa82 <vfprintf+0x338>
 a5e:	b7 01       	movw	r22, r14
 a60:	80 e3       	ldi	r24, 0x30	; 48
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	2c 87       	std	Y+12, r18	; 0x0c
 a66:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 a6a:	2c 85       	ldd	r18, Y+12	; 0x0c
 a6c:	22 ff       	sbrs	r18, 2
 a6e:	17 c0       	rjmp	.+46     	; 0xa9e <vfprintf+0x354>
 a70:	21 ff       	sbrs	r18, 1
 a72:	03 c0       	rjmp	.+6      	; 0xa7a <vfprintf+0x330>
 a74:	88 e5       	ldi	r24, 0x58	; 88
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <vfprintf+0x334>
 a7a:	88 e7       	ldi	r24, 0x78	; 120
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	b7 01       	movw	r22, r14
 a80:	0c c0       	rjmp	.+24     	; 0xa9a <vfprintf+0x350>
 a82:	82 2f       	mov	r24, r18
 a84:	86 78       	andi	r24, 0x86	; 134
 a86:	59 f0       	breq	.+22     	; 0xa9e <vfprintf+0x354>
 a88:	21 fd       	sbrc	r18, 1
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <vfprintf+0x346>
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	01 c0       	rjmp	.+2      	; 0xa92 <vfprintf+0x348>
 a90:	8b e2       	ldi	r24, 0x2B	; 43
 a92:	27 fd       	sbrc	r18, 7
 a94:	8d e2       	ldi	r24, 0x2D	; 45
 a96:	b7 01       	movw	r22, r14
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 a9e:	a5 14       	cp	r10, r5
 aa0:	38 f4       	brcc	.+14     	; 0xab0 <vfprintf+0x366>
 aa2:	b7 01       	movw	r22, r14
 aa4:	80 e3       	ldi	r24, 0x30	; 48
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 aac:	5a 94       	dec	r5
 aae:	f7 cf       	rjmp	.-18     	; 0xa9e <vfprintf+0x354>
 ab0:	aa 94       	dec	r10
 ab2:	f4 01       	movw	r30, r8
 ab4:	ea 0d       	add	r30, r10
 ab6:	f1 1d       	adc	r31, r1
 ab8:	80 81       	ld	r24, Z
 aba:	b7 01       	movw	r22, r14
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 ac2:	a1 10       	cpse	r10, r1
 ac4:	f5 cf       	rjmp	.-22     	; 0xab0 <vfprintf+0x366>
 ac6:	33 20       	and	r3, r3
 ac8:	09 f4       	brne	.+2      	; 0xacc <vfprintf+0x382>
 aca:	51 ce       	rjmp	.-862    	; 0x76e <vfprintf+0x24>
 acc:	b7 01       	movw	r22, r14
 ace:	80 e2       	ldi	r24, 0x20	; 32
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 d7 06 	call	0xdae	; 0xdae <fputc>
 ad6:	3a 94       	dec	r3
 ad8:	f6 cf       	rjmp	.-20     	; 0xac6 <vfprintf+0x37c>
 ada:	f7 01       	movw	r30, r14
 adc:	86 81       	ldd	r24, Z+6	; 0x06
 ade:	97 81       	ldd	r25, Z+7	; 0x07
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <vfprintf+0x39c>
 ae2:	8f ef       	ldi	r24, 0xFF	; 255
 ae4:	9f ef       	ldi	r25, 0xFF	; 255
 ae6:	2c 96       	adiw	r28, 0x0c	; 12
 ae8:	e2 e1       	ldi	r30, 0x12	; 18
 aea:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__epilogue_restores__>

00000aee <calloc>:
 aee:	0f 93       	push	r16
 af0:	1f 93       	push	r17
 af2:	cf 93       	push	r28
 af4:	df 93       	push	r29
 af6:	86 9f       	mul	r24, r22
 af8:	80 01       	movw	r16, r0
 afa:	87 9f       	mul	r24, r23
 afc:	10 0d       	add	r17, r0
 afe:	96 9f       	mul	r25, r22
 b00:	10 0d       	add	r17, r0
 b02:	11 24       	eor	r1, r1
 b04:	c8 01       	movw	r24, r16
 b06:	0e 94 93 05 	call	0xb26	; 0xb26 <malloc>
 b0a:	ec 01       	movw	r28, r24
 b0c:	00 97       	sbiw	r24, 0x00	; 0
 b0e:	29 f0       	breq	.+10     	; 0xb1a <calloc+0x2c>
 b10:	a8 01       	movw	r20, r16
 b12:	60 e0       	ldi	r22, 0x00	; 0
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	0e 94 c5 06 	call	0xd8a	; 0xd8a <memset>
 b1a:	ce 01       	movw	r24, r28
 b1c:	df 91       	pop	r29
 b1e:	cf 91       	pop	r28
 b20:	1f 91       	pop	r17
 b22:	0f 91       	pop	r16
 b24:	08 95       	ret

00000b26 <malloc>:
 b26:	cf 93       	push	r28
 b28:	df 93       	push	r29
 b2a:	82 30       	cpi	r24, 0x02	; 2
 b2c:	91 05       	cpc	r25, r1
 b2e:	10 f4       	brcc	.+4      	; 0xb34 <malloc+0xe>
 b30:	82 e0       	ldi	r24, 0x02	; 2
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	e0 91 80 01 	lds	r30, 0x0180
 b38:	f0 91 81 01 	lds	r31, 0x0181
 b3c:	20 e0       	ldi	r18, 0x00	; 0
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	a0 e0       	ldi	r26, 0x00	; 0
 b42:	b0 e0       	ldi	r27, 0x00	; 0
 b44:	30 97       	sbiw	r30, 0x00	; 0
 b46:	39 f1       	breq	.+78     	; 0xb96 <malloc+0x70>
 b48:	40 81       	ld	r20, Z
 b4a:	51 81       	ldd	r21, Z+1	; 0x01
 b4c:	48 17       	cp	r20, r24
 b4e:	59 07       	cpc	r21, r25
 b50:	b8 f0       	brcs	.+46     	; 0xb80 <malloc+0x5a>
 b52:	48 17       	cp	r20, r24
 b54:	59 07       	cpc	r21, r25
 b56:	71 f4       	brne	.+28     	; 0xb74 <malloc+0x4e>
 b58:	82 81       	ldd	r24, Z+2	; 0x02
 b5a:	93 81       	ldd	r25, Z+3	; 0x03
 b5c:	10 97       	sbiw	r26, 0x00	; 0
 b5e:	29 f0       	breq	.+10     	; 0xb6a <malloc+0x44>
 b60:	13 96       	adiw	r26, 0x03	; 3
 b62:	9c 93       	st	X, r25
 b64:	8e 93       	st	-X, r24
 b66:	12 97       	sbiw	r26, 0x02	; 2
 b68:	2c c0       	rjmp	.+88     	; 0xbc2 <malloc+0x9c>
 b6a:	90 93 81 01 	sts	0x0181, r25
 b6e:	80 93 80 01 	sts	0x0180, r24
 b72:	27 c0       	rjmp	.+78     	; 0xbc2 <malloc+0x9c>
 b74:	21 15       	cp	r18, r1
 b76:	31 05       	cpc	r19, r1
 b78:	31 f0       	breq	.+12     	; 0xb86 <malloc+0x60>
 b7a:	42 17       	cp	r20, r18
 b7c:	53 07       	cpc	r21, r19
 b7e:	18 f0       	brcs	.+6      	; 0xb86 <malloc+0x60>
 b80:	a9 01       	movw	r20, r18
 b82:	db 01       	movw	r26, r22
 b84:	01 c0       	rjmp	.+2      	; 0xb88 <malloc+0x62>
 b86:	ef 01       	movw	r28, r30
 b88:	9a 01       	movw	r18, r20
 b8a:	bd 01       	movw	r22, r26
 b8c:	df 01       	movw	r26, r30
 b8e:	02 80       	ldd	r0, Z+2	; 0x02
 b90:	f3 81       	ldd	r31, Z+3	; 0x03
 b92:	e0 2d       	mov	r30, r0
 b94:	d7 cf       	rjmp	.-82     	; 0xb44 <malloc+0x1e>
 b96:	21 15       	cp	r18, r1
 b98:	31 05       	cpc	r19, r1
 b9a:	f9 f0       	breq	.+62     	; 0xbda <malloc+0xb4>
 b9c:	28 1b       	sub	r18, r24
 b9e:	39 0b       	sbc	r19, r25
 ba0:	24 30       	cpi	r18, 0x04	; 4
 ba2:	31 05       	cpc	r19, r1
 ba4:	80 f4       	brcc	.+32     	; 0xbc6 <malloc+0xa0>
 ba6:	8a 81       	ldd	r24, Y+2	; 0x02
 ba8:	9b 81       	ldd	r25, Y+3	; 0x03
 baa:	61 15       	cp	r22, r1
 bac:	71 05       	cpc	r23, r1
 bae:	21 f0       	breq	.+8      	; 0xbb8 <malloc+0x92>
 bb0:	fb 01       	movw	r30, r22
 bb2:	93 83       	std	Z+3, r25	; 0x03
 bb4:	82 83       	std	Z+2, r24	; 0x02
 bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <malloc+0x9a>
 bb8:	90 93 81 01 	sts	0x0181, r25
 bbc:	80 93 80 01 	sts	0x0180, r24
 bc0:	fe 01       	movw	r30, r28
 bc2:	32 96       	adiw	r30, 0x02	; 2
 bc4:	44 c0       	rjmp	.+136    	; 0xc4e <malloc+0x128>
 bc6:	fe 01       	movw	r30, r28
 bc8:	e2 0f       	add	r30, r18
 bca:	f3 1f       	adc	r31, r19
 bcc:	81 93       	st	Z+, r24
 bce:	91 93       	st	Z+, r25
 bd0:	22 50       	subi	r18, 0x02	; 2
 bd2:	31 09       	sbc	r19, r1
 bd4:	39 83       	std	Y+1, r19	; 0x01
 bd6:	28 83       	st	Y, r18
 bd8:	3a c0       	rjmp	.+116    	; 0xc4e <malloc+0x128>
 bda:	20 91 7e 01 	lds	r18, 0x017E
 bde:	30 91 7f 01 	lds	r19, 0x017F
 be2:	23 2b       	or	r18, r19
 be4:	41 f4       	brne	.+16     	; 0xbf6 <malloc+0xd0>
 be6:	20 91 02 01 	lds	r18, 0x0102
 bea:	30 91 03 01 	lds	r19, 0x0103
 bee:	30 93 7f 01 	sts	0x017F, r19
 bf2:	20 93 7e 01 	sts	0x017E, r18
 bf6:	20 91 00 01 	lds	r18, 0x0100
 bfa:	30 91 01 01 	lds	r19, 0x0101
 bfe:	21 15       	cp	r18, r1
 c00:	31 05       	cpc	r19, r1
 c02:	41 f4       	brne	.+16     	; 0xc14 <malloc+0xee>
 c04:	2d b7       	in	r18, 0x3d	; 61
 c06:	3e b7       	in	r19, 0x3e	; 62
 c08:	40 91 04 01 	lds	r20, 0x0104
 c0c:	50 91 05 01 	lds	r21, 0x0105
 c10:	24 1b       	sub	r18, r20
 c12:	35 0b       	sbc	r19, r21
 c14:	e0 91 7e 01 	lds	r30, 0x017E
 c18:	f0 91 7f 01 	lds	r31, 0x017F
 c1c:	e2 17       	cp	r30, r18
 c1e:	f3 07       	cpc	r31, r19
 c20:	a0 f4       	brcc	.+40     	; 0xc4a <malloc+0x124>
 c22:	2e 1b       	sub	r18, r30
 c24:	3f 0b       	sbc	r19, r31
 c26:	28 17       	cp	r18, r24
 c28:	39 07       	cpc	r19, r25
 c2a:	78 f0       	brcs	.+30     	; 0xc4a <malloc+0x124>
 c2c:	ac 01       	movw	r20, r24
 c2e:	4e 5f       	subi	r20, 0xFE	; 254
 c30:	5f 4f       	sbci	r21, 0xFF	; 255
 c32:	24 17       	cp	r18, r20
 c34:	35 07       	cpc	r19, r21
 c36:	48 f0       	brcs	.+18     	; 0xc4a <malloc+0x124>
 c38:	4e 0f       	add	r20, r30
 c3a:	5f 1f       	adc	r21, r31
 c3c:	50 93 7f 01 	sts	0x017F, r21
 c40:	40 93 7e 01 	sts	0x017E, r20
 c44:	81 93       	st	Z+, r24
 c46:	91 93       	st	Z+, r25
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <malloc+0x128>
 c4a:	e0 e0       	ldi	r30, 0x00	; 0
 c4c:	f0 e0       	ldi	r31, 0x00	; 0
 c4e:	cf 01       	movw	r24, r30
 c50:	df 91       	pop	r29
 c52:	cf 91       	pop	r28
 c54:	08 95       	ret

00000c56 <free>:
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	00 97       	sbiw	r24, 0x00	; 0
 c5c:	09 f4       	brne	.+2      	; 0xc60 <free+0xa>
 c5e:	87 c0       	rjmp	.+270    	; 0xd6e <free+0x118>
 c60:	fc 01       	movw	r30, r24
 c62:	32 97       	sbiw	r30, 0x02	; 2
 c64:	13 82       	std	Z+3, r1	; 0x03
 c66:	12 82       	std	Z+2, r1	; 0x02
 c68:	c0 91 80 01 	lds	r28, 0x0180
 c6c:	d0 91 81 01 	lds	r29, 0x0181
 c70:	20 97       	sbiw	r28, 0x00	; 0
 c72:	81 f4       	brne	.+32     	; 0xc94 <free+0x3e>
 c74:	20 81       	ld	r18, Z
 c76:	31 81       	ldd	r19, Z+1	; 0x01
 c78:	28 0f       	add	r18, r24
 c7a:	39 1f       	adc	r19, r25
 c7c:	80 91 7e 01 	lds	r24, 0x017E
 c80:	90 91 7f 01 	lds	r25, 0x017F
 c84:	82 17       	cp	r24, r18
 c86:	93 07       	cpc	r25, r19
 c88:	79 f5       	brne	.+94     	; 0xce8 <free+0x92>
 c8a:	f0 93 7f 01 	sts	0x017F, r31
 c8e:	e0 93 7e 01 	sts	0x017E, r30
 c92:	6d c0       	rjmp	.+218    	; 0xd6e <free+0x118>
 c94:	de 01       	movw	r26, r28
 c96:	20 e0       	ldi	r18, 0x00	; 0
 c98:	30 e0       	ldi	r19, 0x00	; 0
 c9a:	ae 17       	cp	r26, r30
 c9c:	bf 07       	cpc	r27, r31
 c9e:	50 f4       	brcc	.+20     	; 0xcb4 <free+0x5e>
 ca0:	12 96       	adiw	r26, 0x02	; 2
 ca2:	4d 91       	ld	r20, X+
 ca4:	5c 91       	ld	r21, X
 ca6:	13 97       	sbiw	r26, 0x03	; 3
 ca8:	9d 01       	movw	r18, r26
 caa:	41 15       	cp	r20, r1
 cac:	51 05       	cpc	r21, r1
 cae:	09 f1       	breq	.+66     	; 0xcf2 <free+0x9c>
 cb0:	da 01       	movw	r26, r20
 cb2:	f3 cf       	rjmp	.-26     	; 0xc9a <free+0x44>
 cb4:	b3 83       	std	Z+3, r27	; 0x03
 cb6:	a2 83       	std	Z+2, r26	; 0x02
 cb8:	40 81       	ld	r20, Z
 cba:	51 81       	ldd	r21, Z+1	; 0x01
 cbc:	84 0f       	add	r24, r20
 cbe:	95 1f       	adc	r25, r21
 cc0:	8a 17       	cp	r24, r26
 cc2:	9b 07       	cpc	r25, r27
 cc4:	71 f4       	brne	.+28     	; 0xce2 <free+0x8c>
 cc6:	8d 91       	ld	r24, X+
 cc8:	9c 91       	ld	r25, X
 cca:	11 97       	sbiw	r26, 0x01	; 1
 ccc:	84 0f       	add	r24, r20
 cce:	95 1f       	adc	r25, r21
 cd0:	02 96       	adiw	r24, 0x02	; 2
 cd2:	91 83       	std	Z+1, r25	; 0x01
 cd4:	80 83       	st	Z, r24
 cd6:	12 96       	adiw	r26, 0x02	; 2
 cd8:	8d 91       	ld	r24, X+
 cda:	9c 91       	ld	r25, X
 cdc:	13 97       	sbiw	r26, 0x03	; 3
 cde:	93 83       	std	Z+3, r25	; 0x03
 ce0:	82 83       	std	Z+2, r24	; 0x02
 ce2:	21 15       	cp	r18, r1
 ce4:	31 05       	cpc	r19, r1
 ce6:	29 f4       	brne	.+10     	; 0xcf2 <free+0x9c>
 ce8:	f0 93 81 01 	sts	0x0181, r31
 cec:	e0 93 80 01 	sts	0x0180, r30
 cf0:	3e c0       	rjmp	.+124    	; 0xd6e <free+0x118>
 cf2:	d9 01       	movw	r26, r18
 cf4:	13 96       	adiw	r26, 0x03	; 3
 cf6:	fc 93       	st	X, r31
 cf8:	ee 93       	st	-X, r30
 cfa:	12 97       	sbiw	r26, 0x02	; 2
 cfc:	4d 91       	ld	r20, X+
 cfe:	5d 91       	ld	r21, X+
 d00:	a4 0f       	add	r26, r20
 d02:	b5 1f       	adc	r27, r21
 d04:	ea 17       	cp	r30, r26
 d06:	fb 07       	cpc	r31, r27
 d08:	79 f4       	brne	.+30     	; 0xd28 <free+0xd2>
 d0a:	80 81       	ld	r24, Z
 d0c:	91 81       	ldd	r25, Z+1	; 0x01
 d0e:	84 0f       	add	r24, r20
 d10:	95 1f       	adc	r25, r21
 d12:	02 96       	adiw	r24, 0x02	; 2
 d14:	d9 01       	movw	r26, r18
 d16:	11 96       	adiw	r26, 0x01	; 1
 d18:	9c 93       	st	X, r25
 d1a:	8e 93       	st	-X, r24
 d1c:	82 81       	ldd	r24, Z+2	; 0x02
 d1e:	93 81       	ldd	r25, Z+3	; 0x03
 d20:	13 96       	adiw	r26, 0x03	; 3
 d22:	9c 93       	st	X, r25
 d24:	8e 93       	st	-X, r24
 d26:	12 97       	sbiw	r26, 0x02	; 2
 d28:	e0 e0       	ldi	r30, 0x00	; 0
 d2a:	f0 e0       	ldi	r31, 0x00	; 0
 d2c:	8a 81       	ldd	r24, Y+2	; 0x02
 d2e:	9b 81       	ldd	r25, Y+3	; 0x03
 d30:	00 97       	sbiw	r24, 0x00	; 0
 d32:	19 f0       	breq	.+6      	; 0xd3a <free+0xe4>
 d34:	fe 01       	movw	r30, r28
 d36:	ec 01       	movw	r28, r24
 d38:	f9 cf       	rjmp	.-14     	; 0xd2c <free+0xd6>
 d3a:	ce 01       	movw	r24, r28
 d3c:	02 96       	adiw	r24, 0x02	; 2
 d3e:	28 81       	ld	r18, Y
 d40:	39 81       	ldd	r19, Y+1	; 0x01
 d42:	82 0f       	add	r24, r18
 d44:	93 1f       	adc	r25, r19
 d46:	20 91 7e 01 	lds	r18, 0x017E
 d4a:	30 91 7f 01 	lds	r19, 0x017F
 d4e:	28 17       	cp	r18, r24
 d50:	39 07       	cpc	r19, r25
 d52:	69 f4       	brne	.+26     	; 0xd6e <free+0x118>
 d54:	30 97       	sbiw	r30, 0x00	; 0
 d56:	29 f4       	brne	.+10     	; 0xd62 <free+0x10c>
 d58:	10 92 81 01 	sts	0x0181, r1
 d5c:	10 92 80 01 	sts	0x0180, r1
 d60:	02 c0       	rjmp	.+4      	; 0xd66 <free+0x110>
 d62:	13 82       	std	Z+3, r1	; 0x03
 d64:	12 82       	std	Z+2, r1	; 0x02
 d66:	d0 93 7f 01 	sts	0x017F, r29
 d6a:	c0 93 7e 01 	sts	0x017E, r28
 d6e:	df 91       	pop	r29
 d70:	cf 91       	pop	r28
 d72:	08 95       	ret

00000d74 <strnlen_P>:
 d74:	fc 01       	movw	r30, r24
 d76:	05 90       	lpm	r0, Z+
 d78:	61 50       	subi	r22, 0x01	; 1
 d7a:	70 40       	sbci	r23, 0x00	; 0
 d7c:	01 10       	cpse	r0, r1
 d7e:	d8 f7       	brcc	.-10     	; 0xd76 <strnlen_P+0x2>
 d80:	80 95       	com	r24
 d82:	90 95       	com	r25
 d84:	8e 0f       	add	r24, r30
 d86:	9f 1f       	adc	r25, r31
 d88:	08 95       	ret

00000d8a <memset>:
 d8a:	dc 01       	movw	r26, r24
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <memset+0x6>
 d8e:	6d 93       	st	X+, r22
 d90:	41 50       	subi	r20, 0x01	; 1
 d92:	50 40       	sbci	r21, 0x00	; 0
 d94:	e0 f7       	brcc	.-8      	; 0xd8e <memset+0x4>
 d96:	08 95       	ret

00000d98 <strnlen>:
 d98:	fc 01       	movw	r30, r24
 d9a:	61 50       	subi	r22, 0x01	; 1
 d9c:	70 40       	sbci	r23, 0x00	; 0
 d9e:	01 90       	ld	r0, Z+
 da0:	01 10       	cpse	r0, r1
 da2:	d8 f7       	brcc	.-10     	; 0xd9a <strnlen+0x2>
 da4:	80 95       	com	r24
 da6:	90 95       	com	r25
 da8:	8e 0f       	add	r24, r30
 daa:	9f 1f       	adc	r25, r31
 dac:	08 95       	ret

00000dae <fputc>:
 dae:	0f 93       	push	r16
 db0:	1f 93       	push	r17
 db2:	cf 93       	push	r28
 db4:	df 93       	push	r29
 db6:	18 2f       	mov	r17, r24
 db8:	09 2f       	mov	r16, r25
 dba:	eb 01       	movw	r28, r22
 dbc:	8b 81       	ldd	r24, Y+3	; 0x03
 dbe:	81 fd       	sbrc	r24, 1
 dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <fputc+0x1a>
 dc2:	8f ef       	ldi	r24, 0xFF	; 255
 dc4:	9f ef       	ldi	r25, 0xFF	; 255
 dc6:	20 c0       	rjmp	.+64     	; 0xe08 <fputc+0x5a>
 dc8:	82 ff       	sbrs	r24, 2
 dca:	10 c0       	rjmp	.+32     	; 0xdec <fputc+0x3e>
 dcc:	4e 81       	ldd	r20, Y+6	; 0x06
 dce:	5f 81       	ldd	r21, Y+7	; 0x07
 dd0:	2c 81       	ldd	r18, Y+4	; 0x04
 dd2:	3d 81       	ldd	r19, Y+5	; 0x05
 dd4:	42 17       	cp	r20, r18
 dd6:	53 07       	cpc	r21, r19
 dd8:	7c f4       	brge	.+30     	; 0xdf8 <fputc+0x4a>
 dda:	e8 81       	ld	r30, Y
 ddc:	f9 81       	ldd	r31, Y+1	; 0x01
 dde:	9f 01       	movw	r18, r30
 de0:	2f 5f       	subi	r18, 0xFF	; 255
 de2:	3f 4f       	sbci	r19, 0xFF	; 255
 de4:	39 83       	std	Y+1, r19	; 0x01
 de6:	28 83       	st	Y, r18
 de8:	10 83       	st	Z, r17
 dea:	06 c0       	rjmp	.+12     	; 0xdf8 <fputc+0x4a>
 dec:	e8 85       	ldd	r30, Y+8	; 0x08
 dee:	f9 85       	ldd	r31, Y+9	; 0x09
 df0:	81 2f       	mov	r24, r17
 df2:	09 95       	icall
 df4:	89 2b       	or	r24, r25
 df6:	29 f7       	brne	.-54     	; 0xdc2 <fputc+0x14>
 df8:	2e 81       	ldd	r18, Y+6	; 0x06
 dfa:	3f 81       	ldd	r19, Y+7	; 0x07
 dfc:	2f 5f       	subi	r18, 0xFF	; 255
 dfe:	3f 4f       	sbci	r19, 0xFF	; 255
 e00:	3f 83       	std	Y+7, r19	; 0x07
 e02:	2e 83       	std	Y+6, r18	; 0x06
 e04:	81 2f       	mov	r24, r17
 e06:	90 2f       	mov	r25, r16
 e08:	df 91       	pop	r29
 e0a:	cf 91       	pop	r28
 e0c:	1f 91       	pop	r17
 e0e:	0f 91       	pop	r16
 e10:	08 95       	ret

00000e12 <__ultoa_invert>:
 e12:	fa 01       	movw	r30, r20
 e14:	aa 27       	eor	r26, r26
 e16:	28 30       	cpi	r18, 0x08	; 8
 e18:	51 f1       	breq	.+84     	; 0xe6e <__ultoa_invert+0x5c>
 e1a:	20 31       	cpi	r18, 0x10	; 16
 e1c:	81 f1       	breq	.+96     	; 0xe7e <__ultoa_invert+0x6c>
 e1e:	e8 94       	clt
 e20:	6f 93       	push	r22
 e22:	6e 7f       	andi	r22, 0xFE	; 254
 e24:	6e 5f       	subi	r22, 0xFE	; 254
 e26:	7f 4f       	sbci	r23, 0xFF	; 255
 e28:	8f 4f       	sbci	r24, 0xFF	; 255
 e2a:	9f 4f       	sbci	r25, 0xFF	; 255
 e2c:	af 4f       	sbci	r26, 0xFF	; 255
 e2e:	b1 e0       	ldi	r27, 0x01	; 1
 e30:	3e d0       	rcall	.+124    	; 0xeae <__ultoa_invert+0x9c>
 e32:	b4 e0       	ldi	r27, 0x04	; 4
 e34:	3c d0       	rcall	.+120    	; 0xeae <__ultoa_invert+0x9c>
 e36:	67 0f       	add	r22, r23
 e38:	78 1f       	adc	r23, r24
 e3a:	89 1f       	adc	r24, r25
 e3c:	9a 1f       	adc	r25, r26
 e3e:	a1 1d       	adc	r26, r1
 e40:	68 0f       	add	r22, r24
 e42:	79 1f       	adc	r23, r25
 e44:	8a 1f       	adc	r24, r26
 e46:	91 1d       	adc	r25, r1
 e48:	a1 1d       	adc	r26, r1
 e4a:	6a 0f       	add	r22, r26
 e4c:	71 1d       	adc	r23, r1
 e4e:	81 1d       	adc	r24, r1
 e50:	91 1d       	adc	r25, r1
 e52:	a1 1d       	adc	r26, r1
 e54:	20 d0       	rcall	.+64     	; 0xe96 <__ultoa_invert+0x84>
 e56:	09 f4       	brne	.+2      	; 0xe5a <__ultoa_invert+0x48>
 e58:	68 94       	set
 e5a:	3f 91       	pop	r19
 e5c:	2a e0       	ldi	r18, 0x0A	; 10
 e5e:	26 9f       	mul	r18, r22
 e60:	11 24       	eor	r1, r1
 e62:	30 19       	sub	r19, r0
 e64:	30 5d       	subi	r19, 0xD0	; 208
 e66:	31 93       	st	Z+, r19
 e68:	de f6       	brtc	.-74     	; 0xe20 <__ultoa_invert+0xe>
 e6a:	cf 01       	movw	r24, r30
 e6c:	08 95       	ret
 e6e:	46 2f       	mov	r20, r22
 e70:	47 70       	andi	r20, 0x07	; 7
 e72:	40 5d       	subi	r20, 0xD0	; 208
 e74:	41 93       	st	Z+, r20
 e76:	b3 e0       	ldi	r27, 0x03	; 3
 e78:	0f d0       	rcall	.+30     	; 0xe98 <__ultoa_invert+0x86>
 e7a:	c9 f7       	brne	.-14     	; 0xe6e <__ultoa_invert+0x5c>
 e7c:	f6 cf       	rjmp	.-20     	; 0xe6a <__ultoa_invert+0x58>
 e7e:	46 2f       	mov	r20, r22
 e80:	4f 70       	andi	r20, 0x0F	; 15
 e82:	40 5d       	subi	r20, 0xD0	; 208
 e84:	4a 33       	cpi	r20, 0x3A	; 58
 e86:	18 f0       	brcs	.+6      	; 0xe8e <__ultoa_invert+0x7c>
 e88:	49 5d       	subi	r20, 0xD9	; 217
 e8a:	31 fd       	sbrc	r19, 1
 e8c:	40 52       	subi	r20, 0x20	; 32
 e8e:	41 93       	st	Z+, r20
 e90:	02 d0       	rcall	.+4      	; 0xe96 <__ultoa_invert+0x84>
 e92:	a9 f7       	brne	.-22     	; 0xe7e <__ultoa_invert+0x6c>
 e94:	ea cf       	rjmp	.-44     	; 0xe6a <__ultoa_invert+0x58>
 e96:	b4 e0       	ldi	r27, 0x04	; 4
 e98:	a6 95       	lsr	r26
 e9a:	97 95       	ror	r25
 e9c:	87 95       	ror	r24
 e9e:	77 95       	ror	r23
 ea0:	67 95       	ror	r22
 ea2:	ba 95       	dec	r27
 ea4:	c9 f7       	brne	.-14     	; 0xe98 <__ultoa_invert+0x86>
 ea6:	00 97       	sbiw	r24, 0x00	; 0
 ea8:	61 05       	cpc	r22, r1
 eaa:	71 05       	cpc	r23, r1
 eac:	08 95       	ret
 eae:	9b 01       	movw	r18, r22
 eb0:	ac 01       	movw	r20, r24
 eb2:	0a 2e       	mov	r0, r26
 eb4:	06 94       	lsr	r0
 eb6:	57 95       	ror	r21
 eb8:	47 95       	ror	r20
 eba:	37 95       	ror	r19
 ebc:	27 95       	ror	r18
 ebe:	ba 95       	dec	r27
 ec0:	c9 f7       	brne	.-14     	; 0xeb4 <__ultoa_invert+0xa2>
 ec2:	62 0f       	add	r22, r18
 ec4:	73 1f       	adc	r23, r19
 ec6:	84 1f       	adc	r24, r20
 ec8:	95 1f       	adc	r25, r21
 eca:	a0 1d       	adc	r26, r0
 ecc:	08 95       	ret

00000ece <__prologue_saves__>:
 ece:	2f 92       	push	r2
 ed0:	3f 92       	push	r3
 ed2:	4f 92       	push	r4
 ed4:	5f 92       	push	r5
 ed6:	6f 92       	push	r6
 ed8:	7f 92       	push	r7
 eda:	8f 92       	push	r8
 edc:	9f 92       	push	r9
 ede:	af 92       	push	r10
 ee0:	bf 92       	push	r11
 ee2:	cf 92       	push	r12
 ee4:	df 92       	push	r13
 ee6:	ef 92       	push	r14
 ee8:	ff 92       	push	r15
 eea:	0f 93       	push	r16
 eec:	1f 93       	push	r17
 eee:	cf 93       	push	r28
 ef0:	df 93       	push	r29
 ef2:	cd b7       	in	r28, 0x3d	; 61
 ef4:	de b7       	in	r29, 0x3e	; 62
 ef6:	ca 1b       	sub	r28, r26
 ef8:	db 0b       	sbc	r29, r27
 efa:	0f b6       	in	r0, 0x3f	; 63
 efc:	f8 94       	cli
 efe:	de bf       	out	0x3e, r29	; 62
 f00:	0f be       	out	0x3f, r0	; 63
 f02:	cd bf       	out	0x3d, r28	; 61
 f04:	09 94       	ijmp

00000f06 <__epilogue_restores__>:
 f06:	2a 88       	ldd	r2, Y+18	; 0x12
 f08:	39 88       	ldd	r3, Y+17	; 0x11
 f0a:	48 88       	ldd	r4, Y+16	; 0x10
 f0c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f0e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f10:	7d 84       	ldd	r7, Y+13	; 0x0d
 f12:	8c 84       	ldd	r8, Y+12	; 0x0c
 f14:	9b 84       	ldd	r9, Y+11	; 0x0b
 f16:	aa 84       	ldd	r10, Y+10	; 0x0a
 f18:	b9 84       	ldd	r11, Y+9	; 0x09
 f1a:	c8 84       	ldd	r12, Y+8	; 0x08
 f1c:	df 80       	ldd	r13, Y+7	; 0x07
 f1e:	ee 80       	ldd	r14, Y+6	; 0x06
 f20:	fd 80       	ldd	r15, Y+5	; 0x05
 f22:	0c 81       	ldd	r16, Y+4	; 0x04
 f24:	1b 81       	ldd	r17, Y+3	; 0x03
 f26:	aa 81       	ldd	r26, Y+2	; 0x02
 f28:	b9 81       	ldd	r27, Y+1	; 0x01
 f2a:	ce 0f       	add	r28, r30
 f2c:	d1 1d       	adc	r29, r1
 f2e:	0f b6       	in	r0, 0x3f	; 63
 f30:	f8 94       	cli
 f32:	de bf       	out	0x3e, r29	; 62
 f34:	0f be       	out	0x3f, r0	; 63
 f36:	cd bf       	out	0x3d, r28	; 61
 f38:	ed 01       	movw	r28, r26
 f3a:	08 95       	ret

00000f3c <_exit>:
 f3c:	f8 94       	cli

00000f3e <__stop_program>:
 f3e:	ff cf       	rjmp	.-2      	; 0xf3e <__stop_program>
