
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000000e0  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000029a  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000203  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000231  00000000  00000000  0000067b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000078  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a7  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000038  00000000  00000000  00000acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  6c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 ee       	ldi	r30, 0xE0	; 224
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>
  92:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  96:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	int i = 1;
	int j = 1;
	UartInit();
  9e:	0e 94 66 00 	call	0xcc	; 0xcc <UartInit>
    while(1)
    {
		// Buttons input (the whole port)
		DDRA = 0;
		// Leds output (the whole port)
		DDRB = 0xFF;
  a2:	cf ef       	ldi	r28, 0xFF	; 255
	int j = 1;
	UartInit();
    while(1)
    {
		// Buttons input (the whole port)
		DDRA = 0;
  a4:	1a ba       	out	0x1a, r1	; 26
		// Leds output (the whole port)
		DDRB = 0xFF;
  a6:	c7 bb       	out	0x17, r28	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	8f e7       	ldi	r24, 0x7F	; 127
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x10>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x1a>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x1c>
#include "UART.h"
//#include "UART.c"

void testest2(unsigned char x)
{
	USART_Transmit(x);
  ba:	80 91 00 01 	lds	r24, 0x0100
  be:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_Transmit>
  c2:	f0 cf       	rjmp	.-32     	; 0xa4 <main+0x6>

000000c4 <USART_Transmit>:
	}

void USART_Transmit( unsigned char data )
	{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
  c4:	5d 9b       	sbis	0x0b, 5	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
  c8:	8c b9       	out	0x0c, r24	; 12
  ca:	08 95       	ret

000000cc <UartInit>:
	//return UDR;
	
//}
void UartInit(){
	//Set Baud rate 9600
	UBRR0H = (unsigned char)(MYUBRR>>8);	// Setter de 8 mest signifikante bitene
  cc:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBRR);	// Setter de 8 minst signifikante bitene
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	8a b9       	out	0x0a, r24	; 10
	// 8N2
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
  d6:	8e e8       	ldi	r24, 0x8E	; 142
  d8:	80 bd       	out	0x20, r24	; 32
  da:	08 95       	ret

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
