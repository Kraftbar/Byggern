
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000584  00000618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000584  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  0000061e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f57  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ee  00000000  00000000  0000169d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e4  00000000  00000000  00001c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036b  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c2  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00002a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e8       	ldi	r30, 0x84	; 132
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 c0 02 	jmp	0x580	; 0x580 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:



void ADC_init()
{	
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <main>:

unsigned char TestChar = 'k';

int main(void)
{
	UartInit();
  bc:	0e 94 1d 01 	call	0x23a	; 0x23a <UartInit>
	
	SRAM_init();
  c0:	0e 94 0e 01 	call	0x21c	; 0x21c <SRAM_init>
	ADC_init();
  c4:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	init_OLED();
  c8:	0e 94 c8 00 	call	0x190	; 0x190 <init_OLED>
	
	DDRB = 0x00;	//input
  cc:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;	//pull-up
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	88 bb       	out	0x18, r24	; 24

	//calibrate();
	
	unsigned int i = 0;
	int j = 1;
	write_c(0xB0);
  d2:	80 eb       	ldi	r24, 0xB0	; 176
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 08 01 	call	0x210	; 0x210 <write_c>
	write_c(0x00);
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 08 01 	call	0x210	; 0x210 <write_c>
	write_c(0x10);
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 08 01 	call	0x210	; 0x210 <write_c>
	write_d(0x00);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
	write_d(0b00000000);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
	write_d(0b01111101);
  fa:	8d e7       	ldi	r24, 0x7D	; 125
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
	write_d(0x00);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
		//write_c(0x20);		//Adressing mode
		//write_c(0b10);		//Page adressing mode
		
		//write_c(0xA0);
		
		if (PINB & (1<<PINB0)){
 10a:	0f 2e       	mov	r0, r31
 10c:	f0 eb       	ldi	r31, 0xB0	; 176
 10e:	ef 2e       	mov	r14, r31
 110:	f0 2d       	mov	r31, r0
 112:	f1 2c       	mov	r15, r1
 114:	b0 9b       	sbis	0x16, 0	; 22
 116:	37 c0       	rjmp	.+110    	; 0x186 <main+0xca>
 118:	0e 2d       	mov	r16, r14
 11a:	1f 2d       	mov	r17, r15
			for (int i = 0; i<8; i++){ 
				write_c(0xB0+i);
 11c:	c8 01       	movw	r24, r16
 11e:	0e 94 08 01 	call	0x210	; 0x210 <write_c>
				write_c(0x00);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 08 01 	call	0x210	; 0x210 <write_c>
				write_c(0x10);
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 08 01 	call	0x210	; 0x210 <write_c>
 132:	c0 e1       	ldi	r28, 0x10	; 16
 134:	d0 e0       	ldi	r29, 0x00	; 0
				for (int j = 0; j<16; j++){
					//for (int k = 1; k<8; k++){
						//printf("%i \n", font8[k]);
						
						write_d(font8[d][0]);
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
						write_d(font8[d][1]);
 13e:	8f e7       	ldi	r24, 0x7F	; 127
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
						write_d(font8[d][2]);
 146:	8f e7       	ldi	r24, 0x7F	; 127
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
						write_d(font8[d][3]);
 14e:	80 e1       	ldi	r24, 0x10	; 16
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
						write_d(font8[d][4]);
 156:	88 e3       	ldi	r24, 0x38	; 56
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
						write_d(font8[d][5]);
 15e:	8c e6       	ldi	r24, 0x6C	; 108
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
						write_d(font8[d][6]);
 166:	84 e4       	ldi	r24, 0x44	; 68
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
						write_d(font8[d][7]);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 0b 01 	call	0x216	; 0x216 <write_d>
 176:	21 97       	sbiw	r28, 0x01	; 1
		if (PINB & (1<<PINB0)){
			for (int i = 0; i<8; i++){ 
				write_c(0xB0+i);
				write_c(0x00);
				write_c(0x10);
				for (int j = 0; j<16; j++){
 178:	20 97       	sbiw	r28, 0x00	; 0
 17a:	e9 f6       	brne	.-70     	; 0x136 <main+0x7a>
 17c:	0f 5f       	subi	r16, 0xFF	; 255
 17e:	1f 4f       	sbci	r17, 0xFF	; 255
		//write_c(0b10);		//Page adressing mode
		
		//write_c(0xA0);
		
		if (PINB & (1<<PINB0)){
			for (int i = 0; i<8; i++){ 
 180:	08 3b       	cpi	r16, 0xB8	; 184
 182:	11 05       	cpc	r17, r1
 184:	59 f6       	brne	.-106    	; 0x11c <main+0x60>

			}
		//_delay_ms(100);
		
		}
		if (PINB & (1<<PINB1)){
 186:	b1 9b       	sbis	0x16, 1	; 22
 188:	c5 cf       	rjmp	.-118    	; 0x114 <main+0x58>
			OLED_Reset();
 18a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <OLED_Reset>
 18e:	c2 cf       	rjmp	.-124    	; 0x114 <main+0x58>

00000190 <init_OLED>:
}

void write_c(unsigned char out_command)
{
	volatile char *ext_OLEDc = (char *) 0x1000;
	*ext_OLEDc = out_command;
 190:	e0 e0       	ldi	r30, 0x00	; 0
 192:	f0 e1       	ldi	r31, 0x10	; 16
 194:	8e ea       	ldi	r24, 0xAE	; 174
 196:	80 83       	st	Z, r24
 198:	81 ea       	ldi	r24, 0xA1	; 161
 19a:	80 83       	st	Z, r24
 19c:	8a ed       	ldi	r24, 0xDA	; 218
 19e:	80 83       	st	Z, r24
 1a0:	82 e1       	ldi	r24, 0x12	; 18
 1a2:	80 83       	st	Z, r24
 1a4:	88 ec       	ldi	r24, 0xC8	; 200
 1a6:	80 83       	st	Z, r24
 1a8:	88 ea       	ldi	r24, 0xA8	; 168
 1aa:	80 83       	st	Z, r24
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	80 83       	st	Z, r24
 1b0:	85 ed       	ldi	r24, 0xD5	; 213
 1b2:	80 83       	st	Z, r24
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	80 83       	st	Z, r24
 1b8:	81 e8       	ldi	r24, 0x81	; 129
 1ba:	80 83       	st	Z, r24
 1bc:	80 e5       	ldi	r24, 0x50	; 80
 1be:	80 83       	st	Z, r24
 1c0:	89 ed       	ldi	r24, 0xD9	; 217
 1c2:	80 83       	st	Z, r24
 1c4:	81 e2       	ldi	r24, 0x21	; 33
 1c6:	80 83       	st	Z, r24
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	80 83       	st	Z, r24
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 83       	st	Z, r24
 1d0:	8b ed       	ldi	r24, 0xDB	; 219
 1d2:	80 83       	st	Z, r24
 1d4:	80 e3       	ldi	r24, 0x30	; 48
 1d6:	80 83       	st	Z, r24
 1d8:	8d ea       	ldi	r24, 0xAD	; 173
 1da:	80 83       	st	Z, r24
 1dc:	10 82       	st	Z, r1
 1de:	84 ea       	ldi	r24, 0xA4	; 164
 1e0:	80 83       	st	Z, r24
 1e2:	86 ea       	ldi	r24, 0xA6	; 166
 1e4:	80 83       	st	Z, r24
 1e6:	8f ea       	ldi	r24, 0xAF	; 175
 1e8:	80 83       	st	Z, r24
 1ea:	08 95       	ret

000001ec <OLED_Reset>:
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void OLED_Reset(void)
{
 1ec:	20 eb       	ldi	r18, 0xB0	; 176
}

void write_c(unsigned char out_command)
{
	volatile char *ext_OLEDc = (char *) 0x1000;
	*ext_OLEDc = out_command;
 1ee:	a0 e0       	ldi	r26, 0x00	; 0
 1f0:	b0 e1       	ldi	r27, 0x10	; 16
 1f2:	40 e8       	ldi	r20, 0x80	; 128
 1f4:	30 e0       	ldi	r19, 0x00	; 0
}

void write_d(unsigned char out_data)
{
	volatile char *ext_OLEDd = (char *) 0x1200;
	*ext_OLEDd = out_data;
 1f6:	e0 e0       	ldi	r30, 0x00	; 0
 1f8:	f2 e1       	ldi	r31, 0x12	; 18
}

void write_c(unsigned char out_command)
{
	volatile char *ext_OLEDc = (char *) 0x1000;
	*ext_OLEDc = out_command;
 1fa:	2c 93       	st	X, r18
 1fc:	84 2f       	mov	r24, r20
 1fe:	93 2f       	mov	r25, r19
}

void write_d(unsigned char out_data)
{
	volatile char *ext_OLEDd = (char *) 0x1200;
	*ext_OLEDd = out_data;
 200:	10 82       	st	Z, r1
 202:	01 97       	sbiw	r24, 0x01	; 1

void OLED_Reset(void)
{
	for (int i = 0; i<8; i++){
		write_c(0xB0+i);
		for (int j = 0; j<128; j++){
 204:	00 97       	sbiw	r24, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <OLED_Reset+0x14>
 208:	2f 5f       	subi	r18, 0xFF	; 255
	write_c(0xaf);        //  display  on
}

void OLED_Reset(void)
{
	for (int i = 0; i<8; i++){
 20a:	28 3b       	cpi	r18, 0xB8	; 184
 20c:	b1 f7       	brne	.-20     	; 0x1fa <OLED_Reset+0xe>
		write_c(0xB0+i);
		for (int j = 0; j<128; j++){
			write_d(0x00);
		}
	}
}
 20e:	08 95       	ret

00000210 <write_c>:
}

void write_c(unsigned char out_command)
{
	volatile char *ext_OLEDc = (char *) 0x1000;
	*ext_OLEDc = out_command;
 210:	80 93 00 10 	sts	0x1000, r24
 214:	08 95       	ret

00000216 <write_d>:
}

void write_d(unsigned char out_data)
{
	volatile char *ext_OLEDd = (char *) 0x1200;
	*ext_OLEDd = out_data;
 216:	80 93 00 12 	sts	0x1200, r24
 21a:	08 95       	ret

0000021c <SRAM_init>:
 21c:	85 b7       	in	r24, 0x35	; 53
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	85 bf       	out	0x35, r24	; 53
 222:	80 b7       	in	r24, 0x30	; 48
 224:	80 62       	ori	r24, 0x20	; 32
 226:	80 bf       	out	0x30, r24	; 48
 228:	08 95       	ret

0000022a <USART_Receive>:


unsigned char USART_Receive(void)
	{
	//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 22a:	5f 9b       	sbis	0x0b, 7	; 11
 22c:	fe cf       	rjmp	.-4      	; 0x22a <USART_Receive>
	
	//Get and return received data from buffer
	return UDR0;
 22e:	8c b1       	in	r24, 0x0c	; 12
	}
 230:	08 95       	ret

00000232 <USART_Transmit>:

void USART_Transmit( unsigned char data )
	{
	//Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
 232:	5d 9b       	sbis	0x0b, 5	; 11
 234:	fe cf       	rjmp	.-4      	; 0x232 <USART_Transmit>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 236:	8c b9       	out	0x0c, r24	; 12
 238:	08 95       	ret

0000023a <UartInit>:

	
//}
void UartInit(){
	//Set Baud rate 9600
	UBRR0H = (unsigned char)(MYUBRR>>8);	// Setter de 8 mest signifikante bitene
 23a:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(MYUBRR);	// Setter de 8 minst signifikante bitene
 23c:	8f e1       	ldi	r24, 0x1F	; 31
 23e:	89 b9       	out	0x09, r24	; 9
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 240:	88 e1       	ldi	r24, 0x18	; 24
 242:	8a b9       	out	0x0a, r24	; 10
	// 8N2
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 244:	8e e8       	ldi	r24, 0x8E	; 142
 246:	80 bd       	out	0x20, r24	; 32
	fdevopen(&USART_Transmit, &USART_Receive);
 248:	65 e1       	ldi	r22, 0x15	; 21
 24a:	71 e0       	ldi	r23, 0x01	; 1
 24c:	89 e1       	ldi	r24, 0x19	; 25
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 2b 01 	call	0x256	; 0x256 <fdevopen>
 254:	08 95       	ret

00000256 <fdevopen>:
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	8b 01       	movw	r16, r22
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	31 f4       	brne	.+12     	; 0x272 <fdevopen+0x1c>
 266:	61 15       	cp	r22, r1
 268:	71 05       	cpc	r23, r1
 26a:	19 f4       	brne	.+6      	; 0x272 <fdevopen+0x1c>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	38 c0       	rjmp	.+112    	; 0x2e2 <fdevopen+0x8c>
 272:	6e e0       	ldi	r22, 0x0E	; 14
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 76 01 	call	0x2ec	; 0x2ec <calloc>
 27e:	fc 01       	movw	r30, r24
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	a1 f3       	breq	.-24     	; 0x26c <fdevopen+0x16>
 284:	80 e8       	ldi	r24, 0x80	; 128
 286:	83 83       	std	Z+3, r24	; 0x03
 288:	01 15       	cp	r16, r1
 28a:	11 05       	cpc	r17, r1
 28c:	71 f0       	breq	.+28     	; 0x2aa <fdevopen+0x54>
 28e:	13 87       	std	Z+11, r17	; 0x0b
 290:	02 87       	std	Z+10, r16	; 0x0a
 292:	81 e8       	ldi	r24, 0x81	; 129
 294:	83 83       	std	Z+3, r24	; 0x03
 296:	80 91 06 01 	lds	r24, 0x0106
 29a:	90 91 07 01 	lds	r25, 0x0107
 29e:	89 2b       	or	r24, r25
 2a0:	21 f4       	brne	.+8      	; 0x2aa <fdevopen+0x54>
 2a2:	f0 93 07 01 	sts	0x0107, r31
 2a6:	e0 93 06 01 	sts	0x0106, r30
 2aa:	20 97       	sbiw	r28, 0x00	; 0
 2ac:	c9 f0       	breq	.+50     	; 0x2e0 <fdevopen+0x8a>
 2ae:	d1 87       	std	Z+9, r29	; 0x09
 2b0:	c0 87       	std	Z+8, r28	; 0x08
 2b2:	83 81       	ldd	r24, Z+3	; 0x03
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	83 83       	std	Z+3, r24	; 0x03
 2b8:	80 91 08 01 	lds	r24, 0x0108
 2bc:	90 91 09 01 	lds	r25, 0x0109
 2c0:	89 2b       	or	r24, r25
 2c2:	71 f4       	brne	.+28     	; 0x2e0 <fdevopen+0x8a>
 2c4:	f0 93 09 01 	sts	0x0109, r31
 2c8:	e0 93 08 01 	sts	0x0108, r30
 2cc:	80 91 0a 01 	lds	r24, 0x010A
 2d0:	90 91 0b 01 	lds	r25, 0x010B
 2d4:	89 2b       	or	r24, r25
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <fdevopen+0x8a>
 2d8:	f0 93 0b 01 	sts	0x010B, r31
 2dc:	e0 93 0a 01 	sts	0x010A, r30
 2e0:	cf 01       	movw	r24, r30
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <calloc>:
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	86 9f       	mul	r24, r22
 2f6:	80 01       	movw	r16, r0
 2f8:	87 9f       	mul	r24, r23
 2fa:	10 0d       	add	r17, r0
 2fc:	96 9f       	mul	r25, r22
 2fe:	10 0d       	add	r17, r0
 300:	11 24       	eor	r1, r1
 302:	c8 01       	movw	r24, r16
 304:	0e 94 92 01 	call	0x324	; 0x324 <malloc>
 308:	ec 01       	movw	r28, r24
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	29 f0       	breq	.+10     	; 0x318 <calloc+0x2c>
 30e:	a8 01       	movw	r20, r16
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	0e 94 b9 02 	call	0x572	; 0x572 <memset>
 318:	ce 01       	movw	r24, r28
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <malloc>:
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	91 05       	cpc	r25, r1
 32c:	10 f4       	brcc	.+4      	; 0x332 <malloc+0xe>
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	e0 91 0e 01 	lds	r30, 0x010E
 336:	f0 91 0f 01 	lds	r31, 0x010F
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	a0 e0       	ldi	r26, 0x00	; 0
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	30 97       	sbiw	r30, 0x00	; 0
 344:	39 f1       	breq	.+78     	; 0x394 <malloc+0x70>
 346:	40 81       	ld	r20, Z
 348:	51 81       	ldd	r21, Z+1	; 0x01
 34a:	48 17       	cp	r20, r24
 34c:	59 07       	cpc	r21, r25
 34e:	b8 f0       	brcs	.+46     	; 0x37e <malloc+0x5a>
 350:	48 17       	cp	r20, r24
 352:	59 07       	cpc	r21, r25
 354:	71 f4       	brne	.+28     	; 0x372 <malloc+0x4e>
 356:	82 81       	ldd	r24, Z+2	; 0x02
 358:	93 81       	ldd	r25, Z+3	; 0x03
 35a:	10 97       	sbiw	r26, 0x00	; 0
 35c:	29 f0       	breq	.+10     	; 0x368 <malloc+0x44>
 35e:	13 96       	adiw	r26, 0x03	; 3
 360:	9c 93       	st	X, r25
 362:	8e 93       	st	-X, r24
 364:	12 97       	sbiw	r26, 0x02	; 2
 366:	2c c0       	rjmp	.+88     	; 0x3c0 <malloc+0x9c>
 368:	90 93 0f 01 	sts	0x010F, r25
 36c:	80 93 0e 01 	sts	0x010E, r24
 370:	27 c0       	rjmp	.+78     	; 0x3c0 <malloc+0x9c>
 372:	21 15       	cp	r18, r1
 374:	31 05       	cpc	r19, r1
 376:	31 f0       	breq	.+12     	; 0x384 <malloc+0x60>
 378:	42 17       	cp	r20, r18
 37a:	53 07       	cpc	r21, r19
 37c:	18 f0       	brcs	.+6      	; 0x384 <malloc+0x60>
 37e:	a9 01       	movw	r20, r18
 380:	db 01       	movw	r26, r22
 382:	01 c0       	rjmp	.+2      	; 0x386 <malloc+0x62>
 384:	ef 01       	movw	r28, r30
 386:	9a 01       	movw	r18, r20
 388:	bd 01       	movw	r22, r26
 38a:	df 01       	movw	r26, r30
 38c:	02 80       	ldd	r0, Z+2	; 0x02
 38e:	f3 81       	ldd	r31, Z+3	; 0x03
 390:	e0 2d       	mov	r30, r0
 392:	d7 cf       	rjmp	.-82     	; 0x342 <malloc+0x1e>
 394:	21 15       	cp	r18, r1
 396:	31 05       	cpc	r19, r1
 398:	f9 f0       	breq	.+62     	; 0x3d8 <malloc+0xb4>
 39a:	28 1b       	sub	r18, r24
 39c:	39 0b       	sbc	r19, r25
 39e:	24 30       	cpi	r18, 0x04	; 4
 3a0:	31 05       	cpc	r19, r1
 3a2:	80 f4       	brcc	.+32     	; 0x3c4 <malloc+0xa0>
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	9b 81       	ldd	r25, Y+3	; 0x03
 3a8:	61 15       	cp	r22, r1
 3aa:	71 05       	cpc	r23, r1
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <malloc+0x92>
 3ae:	fb 01       	movw	r30, r22
 3b0:	93 83       	std	Z+3, r25	; 0x03
 3b2:	82 83       	std	Z+2, r24	; 0x02
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <malloc+0x9a>
 3b6:	90 93 0f 01 	sts	0x010F, r25
 3ba:	80 93 0e 01 	sts	0x010E, r24
 3be:	fe 01       	movw	r30, r28
 3c0:	32 96       	adiw	r30, 0x02	; 2
 3c2:	44 c0       	rjmp	.+136    	; 0x44c <malloc+0x128>
 3c4:	fe 01       	movw	r30, r28
 3c6:	e2 0f       	add	r30, r18
 3c8:	f3 1f       	adc	r31, r19
 3ca:	81 93       	st	Z+, r24
 3cc:	91 93       	st	Z+, r25
 3ce:	22 50       	subi	r18, 0x02	; 2
 3d0:	31 09       	sbc	r19, r1
 3d2:	39 83       	std	Y+1, r19	; 0x01
 3d4:	28 83       	st	Y, r18
 3d6:	3a c0       	rjmp	.+116    	; 0x44c <malloc+0x128>
 3d8:	20 91 0c 01 	lds	r18, 0x010C
 3dc:	30 91 0d 01 	lds	r19, 0x010D
 3e0:	23 2b       	or	r18, r19
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <malloc+0xd0>
 3e4:	20 91 02 01 	lds	r18, 0x0102
 3e8:	30 91 03 01 	lds	r19, 0x0103
 3ec:	30 93 0d 01 	sts	0x010D, r19
 3f0:	20 93 0c 01 	sts	0x010C, r18
 3f4:	20 91 00 01 	lds	r18, 0x0100
 3f8:	30 91 01 01 	lds	r19, 0x0101
 3fc:	21 15       	cp	r18, r1
 3fe:	31 05       	cpc	r19, r1
 400:	41 f4       	brne	.+16     	; 0x412 <malloc+0xee>
 402:	2d b7       	in	r18, 0x3d	; 61
 404:	3e b7       	in	r19, 0x3e	; 62
 406:	40 91 04 01 	lds	r20, 0x0104
 40a:	50 91 05 01 	lds	r21, 0x0105
 40e:	24 1b       	sub	r18, r20
 410:	35 0b       	sbc	r19, r21
 412:	e0 91 0c 01 	lds	r30, 0x010C
 416:	f0 91 0d 01 	lds	r31, 0x010D
 41a:	e2 17       	cp	r30, r18
 41c:	f3 07       	cpc	r31, r19
 41e:	a0 f4       	brcc	.+40     	; 0x448 <malloc+0x124>
 420:	2e 1b       	sub	r18, r30
 422:	3f 0b       	sbc	r19, r31
 424:	28 17       	cp	r18, r24
 426:	39 07       	cpc	r19, r25
 428:	78 f0       	brcs	.+30     	; 0x448 <malloc+0x124>
 42a:	ac 01       	movw	r20, r24
 42c:	4e 5f       	subi	r20, 0xFE	; 254
 42e:	5f 4f       	sbci	r21, 0xFF	; 255
 430:	24 17       	cp	r18, r20
 432:	35 07       	cpc	r19, r21
 434:	48 f0       	brcs	.+18     	; 0x448 <malloc+0x124>
 436:	4e 0f       	add	r20, r30
 438:	5f 1f       	adc	r21, r31
 43a:	50 93 0d 01 	sts	0x010D, r21
 43e:	40 93 0c 01 	sts	0x010C, r20
 442:	81 93       	st	Z+, r24
 444:	91 93       	st	Z+, r25
 446:	02 c0       	rjmp	.+4      	; 0x44c <malloc+0x128>
 448:	e0 e0       	ldi	r30, 0x00	; 0
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	cf 01       	movw	r24, r30
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <free>:
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	09 f4       	brne	.+2      	; 0x45e <free+0xa>
 45c:	87 c0       	rjmp	.+270    	; 0x56c <__stack+0x6d>
 45e:	fc 01       	movw	r30, r24
 460:	32 97       	sbiw	r30, 0x02	; 2
 462:	13 82       	std	Z+3, r1	; 0x03
 464:	12 82       	std	Z+2, r1	; 0x02
 466:	c0 91 0e 01 	lds	r28, 0x010E
 46a:	d0 91 0f 01 	lds	r29, 0x010F
 46e:	20 97       	sbiw	r28, 0x00	; 0
 470:	81 f4       	brne	.+32     	; 0x492 <free+0x3e>
 472:	20 81       	ld	r18, Z
 474:	31 81       	ldd	r19, Z+1	; 0x01
 476:	28 0f       	add	r18, r24
 478:	39 1f       	adc	r19, r25
 47a:	80 91 0c 01 	lds	r24, 0x010C
 47e:	90 91 0d 01 	lds	r25, 0x010D
 482:	82 17       	cp	r24, r18
 484:	93 07       	cpc	r25, r19
 486:	79 f5       	brne	.+94     	; 0x4e6 <free+0x92>
 488:	f0 93 0d 01 	sts	0x010D, r31
 48c:	e0 93 0c 01 	sts	0x010C, r30
 490:	6d c0       	rjmp	.+218    	; 0x56c <__stack+0x6d>
 492:	de 01       	movw	r26, r28
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	ae 17       	cp	r26, r30
 49a:	bf 07       	cpc	r27, r31
 49c:	50 f4       	brcc	.+20     	; 0x4b2 <free+0x5e>
 49e:	12 96       	adiw	r26, 0x02	; 2
 4a0:	4d 91       	ld	r20, X+
 4a2:	5c 91       	ld	r21, X
 4a4:	13 97       	sbiw	r26, 0x03	; 3
 4a6:	9d 01       	movw	r18, r26
 4a8:	41 15       	cp	r20, r1
 4aa:	51 05       	cpc	r21, r1
 4ac:	09 f1       	breq	.+66     	; 0x4f0 <free+0x9c>
 4ae:	da 01       	movw	r26, r20
 4b0:	f3 cf       	rjmp	.-26     	; 0x498 <free+0x44>
 4b2:	b3 83       	std	Z+3, r27	; 0x03
 4b4:	a2 83       	std	Z+2, r26	; 0x02
 4b6:	40 81       	ld	r20, Z
 4b8:	51 81       	ldd	r21, Z+1	; 0x01
 4ba:	84 0f       	add	r24, r20
 4bc:	95 1f       	adc	r25, r21
 4be:	8a 17       	cp	r24, r26
 4c0:	9b 07       	cpc	r25, r27
 4c2:	71 f4       	brne	.+28     	; 0x4e0 <free+0x8c>
 4c4:	8d 91       	ld	r24, X+
 4c6:	9c 91       	ld	r25, X
 4c8:	11 97       	sbiw	r26, 0x01	; 1
 4ca:	84 0f       	add	r24, r20
 4cc:	95 1f       	adc	r25, r21
 4ce:	02 96       	adiw	r24, 0x02	; 2
 4d0:	91 83       	std	Z+1, r25	; 0x01
 4d2:	80 83       	st	Z, r24
 4d4:	12 96       	adiw	r26, 0x02	; 2
 4d6:	8d 91       	ld	r24, X+
 4d8:	9c 91       	ld	r25, X
 4da:	13 97       	sbiw	r26, 0x03	; 3
 4dc:	93 83       	std	Z+3, r25	; 0x03
 4de:	82 83       	std	Z+2, r24	; 0x02
 4e0:	21 15       	cp	r18, r1
 4e2:	31 05       	cpc	r19, r1
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <free+0x9c>
 4e6:	f0 93 0f 01 	sts	0x010F, r31
 4ea:	e0 93 0e 01 	sts	0x010E, r30
 4ee:	3e c0       	rjmp	.+124    	; 0x56c <__stack+0x6d>
 4f0:	d9 01       	movw	r26, r18
 4f2:	13 96       	adiw	r26, 0x03	; 3
 4f4:	fc 93       	st	X, r31
 4f6:	ee 93       	st	-X, r30
 4f8:	12 97       	sbiw	r26, 0x02	; 2
 4fa:	4d 91       	ld	r20, X+
 4fc:	5d 91       	ld	r21, X+
 4fe:	a4 0f       	add	r26, r20
 500:	b5 1f       	adc	r27, r21
 502:	ea 17       	cp	r30, r26
 504:	fb 07       	cpc	r31, r27
 506:	79 f4       	brne	.+30     	; 0x526 <__stack+0x27>
 508:	80 81       	ld	r24, Z
 50a:	91 81       	ldd	r25, Z+1	; 0x01
 50c:	84 0f       	add	r24, r20
 50e:	95 1f       	adc	r25, r21
 510:	02 96       	adiw	r24, 0x02	; 2
 512:	d9 01       	movw	r26, r18
 514:	11 96       	adiw	r26, 0x01	; 1
 516:	9c 93       	st	X, r25
 518:	8e 93       	st	-X, r24
 51a:	82 81       	ldd	r24, Z+2	; 0x02
 51c:	93 81       	ldd	r25, Z+3	; 0x03
 51e:	13 96       	adiw	r26, 0x03	; 3
 520:	9c 93       	st	X, r25
 522:	8e 93       	st	-X, r24
 524:	12 97       	sbiw	r26, 0x02	; 2
 526:	e0 e0       	ldi	r30, 0x00	; 0
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	9b 81       	ldd	r25, Y+3	; 0x03
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	19 f0       	breq	.+6      	; 0x538 <__stack+0x39>
 532:	fe 01       	movw	r30, r28
 534:	ec 01       	movw	r28, r24
 536:	f9 cf       	rjmp	.-14     	; 0x52a <__stack+0x2b>
 538:	ce 01       	movw	r24, r28
 53a:	02 96       	adiw	r24, 0x02	; 2
 53c:	28 81       	ld	r18, Y
 53e:	39 81       	ldd	r19, Y+1	; 0x01
 540:	82 0f       	add	r24, r18
 542:	93 1f       	adc	r25, r19
 544:	20 91 0c 01 	lds	r18, 0x010C
 548:	30 91 0d 01 	lds	r19, 0x010D
 54c:	28 17       	cp	r18, r24
 54e:	39 07       	cpc	r19, r25
 550:	69 f4       	brne	.+26     	; 0x56c <__stack+0x6d>
 552:	30 97       	sbiw	r30, 0x00	; 0
 554:	29 f4       	brne	.+10     	; 0x560 <__stack+0x61>
 556:	10 92 0f 01 	sts	0x010F, r1
 55a:	10 92 0e 01 	sts	0x010E, r1
 55e:	02 c0       	rjmp	.+4      	; 0x564 <__stack+0x65>
 560:	13 82       	std	Z+3, r1	; 0x03
 562:	12 82       	std	Z+2, r1	; 0x02
 564:	d0 93 0d 01 	sts	0x010D, r29
 568:	c0 93 0c 01 	sts	0x010C, r28
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <memset>:
 572:	dc 01       	movw	r26, r24
 574:	01 c0       	rjmp	.+2      	; 0x578 <memset+0x6>
 576:	6d 93       	st	X+, r22
 578:	41 50       	subi	r20, 0x01	; 1
 57a:	50 40       	sbci	r21, 0x00	; 0
 57c:	e0 f7       	brcc	.-8      	; 0x576 <memset+0x4>
 57e:	08 95       	ret

00000580 <_exit>:
 580:	f8 94       	cli

00000582 <__stop_program>:
 582:	ff cf       	rjmp	.-2      	; 0x582 <__stop_program>
